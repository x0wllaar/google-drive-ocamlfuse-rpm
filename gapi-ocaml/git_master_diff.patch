diff --git a/LICENSE b/LICENSE
index 2e721d26..9b7bc57e 100644
--- a/LICENSE
+++ b/LICENSE
@@ -1,4 +1,4 @@
-Copyright (c) 2011-2019 Alessandro Strada
+Copyright (c) 2011-2022 Alessandro Strada
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
diff --git a/README.md b/README.md
index e2f81154..f80e0d42 100644
--- a/README.md
+++ b/README.md
@@ -42,7 +42,7 @@ You will need the following libraries:
 * [Ocamlnet][] >= 4.1.4
 * [Ocurl][] >= 0.5.3
 * [Cryptokit][] >= 1.3.14
-* [Yojson][] >= 1.0.2
+* [Yojson][] >= 1.6.0
 * [Xmlm][] >= 1.0.2
 * [OUnit][] >= 1.1.0 (to build and run the tests, optional)
 
@@ -53,7 +53,7 @@ This library was developed and tested on Ubuntu LTS (64-bit).
 [Ocamlnet]: http://projects.camlcity.org/projects/ocamlnet.html
 [Ocurl]: http://ygrek.org.ua/p/ocurl/
 [Cryptokit]: https://github.com/xavierleroy/cryptokit
-[Yojson]: http://mjambon.com/yojson.html
+[Yojson]: https://github.com/ocaml-community/yojson
 [Xmlm]: http://erratique.ch/software/xmlm
 [OUnit]: http://ounit.forge.ocamlcore.org/
 
diff --git a/gapi-ocaml.opam b/gapi-ocaml.opam
index cb9b0fb5..91193fbb 100644
--- a/gapi-ocaml.opam
+++ b/gapi-ocaml.opam
@@ -15,8 +15,8 @@ depends: [
   "dune"
   "ocamlnet" {>= "4.1.4"}
   "ocurl"
-  "ounit" {with-test}
-  "yojson"
+  "ounit2" {with-test}
+  "yojson" {>= "1.6.0"}
 ]
 synopsis: "A simple OCaml client for Google Services"
 description: """
diff --git a/src/gapi/dune b/src/gapi/dune
index fd86aa15..d0279c8a 100644
--- a/src/gapi/dune
+++ b/src/gapi/dune
@@ -3,5 +3,5 @@
  (public_name gapi-ocaml)
  (wrapped false)
  (libraries netsys threads netstring curl str cryptokit yojson)
- (flags (:standard -w -3-23-27-32-33))
+ (flags (:standard -w -23-27-32-33))
  (synopsis "Google APIs client library"))
diff --git a/src/gapi/gapiCalendarV3Model.ml b/src/gapi/gapiCalendarV3Model.ml
index bdf6eae5..0bc02246 100644
--- a/src/gapi/gapiCalendarV3Model.ml
+++ b/src/gapi/gapiCalendarV3Model.ml
@@ -1,24 +1,46 @@
-(* Warning! This file is generated. Modify at your own risk. *)
+(* Warning! This file is generated. Modify at your own risk.
+        *)
 
-module FreeBusyRequestItem =
+module Setting =
 struct
   type t = {
+    etag : string;
+    value : string;
+    kind : string;
     id : string;
     
   }
   
+  let etag = {
+    GapiLens.get = (fun x -> x.etag);
+    GapiLens.set = (fun v x -> { x with etag = v });
+  }
+  let value = {
+    GapiLens.get = (fun x -> x.value);
+    GapiLens.set = (fun v x -> { x with value = v });
+  }
+  let kind = {
+    GapiLens.get = (fun x -> x.kind);
+    GapiLens.set = (fun v x -> { x with kind = v });
+  }
   let id = {
     GapiLens.get = (fun x -> x.id);
     GapiLens.set = (fun v x -> { x with id = v });
   }
   
   let empty = {
+    etag = "";
+    value = "";
+    kind = "";
     id = "";
     
   }
   
   let rec render_content x = 
      [
+      GapiJson.render_string_value "etag" x.etag;
+      GapiJson.render_string_value "value" x.value;
+      GapiJson.render_string_value "kind" x.kind;
       GapiJson.render_string_value "id" x.id;
       
     ]
@@ -26,6 +48,18 @@ struct
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with etag = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "value"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with value = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with kind = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
         `String v) ->
@@ -35,7 +69,7 @@ struct
       cs) ->
       GapiJson.parse_children parse empty (fun x -> x) cs
     | e ->
-      GapiJson.unexpected "GapiCalendarV3Model.FreeBusyRequestItem.parse" e x
+      GapiJson.unexpected "GapiCalendarV3Model.Setting.parse" e x
   
   let to_data_model = GapiJson.render_root render
   
@@ -43,61 +77,54 @@ struct
   
 end
 
-module FreeBusyRequest =
+module Settings =
 struct
   type t = {
-    calendarExpansionMax : int;
-    groupExpansionMax : int;
-    items : FreeBusyRequestItem.t list;
-    timeMax : GapiDate.t;
-    timeMin : GapiDate.t;
-    timeZone : string;
+    etag : string;
+    nextPageToken : string;
+    items : Setting.t list;
+    nextSyncToken : string;
+    kind : string;
     
   }
   
-  let calendarExpansionMax = {
-    GapiLens.get = (fun x -> x.calendarExpansionMax);
-    GapiLens.set = (fun v x -> { x with calendarExpansionMax = v });
+  let etag = {
+    GapiLens.get = (fun x -> x.etag);
+    GapiLens.set = (fun v x -> { x with etag = v });
   }
-  let groupExpansionMax = {
-    GapiLens.get = (fun x -> x.groupExpansionMax);
-    GapiLens.set = (fun v x -> { x with groupExpansionMax = v });
+  let nextPageToken = {
+    GapiLens.get = (fun x -> x.nextPageToken);
+    GapiLens.set = (fun v x -> { x with nextPageToken = v });
   }
   let items = {
     GapiLens.get = (fun x -> x.items);
     GapiLens.set = (fun v x -> { x with items = v });
   }
-  let timeMax = {
-    GapiLens.get = (fun x -> x.timeMax);
-    GapiLens.set = (fun v x -> { x with timeMax = v });
-  }
-  let timeMin = {
-    GapiLens.get = (fun x -> x.timeMin);
-    GapiLens.set = (fun v x -> { x with timeMin = v });
+  let nextSyncToken = {
+    GapiLens.get = (fun x -> x.nextSyncToken);
+    GapiLens.set = (fun v x -> { x with nextSyncToken = v });
   }
-  let timeZone = {
-    GapiLens.get = (fun x -> x.timeZone);
-    GapiLens.set = (fun v x -> { x with timeZone = v });
+  let kind = {
+    GapiLens.get = (fun x -> x.kind);
+    GapiLens.set = (fun v x -> { x with kind = v });
   }
   
   let empty = {
-    calendarExpansionMax = 0;
-    groupExpansionMax = 0;
+    etag = "";
+    nextPageToken = "";
     items = [];
-    timeMax = GapiDate.epoch;
-    timeMin = GapiDate.epoch;
-    timeZone = "";
+    nextSyncToken = "";
+    kind = "";
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_int_value "calendarExpansionMax" x.calendarExpansionMax;
-      GapiJson.render_int_value "groupExpansionMax" x.groupExpansionMax;
-      GapiJson.render_array "items" FreeBusyRequestItem.render x.items;
-      GapiJson.render_date_value "timeMax" x.timeMax;
-      GapiJson.render_date_value "timeMin" x.timeMin;
-      GapiJson.render_string_value "timeZone" x.timeZone;
+      GapiJson.render_string_value "etag" x.etag;
+      GapiJson.render_string_value "nextPageToken" x.nextPageToken;
+      GapiJson.render_array "items" Setting.render x.items;
+      GapiJson.render_string_value "nextSyncToken" x.nextSyncToken;
+      GapiJson.render_string_value "kind" x.kind;
       
     ]
   and render x = 
@@ -105,13 +132,13 @@ struct
   
   let rec parse x = function
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "calendarExpansionMax"; data_type = GapiJson.Scalar },
-        `Int v) ->
-      { x with calendarExpansionMax = v }
+        ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with etag = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "groupExpansionMax"; data_type = GapiJson.Scalar },
-        `Int v) ->
-      { x with groupExpansionMax = v }
+        ({ GapiJson.name = "nextPageToken"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with nextPageToken = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "items"; data_type = GapiJson.Array },
         cs) ->
@@ -121,33 +148,29 @@ struct
               ({ GapiJson.name = ""; data_type = GapiJson.Object },
               cs) ->
             GapiJson.parse_children
-              FreeBusyRequestItem.parse
-              FreeBusyRequestItem.empty
+              Setting.parse
+              Setting.empty
               (fun v -> v)
               cs
           | e ->
-            GapiJson.unexpected "GapiCalendarV3Model.FreeBusyRequest.parse.parse_collection" e x')
-        FreeBusyRequestItem.empty
+            GapiJson.unexpected "GapiCalendarV3Model.Settings.parse.parse_collection" e x')
+        Setting.empty
         (fun v -> { x with items = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "timeMax"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with timeMax = GapiDate.of_string v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "timeMin"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "nextSyncToken"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with timeMin = GapiDate.of_string v }
+      { x with nextSyncToken = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "timeZone"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with timeZone = v }
+      { x with kind = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
       GapiJson.parse_children parse empty (fun x -> x) cs
     | e ->
-      GapiJson.unexpected "GapiCalendarV3Model.FreeBusyRequest.parse" e x
+      GapiJson.unexpected "GapiCalendarV3Model.Settings.parse" e x
   
   let to_data_model = GapiJson.render_root render
   
@@ -155,75 +178,42 @@ struct
   
 end
 
-module Setting =
+module FreeBusyRequestItem =
 struct
   type t = {
-    etag : string;
     id : string;
-    kind : string;
-    value : string;
     
   }
   
-  let etag = {
-    GapiLens.get = (fun x -> x.etag);
-    GapiLens.set = (fun v x -> { x with etag = v });
-  }
   let id = {
     GapiLens.get = (fun x -> x.id);
     GapiLens.set = (fun v x -> { x with id = v });
   }
-  let kind = {
-    GapiLens.get = (fun x -> x.kind);
-    GapiLens.set = (fun v x -> { x with kind = v });
-  }
-  let value = {
-    GapiLens.get = (fun x -> x.value);
-    GapiLens.set = (fun v x -> { x with value = v });
-  }
   
   let empty = {
-    etag = "";
     id = "";
-    kind = "";
-    value = "";
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_string_value "etag" x.etag;
       GapiJson.render_string_value "id" x.id;
-      GapiJson.render_string_value "kind" x.kind;
-      GapiJson.render_string_value "value" x.value;
       
     ]
   and render x = 
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with etag = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with id = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with kind = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "value"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with value = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
       GapiJson.parse_children parse empty (fun x -> x) cs
     | e ->
-      GapiJson.unexpected "GapiCalendarV3Model.Setting.parse" e x
+      GapiJson.unexpected "GapiCalendarV3Model.FreeBusyRequestItem.parse" e x
   
   let to_data_model = GapiJson.render_root render
   
@@ -231,54 +221,61 @@ struct
   
 end
 
-module Settings =
+module FreeBusyRequest =
 struct
   type t = {
-    etag : string;
-    items : Setting.t list;
-    kind : string;
-    nextPageToken : string;
-    nextSyncToken : string;
+    timeMax : GapiDate.t;
+    timeZone : string;
+    calendarExpansionMax : int;
+    timeMin : GapiDate.t;
+    groupExpansionMax : int;
+    items : FreeBusyRequestItem.t list;
     
   }
   
-  let etag = {
-    GapiLens.get = (fun x -> x.etag);
-    GapiLens.set = (fun v x -> { x with etag = v });
+  let timeMax = {
+    GapiLens.get = (fun x -> x.timeMax);
+    GapiLens.set = (fun v x -> { x with timeMax = v });
   }
-  let items = {
-    GapiLens.get = (fun x -> x.items);
-    GapiLens.set = (fun v x -> { x with items = v });
+  let timeZone = {
+    GapiLens.get = (fun x -> x.timeZone);
+    GapiLens.set = (fun v x -> { x with timeZone = v });
   }
-  let kind = {
-    GapiLens.get = (fun x -> x.kind);
-    GapiLens.set = (fun v x -> { x with kind = v });
+  let calendarExpansionMax = {
+    GapiLens.get = (fun x -> x.calendarExpansionMax);
+    GapiLens.set = (fun v x -> { x with calendarExpansionMax = v });
   }
-  let nextPageToken = {
-    GapiLens.get = (fun x -> x.nextPageToken);
-    GapiLens.set = (fun v x -> { x with nextPageToken = v });
+  let timeMin = {
+    GapiLens.get = (fun x -> x.timeMin);
+    GapiLens.set = (fun v x -> { x with timeMin = v });
   }
-  let nextSyncToken = {
-    GapiLens.get = (fun x -> x.nextSyncToken);
-    GapiLens.set = (fun v x -> { x with nextSyncToken = v });
+  let groupExpansionMax = {
+    GapiLens.get = (fun x -> x.groupExpansionMax);
+    GapiLens.set = (fun v x -> { x with groupExpansionMax = v });
+  }
+  let items = {
+    GapiLens.get = (fun x -> x.items);
+    GapiLens.set = (fun v x -> { x with items = v });
   }
   
   let empty = {
-    etag = "";
+    timeMax = GapiDate.epoch;
+    timeZone = "";
+    calendarExpansionMax = 0;
+    timeMin = GapiDate.epoch;
+    groupExpansionMax = 0;
     items = [];
-    kind = "";
-    nextPageToken = "";
-    nextSyncToken = "";
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_string_value "etag" x.etag;
-      GapiJson.render_array "items" Setting.render x.items;
-      GapiJson.render_string_value "kind" x.kind;
-      GapiJson.render_string_value "nextPageToken" x.nextPageToken;
-      GapiJson.render_string_value "nextSyncToken" x.nextSyncToken;
+      GapiJson.render_date_value "timeMax" x.timeMax;
+      GapiJson.render_string_value "timeZone" x.timeZone;
+      GapiJson.render_int_value "calendarExpansionMax" x.calendarExpansionMax;
+      GapiJson.render_date_value "timeMin" x.timeMin;
+      GapiJson.render_int_value "groupExpansionMax" x.groupExpansionMax;
+      GapiJson.render_array "items" FreeBusyRequestItem.render x.items;
       
     ]
   and render x = 
@@ -286,9 +283,25 @@ struct
   
   let rec parse x = function
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "timeMax"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with etag = v }
+      { x with timeMax = GapiDate.of_string v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "timeZone"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with timeZone = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "calendarExpansionMax"; data_type = GapiJson.Scalar },
+        `Int v) ->
+      { x with calendarExpansionMax = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "timeMin"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with timeMin = GapiDate.of_string v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "groupExpansionMax"; data_type = GapiJson.Scalar },
+        `Int v) ->
+      { x with groupExpansionMax = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "items"; data_type = GapiJson.Array },
         cs) ->
@@ -298,33 +311,21 @@ struct
               ({ GapiJson.name = ""; data_type = GapiJson.Object },
               cs) ->
             GapiJson.parse_children
-              Setting.parse
-              Setting.empty
+              FreeBusyRequestItem.parse
+              FreeBusyRequestItem.empty
               (fun v -> v)
               cs
           | e ->
-            GapiJson.unexpected "GapiCalendarV3Model.Settings.parse.parse_collection" e x')
-        Setting.empty
+            GapiJson.unexpected "GapiCalendarV3Model.FreeBusyRequest.parse.parse_collection" e x')
+        FreeBusyRequestItem.empty
         (fun v -> { x with items = v })
         cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with kind = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "nextPageToken"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with nextPageToken = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "nextSyncToken"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with nextSyncToken = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
       GapiJson.parse_children parse empty (fun x -> x) cs
     | e ->
-      GapiJson.unexpected "GapiCalendarV3Model.Settings.parse" e x
+      GapiJson.unexpected "GapiCalendarV3Model.FreeBusyRequest.parse" e x
   
   let to_data_model = GapiJson.render_root render
   
@@ -335,27 +336,35 @@ end
 module EventAttendee =
 struct
   type t = {
-    additionalGuests : int;
+    resource : bool;
     comment : string;
+    optional : bool;
+    id : string;
     displayName : string;
     email : string;
-    id : string;
-    optional : bool;
-    organizer : bool;
-    resource : bool;
     responseStatus : string;
+    additionalGuests : int;
+    organizer : bool;
     self : bool;
     
   }
   
-  let additionalGuests = {
-    GapiLens.get = (fun x -> x.additionalGuests);
-    GapiLens.set = (fun v x -> { x with additionalGuests = v });
+  let resource = {
+    GapiLens.get = (fun x -> x.resource);
+    GapiLens.set = (fun v x -> { x with resource = v });
   }
   let comment = {
     GapiLens.get = (fun x -> x.comment);
     GapiLens.set = (fun v x -> { x with comment = v });
   }
+  let optional = {
+    GapiLens.get = (fun x -> x.optional);
+    GapiLens.set = (fun v x -> { x with optional = v });
+  }
+  let id = {
+    GapiLens.get = (fun x -> x.id);
+    GapiLens.set = (fun v x -> { x with id = v });
+  }
   let displayName = {
     GapiLens.get = (fun x -> x.displayName);
     GapiLens.set = (fun v x -> { x with displayName = v });
@@ -364,56 +373,48 @@ struct
     GapiLens.get = (fun x -> x.email);
     GapiLens.set = (fun v x -> { x with email = v });
   }
-  let id = {
-    GapiLens.get = (fun x -> x.id);
-    GapiLens.set = (fun v x -> { x with id = v });
+  let responseStatus = {
+    GapiLens.get = (fun x -> x.responseStatus);
+    GapiLens.set = (fun v x -> { x with responseStatus = v });
   }
-  let optional = {
-    GapiLens.get = (fun x -> x.optional);
-    GapiLens.set = (fun v x -> { x with optional = v });
+  let additionalGuests = {
+    GapiLens.get = (fun x -> x.additionalGuests);
+    GapiLens.set = (fun v x -> { x with additionalGuests = v });
   }
   let organizer = {
     GapiLens.get = (fun x -> x.organizer);
     GapiLens.set = (fun v x -> { x with organizer = v });
   }
-  let resource = {
-    GapiLens.get = (fun x -> x.resource);
-    GapiLens.set = (fun v x -> { x with resource = v });
-  }
-  let responseStatus = {
-    GapiLens.get = (fun x -> x.responseStatus);
-    GapiLens.set = (fun v x -> { x with responseStatus = v });
-  }
   let self = {
     GapiLens.get = (fun x -> x.self);
     GapiLens.set = (fun v x -> { x with self = v });
   }
   
   let empty = {
-    additionalGuests = 0;
+    resource = false;
     comment = "";
+    optional = false;
+    id = "";
     displayName = "";
     email = "";
-    id = "";
-    optional = false;
-    organizer = false;
-    resource = false;
     responseStatus = "";
+    additionalGuests = 0;
+    organizer = false;
     self = false;
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_int_value "additionalGuests" x.additionalGuests;
+      GapiJson.render_bool_value "resource" x.resource;
       GapiJson.render_string_value "comment" x.comment;
+      GapiJson.render_bool_value "optional" x.optional;
+      GapiJson.render_string_value "id" x.id;
       GapiJson.render_string_value "displayName" x.displayName;
       GapiJson.render_string_value "email" x.email;
-      GapiJson.render_string_value "id" x.id;
-      GapiJson.render_bool_value "optional" x.optional;
-      GapiJson.render_bool_value "organizer" x.organizer;
-      GapiJson.render_bool_value "resource" x.resource;
       GapiJson.render_string_value "responseStatus" x.responseStatus;
+      GapiJson.render_int_value "additionalGuests" x.additionalGuests;
+      GapiJson.render_bool_value "organizer" x.organizer;
       GapiJson.render_bool_value "self" x.self;
       
     ]
@@ -422,13 +423,21 @@ struct
   
   let rec parse x = function
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "additionalGuests"; data_type = GapiJson.Scalar },
-        `Int v) ->
-      { x with additionalGuests = v }
+        ({ GapiJson.name = "resource"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with resource = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "comment"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with comment = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "optional"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with optional = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with id = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "displayName"; data_type = GapiJson.Scalar },
         `String v) ->
@@ -438,25 +447,17 @@ struct
         `String v) ->
       { x with email = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "responseStatus"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with id = v }
+      { x with responseStatus = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "optional"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with optional = v }
+        ({ GapiJson.name = "additionalGuests"; data_type = GapiJson.Scalar },
+        `Int v) ->
+      { x with additionalGuests = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "organizer"; data_type = GapiJson.Scalar },
         `Bool v) ->
       { x with organizer = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "resource"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with resource = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "responseStatus"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with responseStatus = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "self"; data_type = GapiJson.Scalar },
         `Bool v) ->
@@ -474,126 +475,6 @@ struct
   
 end
 
-module EntryPoint =
-struct
-  type t = {
-    accessCode : string;
-    entryPointType : string;
-    label : string;
-    meetingCode : string;
-    passcode : string;
-    password : string;
-    pin : string;
-    uri : string;
-    
-  }
-  
-  let accessCode = {
-    GapiLens.get = (fun x -> x.accessCode);
-    GapiLens.set = (fun v x -> { x with accessCode = v });
-  }
-  let entryPointType = {
-    GapiLens.get = (fun x -> x.entryPointType);
-    GapiLens.set = (fun v x -> { x with entryPointType = v });
-  }
-  let label = {
-    GapiLens.get = (fun x -> x.label);
-    GapiLens.set = (fun v x -> { x with label = v });
-  }
-  let meetingCode = {
-    GapiLens.get = (fun x -> x.meetingCode);
-    GapiLens.set = (fun v x -> { x with meetingCode = v });
-  }
-  let passcode = {
-    GapiLens.get = (fun x -> x.passcode);
-    GapiLens.set = (fun v x -> { x with passcode = v });
-  }
-  let password = {
-    GapiLens.get = (fun x -> x.password);
-    GapiLens.set = (fun v x -> { x with password = v });
-  }
-  let pin = {
-    GapiLens.get = (fun x -> x.pin);
-    GapiLens.set = (fun v x -> { x with pin = v });
-  }
-  let uri = {
-    GapiLens.get = (fun x -> x.uri);
-    GapiLens.set = (fun v x -> { x with uri = v });
-  }
-  
-  let empty = {
-    accessCode = "";
-    entryPointType = "";
-    label = "";
-    meetingCode = "";
-    passcode = "";
-    password = "";
-    pin = "";
-    uri = "";
-    
-  }
-  
-  let rec render_content x = 
-     [
-      GapiJson.render_string_value "accessCode" x.accessCode;
-      GapiJson.render_string_value "entryPointType" x.entryPointType;
-      GapiJson.render_string_value "label" x.label;
-      GapiJson.render_string_value "meetingCode" x.meetingCode;
-      GapiJson.render_string_value "passcode" x.passcode;
-      GapiJson.render_string_value "password" x.password;
-      GapiJson.render_string_value "pin" x.pin;
-      GapiJson.render_string_value "uri" x.uri;
-      
-    ]
-  and render x = 
-    GapiJson.render_object "" (render_content x)
-  
-  let rec parse x = function
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "accessCode"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with accessCode = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "entryPointType"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with entryPointType = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "label"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with label = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "meetingCode"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with meetingCode = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "passcode"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with passcode = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "password"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with password = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "pin"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with pin = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "uri"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with uri = v }
-    | GapiCore.AnnotatedTree.Node
-      ({ GapiJson.name = ""; data_type = GapiJson.Object },
-      cs) ->
-      GapiJson.parse_children parse empty (fun x -> x) cs
-    | e ->
-      GapiJson.unexpected "GapiCalendarV3Model.EntryPoint.parse" e x
-  
-  let to_data_model = GapiJson.render_root render
-  
-  let of_data_model = GapiJson.parse_root parse empty
-  
-end
-
 module Error =
 struct
   type t = {
@@ -648,33 +529,89 @@ struct
   
 end
 
-module ColorDefinition =
+module EntryPoint =
 struct
   type t = {
-    background : string;
-    foreground : string;
+    regionCode : string;
+    pin : string;
+    meetingCode : string;
+    passcode : string;
+    entryPointFeatures : string list;
+    uri : string;
+    label : string;
+    password : string;
+    entryPointType : string;
+    accessCode : string;
     
   }
   
-  let background = {
-    GapiLens.get = (fun x -> x.background);
-    GapiLens.set = (fun v x -> { x with background = v });
+  let regionCode = {
+    GapiLens.get = (fun x -> x.regionCode);
+    GapiLens.set = (fun v x -> { x with regionCode = v });
   }
-  let foreground = {
-    GapiLens.get = (fun x -> x.foreground);
-    GapiLens.set = (fun v x -> { x with foreground = v });
+  let pin = {
+    GapiLens.get = (fun x -> x.pin);
+    GapiLens.set = (fun v x -> { x with pin = v });
+  }
+  let meetingCode = {
+    GapiLens.get = (fun x -> x.meetingCode);
+    GapiLens.set = (fun v x -> { x with meetingCode = v });
+  }
+  let passcode = {
+    GapiLens.get = (fun x -> x.passcode);
+    GapiLens.set = (fun v x -> { x with passcode = v });
+  }
+  let entryPointFeatures = {
+    GapiLens.get = (fun x -> x.entryPointFeatures);
+    GapiLens.set = (fun v x -> { x with entryPointFeatures = v });
+  }
+  let uri = {
+    GapiLens.get = (fun x -> x.uri);
+    GapiLens.set = (fun v x -> { x with uri = v });
+  }
+  let label = {
+    GapiLens.get = (fun x -> x.label);
+    GapiLens.set = (fun v x -> { x with label = v });
+  }
+  let password = {
+    GapiLens.get = (fun x -> x.password);
+    GapiLens.set = (fun v x -> { x with password = v });
+  }
+  let entryPointType = {
+    GapiLens.get = (fun x -> x.entryPointType);
+    GapiLens.set = (fun v x -> { x with entryPointType = v });
+  }
+  let accessCode = {
+    GapiLens.get = (fun x -> x.accessCode);
+    GapiLens.set = (fun v x -> { x with accessCode = v });
   }
   
   let empty = {
-    background = "";
-    foreground = "";
+    regionCode = "";
+    pin = "";
+    meetingCode = "";
+    passcode = "";
+    entryPointFeatures = [];
+    uri = "";
+    label = "";
+    password = "";
+    entryPointType = "";
+    accessCode = "";
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_string_value "background" x.background;
-      GapiJson.render_string_value "foreground" x.foreground;
+      GapiJson.render_string_value "regionCode" x.regionCode;
+      GapiJson.render_string_value "pin" x.pin;
+      GapiJson.render_string_value "meetingCode" x.meetingCode;
+      GapiJson.render_string_value "passcode" x.passcode;
+      GapiJson.render_array "entryPointFeatures" (GapiJson.render_string_value "") x.entryPointFeatures;
+      GapiJson.render_string_value "uri" x.uri;
+      GapiJson.render_string_value "label" x.label;
+      GapiJson.render_string_value "password" x.password;
+      GapiJson.render_string_value "entryPointType" x.entryPointType;
+      GapiJson.render_string_value "accessCode" x.accessCode;
       
     ]
   and render x = 
@@ -682,19 +619,61 @@ struct
   
   let rec parse x = function
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "background"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "regionCode"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with background = v }
+      { x with regionCode = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "foreground"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "pin"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with foreground = v }
+      { x with pin = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "meetingCode"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with meetingCode = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "passcode"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with passcode = v }
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "entryPointFeatures"; data_type = GapiJson.Array },
+        cs) ->
+      GapiJson.parse_collection
+        (fun x' -> function
+          | GapiCore.AnnotatedTree.Leaf
+              ({ GapiJson.name = ""; data_type = GapiJson.Scalar },
+              `String v) ->
+            v
+          | e ->
+            GapiJson.unexpected "GapiCalendarV3Model.EntryPoint.parse.parse_collection" e x')
+        ""
+        (fun v -> { x with entryPointFeatures = v })
+        cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "uri"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with uri = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "label"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with label = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "password"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with password = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "entryPointType"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with entryPointType = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "accessCode"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with accessCode = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
       GapiJson.parse_children parse empty (fun x -> x) cs
     | e ->
-      GapiJson.unexpected "GapiCalendarV3Model.ColorDefinition.parse" e x
+      GapiJson.unexpected "GapiCalendarV3Model.EntryPoint.parse" e x
   
   let to_data_model = GapiJson.render_root render
   
@@ -705,50 +684,36 @@ end
 module FreeBusyGroup =
 struct
   type t = {
-    calendars : string list;
     errors : Error.t list;
+    calendars : string list;
     
   }
   
-  let calendars = {
-    GapiLens.get = (fun x -> x.calendars);
-    GapiLens.set = (fun v x -> { x with calendars = v });
-  }
   let errors = {
     GapiLens.get = (fun x -> x.errors);
     GapiLens.set = (fun v x -> { x with errors = v });
   }
+  let calendars = {
+    GapiLens.get = (fun x -> x.calendars);
+    GapiLens.set = (fun v x -> { x with calendars = v });
+  }
   
   let empty = {
-    calendars = [];
     errors = [];
+    calendars = [];
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_array "calendars" (GapiJson.render_string_value "") x.calendars;
       GapiJson.render_array "errors" Error.render x.errors;
+      GapiJson.render_array "calendars" (GapiJson.render_string_value "") x.calendars;
       
     ]
   and render x = 
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "calendars"; data_type = GapiJson.Array },
-        cs) ->
-      GapiJson.parse_collection
-        (fun x' -> function
-          | GapiCore.AnnotatedTree.Leaf
-              ({ GapiJson.name = ""; data_type = GapiJson.Scalar },
-              `String v) ->
-            v
-          | e ->
-            GapiJson.unexpected "GapiCalendarV3Model.FreeBusyGroup.parse.parse_collection" e x')
-        ""
-        (fun v -> { x with calendars = v })
-        cs
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "errors"; data_type = GapiJson.Array },
         cs) ->
@@ -763,6 +728,20 @@ struct
         Error.empty
         (fun v -> { x with errors = v })
         cs
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "calendars"; data_type = GapiJson.Array },
+        cs) ->
+      GapiJson.parse_collection
+        (fun x' -> function
+          | GapiCore.AnnotatedTree.Leaf
+              ({ GapiJson.name = ""; data_type = GapiJson.Scalar },
+              `String v) ->
+            v
+          | e ->
+            GapiJson.unexpected "GapiCalendarV3Model.FreeBusyGroup.parse.parse_collection" e x')
+        ""
+        (fun v -> { x with calendars = v })
+        cs
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
@@ -776,6 +755,60 @@ struct
   
 end
 
+module ColorDefinition =
+struct
+  type t = {
+    background : string;
+    foreground : string;
+    
+  }
+  
+  let background = {
+    GapiLens.get = (fun x -> x.background);
+    GapiLens.set = (fun v x -> { x with background = v });
+  }
+  let foreground = {
+    GapiLens.get = (fun x -> x.foreground);
+    GapiLens.set = (fun v x -> { x with foreground = v });
+  }
+  
+  let empty = {
+    background = "";
+    foreground = "";
+    
+  }
+  
+  let rec render_content x = 
+     [
+      GapiJson.render_string_value "background" x.background;
+      GapiJson.render_string_value "foreground" x.foreground;
+      
+    ]
+  and render x = 
+    GapiJson.render_object "" (render_content x)
+  
+  let rec parse x = function
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "background"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with background = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "foreground"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with foreground = v }
+    | GapiCore.AnnotatedTree.Node
+      ({ GapiJson.name = ""; data_type = GapiJson.Object },
+      cs) ->
+      GapiJson.parse_children parse empty (fun x -> x) cs
+    | e ->
+      GapiJson.unexpected "GapiCalendarV3Model.ColorDefinition.parse" e x
+  
+  let to_data_model = GapiJson.render_root render
+  
+  let of_data_model = GapiJson.parse_root parse empty
+  
+end
+
 module ConferenceProperties =
 struct
   type t = {
@@ -929,11 +962,11 @@ struct
   
 end
 
-module CalendarNotification =
+module EventReminder =
 struct
   type t = {
     _method : string;
-    _type : string;
+    minutes : int;
     
   }
   
@@ -941,21 +974,21 @@ struct
     GapiLens.get = (fun x -> x._method);
     GapiLens.set = (fun v x -> { x with _method = v });
   }
-  let _type = {
-    GapiLens.get = (fun x -> x._type);
-    GapiLens.set = (fun v x -> { x with _type = v });
+  let minutes = {
+    GapiLens.get = (fun x -> x.minutes);
+    GapiLens.set = (fun v x -> { x with minutes = v });
   }
   
   let empty = {
     _method = "";
-    _type = "";
+    minutes = 0;
     
   }
   
   let rec render_content x = 
      [
       GapiJson.render_string_value "method" x._method;
-      GapiJson.render_string_value "type" x._type;
+      GapiJson.render_int_value "minutes" x.minutes;
       
     ]
   and render x = 
@@ -967,15 +1000,15 @@ struct
         `String v) ->
       { x with _method = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "type"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with _type = v }
+        ({ GapiJson.name = "minutes"; data_type = GapiJson.Scalar },
+        `Int v) ->
+      { x with minutes = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
       GapiJson.parse_children parse empty (fun x -> x) cs
     | e ->
-      GapiJson.unexpected "GapiCalendarV3Model.CalendarNotification.parse" e x
+      GapiJson.unexpected "GapiCalendarV3Model.EventReminder.parse" e x
   
   let to_data_model = GapiJson.render_root render
   
@@ -983,11 +1016,11 @@ struct
   
 end
 
-module EventReminder =
+module CalendarNotification =
 struct
   type t = {
     _method : string;
-    minutes : int;
+    _type : string;
     
   }
   
@@ -995,21 +1028,21 @@ struct
     GapiLens.get = (fun x -> x._method);
     GapiLens.set = (fun v x -> { x with _method = v });
   }
-  let minutes = {
-    GapiLens.get = (fun x -> x.minutes);
-    GapiLens.set = (fun v x -> { x with minutes = v });
+  let _type = {
+    GapiLens.get = (fun x -> x._type);
+    GapiLens.set = (fun v x -> { x with _type = v });
   }
   
   let empty = {
     _method = "";
-    minutes = 0;
+    _type = "";
     
   }
   
   let rec render_content x = 
      [
       GapiJson.render_string_value "method" x._method;
-      GapiJson.render_int_value "minutes" x.minutes;
+      GapiJson.render_string_value "type" x._type;
       
     ]
   and render x = 
@@ -1021,15 +1054,15 @@ struct
         `String v) ->
       { x with _method = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "minutes"; data_type = GapiJson.Scalar },
-        `Int v) ->
-      { x with minutes = v }
+        ({ GapiJson.name = "type"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with _type = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
       GapiJson.parse_children parse empty (fun x -> x) cs
     | e ->
-      GapiJson.unexpected "GapiCalendarV3Model.EventReminder.parse" e x
+      GapiJson.unexpected "GapiCalendarV3Model.CalendarNotification.parse" e x
   
   let to_data_model = GapiJson.render_root render
   
@@ -1093,40 +1126,76 @@ struct
   end
   
   type t = {
+    primary : bool;
+    notificationSettings : NotificationSettings.t;
+    summaryOverride : string;
+    kind : string;
+    etag : string;
+    deleted : bool;
     accessRole : string;
-    backgroundColor : string;
+    selected : bool;
+    description : string;
+    timeZone : string;
     colorId : string;
+    backgroundColor : string;
     conferenceProperties : ConferenceProperties.t;
     defaultReminders : EventReminder.t list;
-    deleted : bool;
-    description : string;
-    etag : string;
-    foregroundColor : string;
     hidden : bool;
-    id : string;
-    kind : string;
     location : string;
-    notificationSettings : NotificationSettings.t;
-    primary : bool;
-    selected : bool;
     summary : string;
-    summaryOverride : string;
-    timeZone : string;
+    id : string;
+    foregroundColor : string;
     
   }
   
+  let primary = {
+    GapiLens.get = (fun x -> x.primary);
+    GapiLens.set = (fun v x -> { x with primary = v });
+  }
+  let notificationSettings = {
+    GapiLens.get = (fun x -> x.notificationSettings);
+    GapiLens.set = (fun v x -> { x with notificationSettings = v });
+  }
+  let summaryOverride = {
+    GapiLens.get = (fun x -> x.summaryOverride);
+    GapiLens.set = (fun v x -> { x with summaryOverride = v });
+  }
+  let kind = {
+    GapiLens.get = (fun x -> x.kind);
+    GapiLens.set = (fun v x -> { x with kind = v });
+  }
+  let etag = {
+    GapiLens.get = (fun x -> x.etag);
+    GapiLens.set = (fun v x -> { x with etag = v });
+  }
+  let deleted = {
+    GapiLens.get = (fun x -> x.deleted);
+    GapiLens.set = (fun v x -> { x with deleted = v });
+  }
   let accessRole = {
     GapiLens.get = (fun x -> x.accessRole);
     GapiLens.set = (fun v x -> { x with accessRole = v });
   }
-  let backgroundColor = {
-    GapiLens.get = (fun x -> x.backgroundColor);
-    GapiLens.set = (fun v x -> { x with backgroundColor = v });
+  let selected = {
+    GapiLens.get = (fun x -> x.selected);
+    GapiLens.set = (fun v x -> { x with selected = v });
+  }
+  let description = {
+    GapiLens.get = (fun x -> x.description);
+    GapiLens.set = (fun v x -> { x with description = v });
+  }
+  let timeZone = {
+    GapiLens.get = (fun x -> x.timeZone);
+    GapiLens.set = (fun v x -> { x with timeZone = v });
   }
   let colorId = {
     GapiLens.get = (fun x -> x.colorId);
     GapiLens.set = (fun v x -> { x with colorId = v });
   }
+  let backgroundColor = {
+    GapiLens.get = (fun x -> x.backgroundColor);
+    GapiLens.set = (fun v x -> { x with backgroundColor = v });
+  }
   let conferenceProperties = {
     GapiLens.get = (fun x -> x.conferenceProperties);
     GapiLens.set = (fun v x -> { x with conferenceProperties = v });
@@ -1135,125 +1204,129 @@ struct
     GapiLens.get = (fun x -> x.defaultReminders);
     GapiLens.set = (fun v x -> { x with defaultReminders = v });
   }
-  let deleted = {
-    GapiLens.get = (fun x -> x.deleted);
-    GapiLens.set = (fun v x -> { x with deleted = v });
-  }
-  let description = {
-    GapiLens.get = (fun x -> x.description);
-    GapiLens.set = (fun v x -> { x with description = v });
-  }
-  let etag = {
-    GapiLens.get = (fun x -> x.etag);
-    GapiLens.set = (fun v x -> { x with etag = v });
-  }
-  let foregroundColor = {
-    GapiLens.get = (fun x -> x.foregroundColor);
-    GapiLens.set = (fun v x -> { x with foregroundColor = v });
-  }
   let hidden = {
     GapiLens.get = (fun x -> x.hidden);
     GapiLens.set = (fun v x -> { x with hidden = v });
   }
-  let id = {
-    GapiLens.get = (fun x -> x.id);
-    GapiLens.set = (fun v x -> { x with id = v });
-  }
-  let kind = {
-    GapiLens.get = (fun x -> x.kind);
-    GapiLens.set = (fun v x -> { x with kind = v });
-  }
   let location = {
     GapiLens.get = (fun x -> x.location);
     GapiLens.set = (fun v x -> { x with location = v });
   }
-  let notificationSettings = {
-    GapiLens.get = (fun x -> x.notificationSettings);
-    GapiLens.set = (fun v x -> { x with notificationSettings = v });
-  }
-  let primary = {
-    GapiLens.get = (fun x -> x.primary);
-    GapiLens.set = (fun v x -> { x with primary = v });
-  }
-  let selected = {
-    GapiLens.get = (fun x -> x.selected);
-    GapiLens.set = (fun v x -> { x with selected = v });
-  }
   let summary = {
     GapiLens.get = (fun x -> x.summary);
     GapiLens.set = (fun v x -> { x with summary = v });
   }
-  let summaryOverride = {
-    GapiLens.get = (fun x -> x.summaryOverride);
-    GapiLens.set = (fun v x -> { x with summaryOverride = v });
+  let id = {
+    GapiLens.get = (fun x -> x.id);
+    GapiLens.set = (fun v x -> { x with id = v });
   }
-  let timeZone = {
-    GapiLens.get = (fun x -> x.timeZone);
-    GapiLens.set = (fun v x -> { x with timeZone = v });
+  let foregroundColor = {
+    GapiLens.get = (fun x -> x.foregroundColor);
+    GapiLens.set = (fun v x -> { x with foregroundColor = v });
   }
   
   let empty = {
+    primary = false;
+    notificationSettings = NotificationSettings.empty;
+    summaryOverride = "";
+    kind = "";
+    etag = "";
+    deleted = false;
     accessRole = "";
-    backgroundColor = "";
+    selected = false;
+    description = "";
+    timeZone = "";
     colorId = "";
+    backgroundColor = "";
     conferenceProperties = ConferenceProperties.empty;
     defaultReminders = [];
-    deleted = false;
-    description = "";
-    etag = "";
-    foregroundColor = "";
     hidden = false;
-    id = "";
-    kind = "";
     location = "";
-    notificationSettings = NotificationSettings.empty;
-    primary = false;
-    selected = false;
     summary = "";
-    summaryOverride = "";
-    timeZone = "";
+    id = "";
+    foregroundColor = "";
     
   }
   
   let rec render_content x = 
      [
+      GapiJson.render_bool_value "primary" x.primary;
+      (fun v -> GapiJson.render_object "notificationSettings" (NotificationSettings.render_content v)) x.notificationSettings;
+      GapiJson.render_string_value "summaryOverride" x.summaryOverride;
+      GapiJson.render_string_value "kind" x.kind;
+      GapiJson.render_string_value "etag" x.etag;
+      GapiJson.render_bool_value "deleted" x.deleted;
       GapiJson.render_string_value "accessRole" x.accessRole;
-      GapiJson.render_string_value "backgroundColor" x.backgroundColor;
+      GapiJson.render_bool_value "selected" x.selected;
+      GapiJson.render_string_value "description" x.description;
+      GapiJson.render_string_value "timeZone" x.timeZone;
       GapiJson.render_string_value "colorId" x.colorId;
+      GapiJson.render_string_value "backgroundColor" x.backgroundColor;
       (fun v -> GapiJson.render_object "conferenceProperties" (ConferenceProperties.render_content v)) x.conferenceProperties;
       GapiJson.render_array "defaultReminders" EventReminder.render x.defaultReminders;
-      GapiJson.render_bool_value "deleted" x.deleted;
-      GapiJson.render_string_value "description" x.description;
-      GapiJson.render_string_value "etag" x.etag;
-      GapiJson.render_string_value "foregroundColor" x.foregroundColor;
       GapiJson.render_bool_value "hidden" x.hidden;
-      GapiJson.render_string_value "id" x.id;
-      GapiJson.render_string_value "kind" x.kind;
       GapiJson.render_string_value "location" x.location;
-      (fun v -> GapiJson.render_object "notificationSettings" (NotificationSettings.render_content v)) x.notificationSettings;
-      GapiJson.render_bool_value "primary" x.primary;
-      GapiJson.render_bool_value "selected" x.selected;
       GapiJson.render_string_value "summary" x.summary;
-      GapiJson.render_string_value "summaryOverride" x.summaryOverride;
-      GapiJson.render_string_value "timeZone" x.timeZone;
+      GapiJson.render_string_value "id" x.id;
+      GapiJson.render_string_value "foregroundColor" x.foregroundColor;
       
     ]
   and render x = 
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "primary"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with primary = v }
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "notificationSettings"; data_type = GapiJson.Object },
+        cs) ->
+      GapiJson.parse_children
+        NotificationSettings.parse
+        NotificationSettings.empty
+        (fun v -> { x with notificationSettings = v })
+        cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "summaryOverride"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with summaryOverride = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with kind = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with etag = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "deleted"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with deleted = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "accessRole"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with accessRole = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "backgroundColor"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "selected"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with selected = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with backgroundColor = v }
+      { x with description = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "timeZone"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with timeZone = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "colorId"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with colorId = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "backgroundColor"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with backgroundColor = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "conferenceProperties"; data_type = GapiJson.Object },
         cs) ->
@@ -1280,66 +1353,26 @@ struct
         EventReminder.empty
         (fun v -> { x with defaultReminders = v })
         cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "deleted"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with deleted = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with description = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with etag = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "foregroundColor"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with foregroundColor = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "hidden"; data_type = GapiJson.Scalar },
         `Bool v) ->
       { x with hidden = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with id = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with kind = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "location"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with location = v }
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "notificationSettings"; data_type = GapiJson.Object },
-        cs) ->
-      GapiJson.parse_children
-        NotificationSettings.parse
-        NotificationSettings.empty
-        (fun v -> { x with notificationSettings = v })
-        cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "primary"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with primary = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "selected"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with selected = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "summary"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with summary = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "summaryOverride"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with summaryOverride = v }
+      { x with id = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "timeZone"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "foregroundColor"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with timeZone = v }
+      { x with foregroundColor = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
@@ -1356,51 +1389,51 @@ end
 module CalendarList =
 struct
   type t = {
-    etag : string;
+    nextSyncToken : string;
     items : CalendarListEntry.t list;
-    kind : string;
     nextPageToken : string;
-    nextSyncToken : string;
+    kind : string;
+    etag : string;
     
   }
   
-  let etag = {
-    GapiLens.get = (fun x -> x.etag);
-    GapiLens.set = (fun v x -> { x with etag = v });
+  let nextSyncToken = {
+    GapiLens.get = (fun x -> x.nextSyncToken);
+    GapiLens.set = (fun v x -> { x with nextSyncToken = v });
   }
   let items = {
     GapiLens.get = (fun x -> x.items);
     GapiLens.set = (fun v x -> { x with items = v });
   }
-  let kind = {
-    GapiLens.get = (fun x -> x.kind);
-    GapiLens.set = (fun v x -> { x with kind = v });
-  }
   let nextPageToken = {
     GapiLens.get = (fun x -> x.nextPageToken);
     GapiLens.set = (fun v x -> { x with nextPageToken = v });
   }
-  let nextSyncToken = {
-    GapiLens.get = (fun x -> x.nextSyncToken);
-    GapiLens.set = (fun v x -> { x with nextSyncToken = v });
+  let kind = {
+    GapiLens.get = (fun x -> x.kind);
+    GapiLens.set = (fun v x -> { x with kind = v });
+  }
+  let etag = {
+    GapiLens.get = (fun x -> x.etag);
+    GapiLens.set = (fun v x -> { x with etag = v });
   }
   
   let empty = {
-    etag = "";
+    nextSyncToken = "";
     items = [];
-    kind = "";
     nextPageToken = "";
-    nextSyncToken = "";
+    kind = "";
+    etag = "";
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_string_value "etag" x.etag;
+      GapiJson.render_string_value "nextSyncToken" x.nextSyncToken;
       GapiJson.render_array "items" CalendarListEntry.render x.items;
-      GapiJson.render_string_value "kind" x.kind;
       GapiJson.render_string_value "nextPageToken" x.nextPageToken;
-      GapiJson.render_string_value "nextSyncToken" x.nextSyncToken;
+      GapiJson.render_string_value "kind" x.kind;
+      GapiJson.render_string_value "etag" x.etag;
       
     ]
   and render x = 
@@ -1408,9 +1441,9 @@ struct
   
   let rec parse x = function
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "nextSyncToken"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with etag = v }
+      { x with nextSyncToken = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "items"; data_type = GapiJson.Array },
         cs) ->
@@ -1429,18 +1462,18 @@ struct
         CalendarListEntry.empty
         (fun v -> { x with items = v })
         cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with kind = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "nextPageToken"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with nextPageToken = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "nextSyncToken"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with nextSyncToken = v }
+      { x with kind = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with etag = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
@@ -1459,44 +1492,44 @@ struct
   module Scope =
   struct
     type t = {
-      _type : string;
       value : string;
+      _type : string;
       
     }
     
-    let _type = {
-      GapiLens.get = (fun x -> x._type);
-      GapiLens.set = (fun v x -> { x with _type = v });
-    }
     let value = {
       GapiLens.get = (fun x -> x.value);
       GapiLens.set = (fun v x -> { x with value = v });
     }
+    let _type = {
+      GapiLens.get = (fun x -> x._type);
+      GapiLens.set = (fun v x -> { x with _type = v });
+    }
     
     let empty = {
-      _type = "";
       value = "";
+      _type = "";
       
     }
     
     let rec render_content x = 
        [
-        GapiJson.render_string_value "type" x._type;
         GapiJson.render_string_value "value" x.value;
+        GapiJson.render_string_value "type" x._type;
         
       ]
     and render x = 
       GapiJson.render_object "" (render_content x)
     
     let rec parse x = function
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "type"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with _type = v }
       | GapiCore.AnnotatedTree.Leaf
           ({ GapiJson.name = "value"; data_type = GapiJson.Scalar },
           `String v) ->
         { x with value = v }
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "type"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with _type = v }
       | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = ""; data_type = GapiJson.Object },
         cs) ->
@@ -1507,14 +1540,18 @@ struct
   end
   
   type t = {
+    kind : string;
     etag : string;
     id : string;
-    kind : string;
     role : string;
     scope : Scope.t;
     
   }
   
+  let kind = {
+    GapiLens.get = (fun x -> x.kind);
+    GapiLens.set = (fun v x -> { x with kind = v });
+  }
   let etag = {
     GapiLens.get = (fun x -> x.etag);
     GapiLens.set = (fun v x -> { x with etag = v });
@@ -1523,10 +1560,6 @@ struct
     GapiLens.get = (fun x -> x.id);
     GapiLens.set = (fun v x -> { x with id = v });
   }
-  let kind = {
-    GapiLens.get = (fun x -> x.kind);
-    GapiLens.set = (fun v x -> { x with kind = v });
-  }
   let role = {
     GapiLens.get = (fun x -> x.role);
     GapiLens.set = (fun v x -> { x with role = v });
@@ -1537,9 +1570,9 @@ struct
   }
   
   let empty = {
+    kind = "";
     etag = "";
     id = "";
-    kind = "";
     role = "";
     scope = Scope.empty;
     
@@ -1547,9 +1580,9 @@ struct
   
   let rec render_content x = 
      [
+      GapiJson.render_string_value "kind" x.kind;
       GapiJson.render_string_value "etag" x.etag;
       GapiJson.render_string_value "id" x.id;
-      GapiJson.render_string_value "kind" x.kind;
       GapiJson.render_string_value "role" x.role;
       (fun v -> GapiJson.render_object "scope" (Scope.render_content v)) x.scope;
       
@@ -1558,6 +1591,10 @@ struct
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with kind = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
         `String v) ->
@@ -1566,10 +1603,6 @@ struct
         ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with id = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with kind = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "role"; data_type = GapiJson.Scalar },
         `String v) ->
@@ -1598,32 +1631,36 @@ end
 module Calendar =
 struct
   type t = {
-    conferenceProperties : ConferenceProperties.t;
     description : string;
-    etag : string;
     id : string;
+    conferenceProperties : ConferenceProperties.t;
+    etag : string;
+    summary : string;
     kind : string;
     location : string;
-    summary : string;
     timeZone : string;
     
   }
   
-  let conferenceProperties = {
-    GapiLens.get = (fun x -> x.conferenceProperties);
-    GapiLens.set = (fun v x -> { x with conferenceProperties = v });
-  }
   let description = {
     GapiLens.get = (fun x -> x.description);
     GapiLens.set = (fun v x -> { x with description = v });
   }
+  let id = {
+    GapiLens.get = (fun x -> x.id);
+    GapiLens.set = (fun v x -> { x with id = v });
+  }
+  let conferenceProperties = {
+    GapiLens.get = (fun x -> x.conferenceProperties);
+    GapiLens.set = (fun v x -> { x with conferenceProperties = v });
+  }
   let etag = {
     GapiLens.get = (fun x -> x.etag);
     GapiLens.set = (fun v x -> { x with etag = v });
   }
-  let id = {
-    GapiLens.get = (fun x -> x.id);
-    GapiLens.set = (fun v x -> { x with id = v });
+  let summary = {
+    GapiLens.get = (fun x -> x.summary);
+    GapiLens.set = (fun v x -> { x with summary = v });
   }
   let kind = {
     GapiLens.get = (fun x -> x.kind);
@@ -1633,36 +1670,32 @@ struct
     GapiLens.get = (fun x -> x.location);
     GapiLens.set = (fun v x -> { x with location = v });
   }
-  let summary = {
-    GapiLens.get = (fun x -> x.summary);
-    GapiLens.set = (fun v x -> { x with summary = v });
-  }
   let timeZone = {
     GapiLens.get = (fun x -> x.timeZone);
     GapiLens.set = (fun v x -> { x with timeZone = v });
   }
   
   let empty = {
-    conferenceProperties = ConferenceProperties.empty;
     description = "";
-    etag = "";
     id = "";
+    conferenceProperties = ConferenceProperties.empty;
+    etag = "";
+    summary = "";
     kind = "";
     location = "";
-    summary = "";
     timeZone = "";
     
   }
   
   let rec render_content x = 
      [
-      (fun v -> GapiJson.render_object "conferenceProperties" (ConferenceProperties.render_content v)) x.conferenceProperties;
       GapiJson.render_string_value "description" x.description;
-      GapiJson.render_string_value "etag" x.etag;
       GapiJson.render_string_value "id" x.id;
+      (fun v -> GapiJson.render_object "conferenceProperties" (ConferenceProperties.render_content v)) x.conferenceProperties;
+      GapiJson.render_string_value "etag" x.etag;
+      GapiJson.render_string_value "summary" x.summary;
       GapiJson.render_string_value "kind" x.kind;
       GapiJson.render_string_value "location" x.location;
-      GapiJson.render_string_value "summary" x.summary;
       GapiJson.render_string_value "timeZone" x.timeZone;
       
     ]
@@ -1670,6 +1703,14 @@ struct
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with description = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with id = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "conferenceProperties"; data_type = GapiJson.Object },
         cs) ->
@@ -1678,18 +1719,14 @@ struct
         ConferenceProperties.empty
         (fun v -> { x with conferenceProperties = v })
         cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with description = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with etag = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "summary"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with id = v }
+      { x with summary = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
         `String v) ->
@@ -1698,10 +1735,6 @@ struct
         ({ GapiJson.name = "location"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with location = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "summary"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with summary = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "timeZone"; data_type = GapiJson.Scalar },
         `String v) ->
@@ -1719,26 +1752,26 @@ struct
   
 end
 
-module ConferenceSolutionKey =
+module ConferenceRequestStatus =
 struct
   type t = {
-    _type : string;
+    statusCode : string;
     
   }
   
-  let _type = {
-    GapiLens.get = (fun x -> x._type);
-    GapiLens.set = (fun v x -> { x with _type = v });
+  let statusCode = {
+    GapiLens.get = (fun x -> x.statusCode);
+    GapiLens.set = (fun v x -> { x with statusCode = v });
   }
   
   let empty = {
-    _type = "";
+    statusCode = "";
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_string_value "type" x._type;
+      GapiJson.render_string_value "statusCode" x.statusCode;
       
     ]
   and render x = 
@@ -1746,15 +1779,15 @@ struct
   
   let rec parse x = function
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "type"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "statusCode"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with _type = v }
+      { x with statusCode = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
       GapiJson.parse_children parse empty (fun x -> x) cs
     | e ->
-      GapiJson.unexpected "GapiCalendarV3Model.ConferenceSolutionKey.parse" e x
+      GapiJson.unexpected "GapiCalendarV3Model.ConferenceRequestStatus.parse" e x
   
   let to_data_model = GapiJson.render_root render
   
@@ -1762,26 +1795,26 @@ struct
   
 end
 
-module ConferenceRequestStatus =
+module ConferenceSolutionKey =
 struct
   type t = {
-    statusCode : string;
+    _type : string;
     
   }
   
-  let statusCode = {
-    GapiLens.get = (fun x -> x.statusCode);
-    GapiLens.set = (fun v x -> { x with statusCode = v });
+  let _type = {
+    GapiLens.get = (fun x -> x._type);
+    GapiLens.set = (fun v x -> { x with _type = v });
   }
   
   let empty = {
-    statusCode = "";
+    _type = "";
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_string_value "statusCode" x.statusCode;
+      GapiJson.render_string_value "type" x._type;
       
     ]
   and render x = 
@@ -1789,15 +1822,15 @@ struct
   
   let rec parse x = function
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "statusCode"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "type"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with statusCode = v }
+      { x with _type = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
       GapiJson.parse_children parse empty (fun x -> x) cs
     | e ->
-      GapiJson.unexpected "GapiCalendarV3Model.ConferenceRequestStatus.parse" e x
+      GapiJson.unexpected "GapiCalendarV3Model.ConferenceSolutionKey.parse" e x
   
   let to_data_model = GapiJson.render_root render
   
@@ -1808,37 +1841,37 @@ end
 module CreateConferenceRequest =
 struct
   type t = {
-    conferenceSolutionKey : ConferenceSolutionKey.t;
-    requestId : string;
     status : ConferenceRequestStatus.t;
+    requestId : string;
+    conferenceSolutionKey : ConferenceSolutionKey.t;
     
   }
   
-  let conferenceSolutionKey = {
-    GapiLens.get = (fun x -> x.conferenceSolutionKey);
-    GapiLens.set = (fun v x -> { x with conferenceSolutionKey = v });
+  let status = {
+    GapiLens.get = (fun x -> x.status);
+    GapiLens.set = (fun v x -> { x with status = v });
   }
   let requestId = {
     GapiLens.get = (fun x -> x.requestId);
     GapiLens.set = (fun v x -> { x with requestId = v });
   }
-  let status = {
-    GapiLens.get = (fun x -> x.status);
-    GapiLens.set = (fun v x -> { x with status = v });
+  let conferenceSolutionKey = {
+    GapiLens.get = (fun x -> x.conferenceSolutionKey);
+    GapiLens.set = (fun v x -> { x with conferenceSolutionKey = v });
   }
   
   let empty = {
-    conferenceSolutionKey = ConferenceSolutionKey.empty;
-    requestId = "";
     status = ConferenceRequestStatus.empty;
+    requestId = "";
+    conferenceSolutionKey = ConferenceSolutionKey.empty;
     
   }
   
   let rec render_content x = 
      [
-      (fun v -> GapiJson.render_object "conferenceSolutionKey" (ConferenceSolutionKey.render_content v)) x.conferenceSolutionKey;
-      GapiJson.render_string_value "requestId" x.requestId;
       (fun v -> GapiJson.render_object "status" (ConferenceRequestStatus.render_content v)) x.status;
+      GapiJson.render_string_value "requestId" x.requestId;
+      (fun v -> GapiJson.render_object "conferenceSolutionKey" (ConferenceSolutionKey.render_content v)) x.conferenceSolutionKey;
       
     ]
   and render x = 
@@ -1846,24 +1879,24 @@ struct
   
   let rec parse x = function
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "conferenceSolutionKey"; data_type = GapiJson.Object },
+        ({ GapiJson.name = "status"; data_type = GapiJson.Object },
         cs) ->
       GapiJson.parse_children
-        ConferenceSolutionKey.parse
-        ConferenceSolutionKey.empty
-        (fun v -> { x with conferenceSolutionKey = v })
+        ConferenceRequestStatus.parse
+        ConferenceRequestStatus.empty
+        (fun v -> { x with status = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "requestId"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with requestId = v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "status"; data_type = GapiJson.Object },
+        ({ GapiJson.name = "conferenceSolutionKey"; data_type = GapiJson.Object },
         cs) ->
       GapiJson.parse_children
-        ConferenceRequestStatus.parse
-        ConferenceRequestStatus.empty
-        (fun v -> { x with status = v })
+        ConferenceSolutionKey.parse
+        ConferenceSolutionKey.empty
+        (fun v -> { x with conferenceSolutionKey = v })
         cs
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
@@ -1878,40 +1911,33 @@ struct
   
 end
 
-module ConferenceSolution =
+module TimePeriod =
 struct
   type t = {
-    iconUri : string;
-    key : ConferenceSolutionKey.t;
-    name : string;
+    start : GapiDate.t;
+    _end : GapiDate.t;
     
   }
   
-  let iconUri = {
-    GapiLens.get = (fun x -> x.iconUri);
-    GapiLens.set = (fun v x -> { x with iconUri = v });
-  }
-  let key = {
-    GapiLens.get = (fun x -> x.key);
-    GapiLens.set = (fun v x -> { x with key = v });
+  let start = {
+    GapiLens.get = (fun x -> x.start);
+    GapiLens.set = (fun v x -> { x with start = v });
   }
-  let name = {
-    GapiLens.get = (fun x -> x.name);
-    GapiLens.set = (fun v x -> { x with name = v });
+  let _end = {
+    GapiLens.get = (fun x -> x._end);
+    GapiLens.set = (fun v x -> { x with _end = v });
   }
   
   let empty = {
-    iconUri = "";
-    key = ConferenceSolutionKey.empty;
-    name = "";
+    start = GapiDate.epoch;
+    _end = GapiDate.epoch;
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_string_value "iconUri" x.iconUri;
-      (fun v -> GapiJson.render_object "key" (ConferenceSolutionKey.render_content v)) x.key;
-      GapiJson.render_string_value "name" x.name;
+      GapiJson.render_date_value "start" x.start;
+      GapiJson.render_date_value "end" x._end;
       
     ]
   and render x = 
@@ -1919,75 +1945,13 @@ struct
   
   let rec parse x = function
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "iconUri"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "start"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with iconUri = v }
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "key"; data_type = GapiJson.Object },
-        cs) ->
-      GapiJson.parse_children
-        ConferenceSolutionKey.parse
-        ConferenceSolutionKey.empty
-        (fun v -> { x with key = v })
-        cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "name"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with name = v }
-    | GapiCore.AnnotatedTree.Node
-      ({ GapiJson.name = ""; data_type = GapiJson.Object },
-      cs) ->
-      GapiJson.parse_children parse empty (fun x -> x) cs
-    | e ->
-      GapiJson.unexpected "GapiCalendarV3Model.ConferenceSolution.parse" e x
-  
-  let to_data_model = GapiJson.render_root render
-  
-  let of_data_model = GapiJson.parse_root parse empty
-  
-end
-
-module TimePeriod =
-struct
-  type t = {
-    _end : GapiDate.t;
-    start : GapiDate.t;
-    
-  }
-  
-  let _end = {
-    GapiLens.get = (fun x -> x._end);
-    GapiLens.set = (fun v x -> { x with _end = v });
-  }
-  let start = {
-    GapiLens.get = (fun x -> x.start);
-    GapiLens.set = (fun v x -> { x with start = v });
-  }
-  
-  let empty = {
-    _end = GapiDate.epoch;
-    start = GapiDate.epoch;
-    
-  }
-  
-  let rec render_content x = 
-     [
-      GapiJson.render_date_value "end" x._end;
-      GapiJson.render_date_value "start" x.start;
-      
-    ]
-  and render x = 
-    GapiJson.render_object "" (render_content x)
-  
-  let rec parse x = function
+      { x with start = GapiDate.of_string v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "end"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with _end = GapiDate.of_string v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "start"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with start = GapiDate.of_string v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
@@ -2082,14 +2046,22 @@ end
 module FreeBusyResponse =
 struct
   type t = {
+    timeMin : GapiDate.t;
+    timeMax : GapiDate.t;
     calendars : (string * FreeBusyCalendar.t) list;
     groups : (string * FreeBusyGroup.t) list;
     kind : string;
-    timeMax : GapiDate.t;
-    timeMin : GapiDate.t;
     
   }
   
+  let timeMin = {
+    GapiLens.get = (fun x -> x.timeMin);
+    GapiLens.set = (fun v x -> { x with timeMin = v });
+  }
+  let timeMax = {
+    GapiLens.get = (fun x -> x.timeMax);
+    GapiLens.set = (fun v x -> { x with timeMax = v });
+  }
   let calendars = {
     GapiLens.get = (fun x -> x.calendars);
     GapiLens.set = (fun v x -> { x with calendars = v });
@@ -2102,37 +2074,37 @@ struct
     GapiLens.get = (fun x -> x.kind);
     GapiLens.set = (fun v x -> { x with kind = v });
   }
-  let timeMax = {
-    GapiLens.get = (fun x -> x.timeMax);
-    GapiLens.set = (fun v x -> { x with timeMax = v });
-  }
-  let timeMin = {
-    GapiLens.get = (fun x -> x.timeMin);
-    GapiLens.set = (fun v x -> { x with timeMin = v });
-  }
   
   let empty = {
+    timeMin = GapiDate.epoch;
+    timeMax = GapiDate.epoch;
     calendars = [];
     groups = [];
     kind = "";
-    timeMax = GapiDate.epoch;
-    timeMin = GapiDate.epoch;
     
   }
   
   let rec render_content x = 
      [
+      GapiJson.render_date_value "timeMin" x.timeMin;
+      GapiJson.render_date_value "timeMax" x.timeMax;
       GapiJson.render_collection "calendars" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (FreeBusyCalendar.render_content v)) v) x.calendars;
       GapiJson.render_collection "groups" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (FreeBusyGroup.render_content v)) v) x.groups;
       GapiJson.render_string_value "kind" x.kind;
-      GapiJson.render_date_value "timeMax" x.timeMax;
-      GapiJson.render_date_value "timeMin" x.timeMin;
       
     ]
   and render x = 
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "timeMin"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with timeMin = GapiDate.of_string v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "timeMax"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with timeMax = GapiDate.of_string v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "calendars"; data_type = GapiJson.Object },
         cs) ->
@@ -2173,14 +2145,6 @@ struct
         ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with kind = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "timeMax"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with timeMax = GapiDate.of_string v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "timeMin"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with timeMin = GapiDate.of_string v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
@@ -2194,40 +2158,40 @@ struct
   
 end
 
-module EventDateTime =
+module ConferenceSolution =
 struct
   type t = {
-    date : GapiDate.t;
-    dateTime : GapiDate.t;
-    timeZone : string;
+    iconUri : string;
+    name : string;
+    key : ConferenceSolutionKey.t;
     
   }
   
-  let date = {
-    GapiLens.get = (fun x -> x.date);
-    GapiLens.set = (fun v x -> { x with date = v });
+  let iconUri = {
+    GapiLens.get = (fun x -> x.iconUri);
+    GapiLens.set = (fun v x -> { x with iconUri = v });
   }
-  let dateTime = {
-    GapiLens.get = (fun x -> x.dateTime);
-    GapiLens.set = (fun v x -> { x with dateTime = v });
+  let name = {
+    GapiLens.get = (fun x -> x.name);
+    GapiLens.set = (fun v x -> { x with name = v });
   }
-  let timeZone = {
-    GapiLens.get = (fun x -> x.timeZone);
-    GapiLens.set = (fun v x -> { x with timeZone = v });
+  let key = {
+    GapiLens.get = (fun x -> x.key);
+    GapiLens.set = (fun v x -> { x with key = v });
   }
   
   let empty = {
-    date = GapiDate.epoch;
-    dateTime = GapiDate.epoch;
-    timeZone = "";
+    iconUri = "";
+    name = "";
+    key = ConferenceSolutionKey.empty;
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_date_value "date" x.date;
-      GapiJson.render_date_value "dateTime" x.dateTime;
-      GapiJson.render_string_value "timeZone" x.timeZone;
+      GapiJson.render_string_value "iconUri" x.iconUri;
+      GapiJson.render_string_value "name" x.name;
+      (fun v -> GapiJson.render_object "key" (ConferenceSolutionKey.render_content v)) x.key;
       
     ]
   and render x = 
@@ -2235,23 +2199,27 @@ struct
   
   let rec parse x = function
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "date"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with date = GapiDate.of_string v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "dateTime"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "iconUri"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with dateTime = GapiDate.of_string v }
+      { x with iconUri = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "timeZone"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "name"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with timeZone = v }
+      { x with name = v }
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "key"; data_type = GapiJson.Object },
+        cs) ->
+      GapiJson.parse_children
+        ConferenceSolutionKey.parse
+        ConferenceSolutionKey.empty
+        (fun v -> { x with key = v })
+        cs
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
       GapiJson.parse_children parse empty (fun x -> x) cs
     | e ->
-      GapiJson.unexpected "GapiCalendarV3Model.EventDateTime.parse" e x
+      GapiJson.unexpected "GapiCalendarV3Model.ConferenceSolution.parse" e x
   
   let to_data_model = GapiJson.render_root render
   
@@ -2262,18 +2230,14 @@ end
 module EventAttachment =
 struct
   type t = {
-    fileId : string;
     fileUrl : string;
     iconLink : string;
-    mimeType : string;
+    fileId : string;
     title : string;
+    mimeType : string;
     
   }
   
-  let fileId = {
-    GapiLens.get = (fun x -> x.fileId);
-    GapiLens.set = (fun v x -> { x with fileId = v });
-  }
   let fileUrl = {
     GapiLens.get = (fun x -> x.fileUrl);
     GapiLens.set = (fun v x -> { x with fileUrl = v });
@@ -2282,41 +2246,41 @@ struct
     GapiLens.get = (fun x -> x.iconLink);
     GapiLens.set = (fun v x -> { x with iconLink = v });
   }
-  let mimeType = {
-    GapiLens.get = (fun x -> x.mimeType);
-    GapiLens.set = (fun v x -> { x with mimeType = v });
+  let fileId = {
+    GapiLens.get = (fun x -> x.fileId);
+    GapiLens.set = (fun v x -> { x with fileId = v });
   }
   let title = {
     GapiLens.get = (fun x -> x.title);
     GapiLens.set = (fun v x -> { x with title = v });
   }
+  let mimeType = {
+    GapiLens.get = (fun x -> x.mimeType);
+    GapiLens.set = (fun v x -> { x with mimeType = v });
+  }
   
   let empty = {
-    fileId = "";
     fileUrl = "";
     iconLink = "";
-    mimeType = "";
+    fileId = "";
     title = "";
+    mimeType = "";
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_string_value "fileId" x.fileId;
       GapiJson.render_string_value "fileUrl" x.fileUrl;
       GapiJson.render_string_value "iconLink" x.iconLink;
-      GapiJson.render_string_value "mimeType" x.mimeType;
+      GapiJson.render_string_value "fileId" x.fileId;
       GapiJson.render_string_value "title" x.title;
+      GapiJson.render_string_value "mimeType" x.mimeType;
       
     ]
   and render x = 
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "fileId"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with fileId = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "fileUrl"; data_type = GapiJson.Scalar },
         `String v) ->
@@ -2326,13 +2290,17 @@ struct
         `String v) ->
       { x with iconLink = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "mimeType"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "fileId"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with mimeType = v }
+      { x with fileId = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "title"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with title = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "mimeType"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with mimeType = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
@@ -2349,28 +2317,16 @@ end
 module ConferenceData =
 struct
   type t = {
-    conferenceId : string;
-    conferenceSolution : ConferenceSolution.t;
-    createRequest : CreateConferenceRequest.t;
     entryPoints : EntryPoint.t list;
     notes : string;
-    parameters : ConferenceParameters.t;
     signature : string;
+    conferenceId : string;
+    parameters : ConferenceParameters.t;
+    conferenceSolution : ConferenceSolution.t;
+    createRequest : CreateConferenceRequest.t;
     
   }
   
-  let conferenceId = {
-    GapiLens.get = (fun x -> x.conferenceId);
-    GapiLens.set = (fun v x -> { x with conferenceId = v });
-  }
-  let conferenceSolution = {
-    GapiLens.get = (fun x -> x.conferenceSolution);
-    GapiLens.set = (fun v x -> { x with conferenceSolution = v });
-  }
-  let createRequest = {
-    GapiLens.get = (fun x -> x.createRequest);
-    GapiLens.set = (fun v x -> { x with createRequest = v });
-  }
   let entryPoints = {
     GapiLens.get = (fun x -> x.entryPoints);
     GapiLens.set = (fun v x -> { x with entryPoints = v });
@@ -2379,61 +2335,53 @@ struct
     GapiLens.get = (fun x -> x.notes);
     GapiLens.set = (fun v x -> { x with notes = v });
   }
+  let signature = {
+    GapiLens.get = (fun x -> x.signature);
+    GapiLens.set = (fun v x -> { x with signature = v });
+  }
+  let conferenceId = {
+    GapiLens.get = (fun x -> x.conferenceId);
+    GapiLens.set = (fun v x -> { x with conferenceId = v });
+  }
   let parameters = {
     GapiLens.get = (fun x -> x.parameters);
     GapiLens.set = (fun v x -> { x with parameters = v });
   }
-  let signature = {
-    GapiLens.get = (fun x -> x.signature);
-    GapiLens.set = (fun v x -> { x with signature = v });
+  let conferenceSolution = {
+    GapiLens.get = (fun x -> x.conferenceSolution);
+    GapiLens.set = (fun v x -> { x with conferenceSolution = v });
+  }
+  let createRequest = {
+    GapiLens.get = (fun x -> x.createRequest);
+    GapiLens.set = (fun v x -> { x with createRequest = v });
   }
   
   let empty = {
-    conferenceId = "";
-    conferenceSolution = ConferenceSolution.empty;
-    createRequest = CreateConferenceRequest.empty;
     entryPoints = [];
     notes = "";
-    parameters = ConferenceParameters.empty;
     signature = "";
+    conferenceId = "";
+    parameters = ConferenceParameters.empty;
+    conferenceSolution = ConferenceSolution.empty;
+    createRequest = CreateConferenceRequest.empty;
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_string_value "conferenceId" x.conferenceId;
-      (fun v -> GapiJson.render_object "conferenceSolution" (ConferenceSolution.render_content v)) x.conferenceSolution;
-      (fun v -> GapiJson.render_object "createRequest" (CreateConferenceRequest.render_content v)) x.createRequest;
       GapiJson.render_array "entryPoints" EntryPoint.render x.entryPoints;
       GapiJson.render_string_value "notes" x.notes;
-      (fun v -> GapiJson.render_object "parameters" (ConferenceParameters.render_content v)) x.parameters;
       GapiJson.render_string_value "signature" x.signature;
-      
-    ]
+      GapiJson.render_string_value "conferenceId" x.conferenceId;
+      (fun v -> GapiJson.render_object "parameters" (ConferenceParameters.render_content v)) x.parameters;
+      (fun v -> GapiJson.render_object "conferenceSolution" (ConferenceSolution.render_content v)) x.conferenceSolution;
+      (fun v -> GapiJson.render_object "createRequest" (CreateConferenceRequest.render_content v)) x.createRequest;
+      
+    ]
   and render x = 
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "conferenceId"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with conferenceId = v }
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "conferenceSolution"; data_type = GapiJson.Object },
-        cs) ->
-      GapiJson.parse_children
-        ConferenceSolution.parse
-        ConferenceSolution.empty
-        (fun v -> { x with conferenceSolution = v })
-        cs
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "createRequest"; data_type = GapiJson.Object },
-        cs) ->
-      GapiJson.parse_children
-        CreateConferenceRequest.parse
-        CreateConferenceRequest.empty
-        (fun v -> { x with createRequest = v })
-        cs
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "entryPoints"; data_type = GapiJson.Array },
         cs) ->
@@ -2456,6 +2404,14 @@ struct
         ({ GapiJson.name = "notes"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with notes = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "signature"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with signature = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "conferenceId"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with conferenceId = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "parameters"; data_type = GapiJson.Object },
         cs) ->
@@ -2464,16 +2420,93 @@ struct
         ConferenceParameters.empty
         (fun v -> { x with parameters = v })
         cs
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "conferenceSolution"; data_type = GapiJson.Object },
+        cs) ->
+      GapiJson.parse_children
+        ConferenceSolution.parse
+        ConferenceSolution.empty
+        (fun v -> { x with conferenceSolution = v })
+        cs
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "createRequest"; data_type = GapiJson.Object },
+        cs) ->
+      GapiJson.parse_children
+        CreateConferenceRequest.parse
+        CreateConferenceRequest.empty
+        (fun v -> { x with createRequest = v })
+        cs
+    | GapiCore.AnnotatedTree.Node
+      ({ GapiJson.name = ""; data_type = GapiJson.Object },
+      cs) ->
+      GapiJson.parse_children parse empty (fun x -> x) cs
+    | e ->
+      GapiJson.unexpected "GapiCalendarV3Model.ConferenceData.parse" e x
+  
+  let to_data_model = GapiJson.render_root render
+  
+  let of_data_model = GapiJson.parse_root parse empty
+  
+end
+
+module EventDateTime =
+struct
+  type t = {
+    timeZone : string;
+    date : GapiDate.t;
+    dateTime : GapiDate.t;
+    
+  }
+  
+  let timeZone = {
+    GapiLens.get = (fun x -> x.timeZone);
+    GapiLens.set = (fun v x -> { x with timeZone = v });
+  }
+  let date = {
+    GapiLens.get = (fun x -> x.date);
+    GapiLens.set = (fun v x -> { x with date = v });
+  }
+  let dateTime = {
+    GapiLens.get = (fun x -> x.dateTime);
+    GapiLens.set = (fun v x -> { x with dateTime = v });
+  }
+  
+  let empty = {
+    timeZone = "";
+    date = GapiDate.epoch;
+    dateTime = GapiDate.epoch;
+    
+  }
+  
+  let rec render_content x = 
+     [
+      GapiJson.render_string_value "timeZone" x.timeZone;
+      GapiJson.render_date_value "date" x.date;
+      GapiJson.render_date_value "dateTime" x.dateTime;
+      
+    ]
+  and render x = 
+    GapiJson.render_object "" (render_content x)
+  
+  let rec parse x = function
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "signature"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "timeZone"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with signature = v }
+      { x with timeZone = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "date"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with date = GapiDate.of_string v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "dateTime"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with dateTime = GapiDate.of_string v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
       GapiJson.parse_children parse empty (fun x -> x) cs
     | e ->
-      GapiJson.unexpected "GapiCalendarV3Model.ConferenceData.parse" e x
+      GapiJson.unexpected "GapiCalendarV3Model.EventDateTime.parse" e x
   
   let to_data_model = GapiJson.render_root render
   
@@ -2483,33 +2516,47 @@ end
 
 module Event =
 struct
-  module Source =
+  module Creator =
   struct
     type t = {
-      title : string;
-      url : string;
+      id : string;
+      email : string;
+      displayName : string;
+      self : bool;
       
     }
     
-    let title = {
-      GapiLens.get = (fun x -> x.title);
-      GapiLens.set = (fun v x -> { x with title = v });
+    let id = {
+      GapiLens.get = (fun x -> x.id);
+      GapiLens.set = (fun v x -> { x with id = v });
     }
-    let url = {
-      GapiLens.get = (fun x -> x.url);
-      GapiLens.set = (fun v x -> { x with url = v });
+    let email = {
+      GapiLens.get = (fun x -> x.email);
+      GapiLens.set = (fun v x -> { x with email = v });
+    }
+    let displayName = {
+      GapiLens.get = (fun x -> x.displayName);
+      GapiLens.set = (fun v x -> { x with displayName = v });
+    }
+    let self = {
+      GapiLens.get = (fun x -> x.self);
+      GapiLens.set = (fun v x -> { x with self = v });
     }
     
     let empty = {
-      title = "";
-      url = "";
+      id = "";
+      email = "";
+      displayName = "";
+      self = false;
       
     }
     
     let rec render_content x = 
        [
-        GapiJson.render_string_value "title" x.title;
-        GapiJson.render_string_value "url" x.url;
+        GapiJson.render_string_value "id" x.id;
+        GapiJson.render_string_value "email" x.email;
+        GapiJson.render_string_value "displayName" x.displayName;
+        GapiJson.render_bool_value "self" x.self;
         
       ]
     and render x = 
@@ -2517,99 +2564,93 @@ struct
     
     let rec parse x = function
       | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "title"; data_type = GapiJson.Scalar },
+          ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
           `String v) ->
-        { x with title = v }
+        { x with id = v }
       | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "url"; data_type = GapiJson.Scalar },
+          ({ GapiJson.name = "email"; data_type = GapiJson.Scalar },
           `String v) ->
-        { x with url = v }
+        { x with email = v }
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "displayName"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with displayName = v }
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "self"; data_type = GapiJson.Scalar },
+          `Bool v) ->
+        { x with self = v }
       | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = ""; data_type = GapiJson.Object },
         cs) ->
         GapiJson.parse_children parse empty (fun x -> x) cs
       | e ->
-        GapiJson.unexpected "GapiCalendarV3Model.Source.parse" e x
+        GapiJson.unexpected "GapiCalendarV3Model.Creator.parse" e x
     
   end
   
-  module Reminders =
+  module Source =
   struct
     type t = {
-      overrides : EventReminder.t list;
-      useDefault : bool;
+      title : string;
+      url : string;
       
     }
     
-    let overrides = {
-      GapiLens.get = (fun x -> x.overrides);
-      GapiLens.set = (fun v x -> { x with overrides = v });
+    let title = {
+      GapiLens.get = (fun x -> x.title);
+      GapiLens.set = (fun v x -> { x with title = v });
     }
-    let useDefault = {
-      GapiLens.get = (fun x -> x.useDefault);
-      GapiLens.set = (fun v x -> { x with useDefault = v });
+    let url = {
+      GapiLens.get = (fun x -> x.url);
+      GapiLens.set = (fun v x -> { x with url = v });
     }
     
     let empty = {
-      overrides = [];
-      useDefault = false;
+      title = "";
+      url = "";
       
     }
     
     let rec render_content x = 
        [
-        GapiJson.render_array "overrides" EventReminder.render x.overrides;
-        GapiJson.render_bool_value "useDefault" x.useDefault;
+        GapiJson.render_string_value "title" x.title;
+        GapiJson.render_string_value "url" x.url;
         
       ]
     and render x = 
       GapiJson.render_object "" (render_content x)
     
     let rec parse x = function
-      | GapiCore.AnnotatedTree.Node
-          ({ GapiJson.name = "overrides"; data_type = GapiJson.Array },
-          cs) ->
-        GapiJson.parse_collection
-          (fun x' -> function
-            | GapiCore.AnnotatedTree.Node
-                ({ GapiJson.name = ""; data_type = GapiJson.Object },
-                cs) ->
-              GapiJson.parse_children
-                EventReminder.parse
-                EventReminder.empty
-                (fun v -> v)
-                cs
-            | e ->
-              GapiJson.unexpected "GapiCalendarV3Model.Reminders.parse.parse_collection" e x')
-          EventReminder.empty
-          (fun v -> { x with overrides = v })
-          cs
       | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "useDefault"; data_type = GapiJson.Scalar },
-          `Bool v) ->
-        { x with useDefault = v }
+          ({ GapiJson.name = "title"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with title = v }
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "url"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with url = v }
       | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = ""; data_type = GapiJson.Object },
         cs) ->
         GapiJson.parse_children parse empty (fun x -> x) cs
       | e ->
-        GapiJson.unexpected "GapiCalendarV3Model.Reminders.parse" e x
+        GapiJson.unexpected "GapiCalendarV3Model.Source.parse" e x
     
   end
   
   module Organizer =
   struct
     type t = {
-      displayName : string;
+      self : bool;
       email : string;
       id : string;
-      self : bool;
+      displayName : string;
       
     }
     
-    let displayName = {
-      GapiLens.get = (fun x -> x.displayName);
-      GapiLens.set = (fun v x -> { x with displayName = v });
+    let self = {
+      GapiLens.get = (fun x -> x.self);
+      GapiLens.set = (fun v x -> { x with self = v });
     }
     let email = {
       GapiLens.get = (fun x -> x.email);
@@ -2619,25 +2660,25 @@ struct
       GapiLens.get = (fun x -> x.id);
       GapiLens.set = (fun v x -> { x with id = v });
     }
-    let self = {
-      GapiLens.get = (fun x -> x.self);
-      GapiLens.set = (fun v x -> { x with self = v });
+    let displayName = {
+      GapiLens.get = (fun x -> x.displayName);
+      GapiLens.set = (fun v x -> { x with displayName = v });
     }
     
     let empty = {
-      displayName = "";
+      self = false;
       email = "";
       id = "";
-      self = false;
+      displayName = "";
       
     }
     
     let rec render_content x = 
        [
-        GapiJson.render_string_value "displayName" x.displayName;
+        GapiJson.render_bool_value "self" x.self;
         GapiJson.render_string_value "email" x.email;
         GapiJson.render_string_value "id" x.id;
-        GapiJson.render_bool_value "self" x.self;
+        GapiJson.render_string_value "displayName" x.displayName;
         
       ]
     and render x = 
@@ -2645,9 +2686,9 @@ struct
     
     let rec parse x = function
       | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "displayName"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with displayName = v }
+          ({ GapiJson.name = "self"; data_type = GapiJson.Scalar },
+          `Bool v) ->
+        { x with self = v }
       | GapiCore.AnnotatedTree.Leaf
           ({ GapiJson.name = "email"; data_type = GapiJson.Scalar },
           `String v) ->
@@ -2657,9 +2698,9 @@ struct
           `String v) ->
         { x with id = v }
       | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "self"; data_type = GapiJson.Scalar },
-          `Bool v) ->
-        { x with self = v }
+          ({ GapiJson.name = "displayName"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with displayName = v }
       | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = ""; data_type = GapiJson.Object },
         cs) ->
@@ -2672,72 +2713,72 @@ struct
   module Gadget =
   struct
     type t = {
-      display : string;
-      height : int;
-      iconLink : string;
-      link : string;
-      preferences : (string * string) list;
+      width : int;
       title : string;
+      preferences : (string * string) list;
+      height : int;
       _type : string;
-      width : int;
+      display : string;
+      link : string;
+      iconLink : string;
       
     }
     
-    let display = {
-      GapiLens.get = (fun x -> x.display);
-      GapiLens.set = (fun v x -> { x with display = v });
-    }
-    let height = {
-      GapiLens.get = (fun x -> x.height);
-      GapiLens.set = (fun v x -> { x with height = v });
-    }
-    let iconLink = {
-      GapiLens.get = (fun x -> x.iconLink);
-      GapiLens.set = (fun v x -> { x with iconLink = v });
+    let width = {
+      GapiLens.get = (fun x -> x.width);
+      GapiLens.set = (fun v x -> { x with width = v });
     }
-    let link = {
-      GapiLens.get = (fun x -> x.link);
-      GapiLens.set = (fun v x -> { x with link = v });
+    let title = {
+      GapiLens.get = (fun x -> x.title);
+      GapiLens.set = (fun v x -> { x with title = v });
     }
     let preferences = {
       GapiLens.get = (fun x -> x.preferences);
       GapiLens.set = (fun v x -> { x with preferences = v });
     }
-    let title = {
-      GapiLens.get = (fun x -> x.title);
-      GapiLens.set = (fun v x -> { x with title = v });
+    let height = {
+      GapiLens.get = (fun x -> x.height);
+      GapiLens.set = (fun v x -> { x with height = v });
     }
     let _type = {
       GapiLens.get = (fun x -> x._type);
       GapiLens.set = (fun v x -> { x with _type = v });
     }
-    let width = {
-      GapiLens.get = (fun x -> x.width);
-      GapiLens.set = (fun v x -> { x with width = v });
+    let display = {
+      GapiLens.get = (fun x -> x.display);
+      GapiLens.set = (fun v x -> { x with display = v });
+    }
+    let link = {
+      GapiLens.get = (fun x -> x.link);
+      GapiLens.set = (fun v x -> { x with link = v });
+    }
+    let iconLink = {
+      GapiLens.get = (fun x -> x.iconLink);
+      GapiLens.set = (fun v x -> { x with iconLink = v });
     }
     
     let empty = {
-      display = "";
-      height = 0;
-      iconLink = "";
-      link = "";
-      preferences = [];
+      width = 0;
       title = "";
+      preferences = [];
+      height = 0;
       _type = "";
-      width = 0;
+      display = "";
+      link = "";
+      iconLink = "";
       
     }
     
     let rec render_content x = 
        [
-        GapiJson.render_string_value "display" x.display;
-        GapiJson.render_int_value "height" x.height;
-        GapiJson.render_string_value "iconLink" x.iconLink;
-        GapiJson.render_string_value "link" x.link;
-        GapiJson.render_collection "preferences" GapiJson.Object (fun (id, v) -> GapiJson.render_nullable_string_value id v) x.preferences;
+        GapiJson.render_int_value "width" x.width;
         GapiJson.render_string_value "title" x.title;
+        GapiJson.render_collection "preferences" GapiJson.Object (fun (id, v) -> GapiJson.render_nullable_string_value id v) x.preferences;
+        GapiJson.render_int_value "height" x.height;
         GapiJson.render_string_value "type" x._type;
-        GapiJson.render_int_value "width" x.width;
+        GapiJson.render_string_value "display" x.display;
+        GapiJson.render_string_value "link" x.link;
+        GapiJson.render_string_value "iconLink" x.iconLink;
         
       ]
     and render x = 
@@ -2745,21 +2786,13 @@ struct
     
     let rec parse x = function
       | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "display"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with display = v }
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "height"; data_type = GapiJson.Scalar },
+          ({ GapiJson.name = "width"; data_type = GapiJson.Scalar },
           `Int v) ->
-        { x with height = v }
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "iconLink"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with iconLink = v }
+        { x with width = v }
       | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "link"; data_type = GapiJson.Scalar },
+          ({ GapiJson.name = "title"; data_type = GapiJson.Scalar },
           `String v) ->
-        { x with link = v }
+        { x with title = v }
       | GapiCore.AnnotatedTree.Node
           ({ GapiJson.name = "preferences"; data_type = GapiJson.Object },
           cs) ->
@@ -2775,17 +2808,25 @@ struct
           (fun v -> { x with preferences = v })
           cs
       | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "title"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with title = v }
+          ({ GapiJson.name = "height"; data_type = GapiJson.Scalar },
+          `Int v) ->
+        { x with height = v }
       | GapiCore.AnnotatedTree.Leaf
           ({ GapiJson.name = "type"; data_type = GapiJson.Scalar },
           `String v) ->
         { x with _type = v }
       | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "width"; data_type = GapiJson.Scalar },
-          `Int v) ->
-        { x with width = v }
+          ({ GapiJson.name = "display"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with display = v }
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "link"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with link = v }
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "iconLink"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with iconLink = v }
       | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = ""; data_type = GapiJson.Object },
         cs) ->
@@ -2795,6 +2836,70 @@ struct
     
   end
   
+  module Reminders =
+  struct
+    type t = {
+      overrides : EventReminder.t list;
+      useDefault : bool;
+      
+    }
+    
+    let overrides = {
+      GapiLens.get = (fun x -> x.overrides);
+      GapiLens.set = (fun v x -> { x with overrides = v });
+    }
+    let useDefault = {
+      GapiLens.get = (fun x -> x.useDefault);
+      GapiLens.set = (fun v x -> { x with useDefault = v });
+    }
+    
+    let empty = {
+      overrides = [];
+      useDefault = false;
+      
+    }
+    
+    let rec render_content x = 
+       [
+        GapiJson.render_array "overrides" EventReminder.render x.overrides;
+        GapiJson.render_bool_value "useDefault" x.useDefault;
+        
+      ]
+    and render x = 
+      GapiJson.render_object "" (render_content x)
+    
+    let rec parse x = function
+      | GapiCore.AnnotatedTree.Node
+          ({ GapiJson.name = "overrides"; data_type = GapiJson.Array },
+          cs) ->
+        GapiJson.parse_collection
+          (fun x' -> function
+            | GapiCore.AnnotatedTree.Node
+                ({ GapiJson.name = ""; data_type = GapiJson.Object },
+                cs) ->
+              GapiJson.parse_children
+                EventReminder.parse
+                EventReminder.empty
+                (fun v -> v)
+                cs
+            | e ->
+              GapiJson.unexpected "GapiCalendarV3Model.Reminders.parse.parse_collection" e x')
+          EventReminder.empty
+          (fun v -> { x with overrides = v })
+          cs
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "useDefault"; data_type = GapiJson.Scalar },
+          `Bool v) ->
+        { x with useDefault = v }
+      | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = ""; data_type = GapiJson.Object },
+        cs) ->
+        GapiJson.parse_children parse empty (fun x -> x) cs
+      | e ->
+        GapiJson.unexpected "GapiCalendarV3Model.Reminders.parse" e x
+    
+  end
+  
   module ExtendedProperties =
   struct
     type t = {
@@ -2865,180 +2970,133 @@ struct
     
   end
   
-  module Creator =
-  struct
-    type t = {
-      displayName : string;
-      email : string;
-      id : string;
-      self : bool;
-      
-    }
-    
-    let displayName = {
-      GapiLens.get = (fun x -> x.displayName);
-      GapiLens.set = (fun v x -> { x with displayName = v });
-    }
-    let email = {
-      GapiLens.get = (fun x -> x.email);
-      GapiLens.set = (fun v x -> { x with email = v });
-    }
-    let id = {
-      GapiLens.get = (fun x -> x.id);
-      GapiLens.set = (fun v x -> { x with id = v });
-    }
-    let self = {
-      GapiLens.get = (fun x -> x.self);
-      GapiLens.set = (fun v x -> { x with self = v });
-    }
-    
-    let empty = {
-      displayName = "";
-      email = "";
-      id = "";
-      self = false;
-      
-    }
-    
-    let rec render_content x = 
-       [
-        GapiJson.render_string_value "displayName" x.displayName;
-        GapiJson.render_string_value "email" x.email;
-        GapiJson.render_string_value "id" x.id;
-        GapiJson.render_bool_value "self" x.self;
-        
-      ]
-    and render x = 
-      GapiJson.render_object "" (render_content x)
-    
-    let rec parse x = function
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "displayName"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with displayName = v }
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "email"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with email = v }
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with id = v }
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "self"; data_type = GapiJson.Scalar },
-          `Bool v) ->
-        { x with self = v }
-      | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = ""; data_type = GapiJson.Object },
-        cs) ->
-        GapiJson.parse_children parse empty (fun x -> x) cs
-      | e ->
-        GapiJson.unexpected "GapiCalendarV3Model.Creator.parse" e x
-    
-  end
-  
-  type t = {
-    anyoneCanAddSelf : bool;
-    attachments : EventAttachment.t list;
-    attendees : EventAttendee.t list;
-    attendeesOmitted : bool;
-    colorId : string;
-    conferenceData : ConferenceData.t;
-    created : GapiDate.t;
-    creator : Creator.t;
-    description : string;
-    _end : EventDateTime.t;
-    endTimeUnspecified : bool;
-    etag : string;
-    extendedProperties : ExtendedProperties.t;
-    gadget : Gadget.t;
-    guestsCanInviteOthers : bool;
-    guestsCanModify : bool;
-    guestsCanSeeOtherGuests : bool;
-    hangoutLink : string;
-    htmlLink : string;
-    iCalUID : string;
-    id : string;
-    kind : string;
-    location : string;
-    locked : bool;
-    organizer : Organizer.t;
-    originalStartTime : EventDateTime.t;
-    privateCopy : bool;
-    recurrence : string list;
-    recurringEventId : string;
-    reminders : Reminders.t;
-    sequence : int;
-    source : Source.t;
-    start : EventDateTime.t;
-    status : string;
-    summary : string;
-    transparency : string;
-    updated : GapiDate.t;
-    visibility : string;
+  type t = {
+    description : string;
+    privateCopy : bool;
+    anyoneCanAddSelf : bool;
+    location : string;
+    hangoutLink : string;
+    eventType : string;
+    extendedProperties : ExtendedProperties.t;
+    transparency : string;
+    recurrence : string list;
+    reminders : Reminders.t;
+    htmlLink : string;
+    updated : GapiDate.t;
+    originalStartTime : EventDateTime.t;
+    guestsCanInviteOthers : bool;
+    sequence : int;
+    etag : string;
+    attendeesOmitted : bool;
+    iCalUID : string;
+    conferenceData : ConferenceData.t;
+    colorId : string;
+    gadget : Gadget.t;
+    guestsCanModify : bool;
+    guestsCanSeeOtherGuests : bool;
+    locked : bool;
+    status : string;
+    organizer : Organizer.t;
+    id : string;
+    kind : string;
+    visibility : string;
+    attendees : EventAttendee.t list;
+    recurringEventId : string;
+    source : Source.t;
+    created : GapiDate.t;
+    creator : Creator.t;
+    summary : string;
+    attachments : EventAttachment.t list;
+    endTimeUnspecified : bool;
+    start : EventDateTime.t;
+    _end : EventDateTime.t;
     
   }
   
+  let description = {
+    GapiLens.get = (fun x -> x.description);
+    GapiLens.set = (fun v x -> { x with description = v });
+  }
+  let privateCopy = {
+    GapiLens.get = (fun x -> x.privateCopy);
+    GapiLens.set = (fun v x -> { x with privateCopy = v });
+  }
   let anyoneCanAddSelf = {
     GapiLens.get = (fun x -> x.anyoneCanAddSelf);
     GapiLens.set = (fun v x -> { x with anyoneCanAddSelf = v });
   }
-  let attachments = {
-    GapiLens.get = (fun x -> x.attachments);
-    GapiLens.set = (fun v x -> { x with attachments = v });
+  let location = {
+    GapiLens.get = (fun x -> x.location);
+    GapiLens.set = (fun v x -> { x with location = v });
   }
-  let attendees = {
-    GapiLens.get = (fun x -> x.attendees);
-    GapiLens.set = (fun v x -> { x with attendees = v });
+  let hangoutLink = {
+    GapiLens.get = (fun x -> x.hangoutLink);
+    GapiLens.set = (fun v x -> { x with hangoutLink = v });
   }
-  let attendeesOmitted = {
-    GapiLens.get = (fun x -> x.attendeesOmitted);
-    GapiLens.set = (fun v x -> { x with attendeesOmitted = v });
+  let eventType = {
+    GapiLens.get = (fun x -> x.eventType);
+    GapiLens.set = (fun v x -> { x with eventType = v });
   }
-  let colorId = {
-    GapiLens.get = (fun x -> x.colorId);
-    GapiLens.set = (fun v x -> { x with colorId = v });
+  let extendedProperties = {
+    GapiLens.get = (fun x -> x.extendedProperties);
+    GapiLens.set = (fun v x -> { x with extendedProperties = v });
   }
-  let conferenceData = {
-    GapiLens.get = (fun x -> x.conferenceData);
-    GapiLens.set = (fun v x -> { x with conferenceData = v });
+  let transparency = {
+    GapiLens.get = (fun x -> x.transparency);
+    GapiLens.set = (fun v x -> { x with transparency = v });
   }
-  let created = {
-    GapiLens.get = (fun x -> x.created);
-    GapiLens.set = (fun v x -> { x with created = v });
+  let recurrence = {
+    GapiLens.get = (fun x -> x.recurrence);
+    GapiLens.set = (fun v x -> { x with recurrence = v });
   }
-  let creator = {
-    GapiLens.get = (fun x -> x.creator);
-    GapiLens.set = (fun v x -> { x with creator = v });
+  let reminders = {
+    GapiLens.get = (fun x -> x.reminders);
+    GapiLens.set = (fun v x -> { x with reminders = v });
   }
-  let description = {
-    GapiLens.get = (fun x -> x.description);
-    GapiLens.set = (fun v x -> { x with description = v });
+  let htmlLink = {
+    GapiLens.get = (fun x -> x.htmlLink);
+    GapiLens.set = (fun v x -> { x with htmlLink = v });
   }
-  let _end = {
-    GapiLens.get = (fun x -> x._end);
-    GapiLens.set = (fun v x -> { x with _end = v });
+  let updated = {
+    GapiLens.get = (fun x -> x.updated);
+    GapiLens.set = (fun v x -> { x with updated = v });
   }
-  let endTimeUnspecified = {
-    GapiLens.get = (fun x -> x.endTimeUnspecified);
-    GapiLens.set = (fun v x -> { x with endTimeUnspecified = v });
+  let originalStartTime = {
+    GapiLens.get = (fun x -> x.originalStartTime);
+    GapiLens.set = (fun v x -> { x with originalStartTime = v });
+  }
+  let guestsCanInviteOthers = {
+    GapiLens.get = (fun x -> x.guestsCanInviteOthers);
+    GapiLens.set = (fun v x -> { x with guestsCanInviteOthers = v });
+  }
+  let sequence = {
+    GapiLens.get = (fun x -> x.sequence);
+    GapiLens.set = (fun v x -> { x with sequence = v });
   }
   let etag = {
     GapiLens.get = (fun x -> x.etag);
     GapiLens.set = (fun v x -> { x with etag = v });
   }
-  let extendedProperties = {
-    GapiLens.get = (fun x -> x.extendedProperties);
-    GapiLens.set = (fun v x -> { x with extendedProperties = v });
+  let attendeesOmitted = {
+    GapiLens.get = (fun x -> x.attendeesOmitted);
+    GapiLens.set = (fun v x -> { x with attendeesOmitted = v });
+  }
+  let iCalUID = {
+    GapiLens.get = (fun x -> x.iCalUID);
+    GapiLens.set = (fun v x -> { x with iCalUID = v });
+  }
+  let conferenceData = {
+    GapiLens.get = (fun x -> x.conferenceData);
+    GapiLens.set = (fun v x -> { x with conferenceData = v });
+  }
+  let colorId = {
+    GapiLens.get = (fun x -> x.colorId);
+    GapiLens.set = (fun v x -> { x with colorId = v });
   }
   let gadget = {
     GapiLens.get = (fun x -> x.gadget);
     GapiLens.set = (fun v x -> { x with gadget = v });
   }
-  let guestsCanInviteOthers = {
-    GapiLens.get = (fun x -> x.guestsCanInviteOthers);
-    GapiLens.set = (fun v x -> { x with guestsCanInviteOthers = v });
-  }
   let guestsCanModify = {
     GapiLens.get = (fun x -> x.guestsCanModify);
     GapiLens.set = (fun v x -> { x with guestsCanModify = v });
@@ -3047,17 +3105,17 @@ struct
     GapiLens.get = (fun x -> x.guestsCanSeeOtherGuests);
     GapiLens.set = (fun v x -> { x with guestsCanSeeOtherGuests = v });
   }
-  let hangoutLink = {
-    GapiLens.get = (fun x -> x.hangoutLink);
-    GapiLens.set = (fun v x -> { x with hangoutLink = v });
+  let locked = {
+    GapiLens.get = (fun x -> x.locked);
+    GapiLens.set = (fun v x -> { x with locked = v });
   }
-  let htmlLink = {
-    GapiLens.get = (fun x -> x.htmlLink);
-    GapiLens.set = (fun v x -> { x with htmlLink = v });
+  let status = {
+    GapiLens.get = (fun x -> x.status);
+    GapiLens.set = (fun v x -> { x with status = v });
   }
-  let iCalUID = {
-    GapiLens.get = (fun x -> x.iCalUID);
-    GapiLens.set = (fun v x -> { x with iCalUID = v });
+  let organizer = {
+    GapiLens.get = (fun x -> x.organizer);
+    GapiLens.set = (fun v x -> { x with organizer = v });
   }
   let id = {
     GapiLens.get = (fun x -> x.id);
@@ -3067,255 +3125,247 @@ struct
     GapiLens.get = (fun x -> x.kind);
     GapiLens.set = (fun v x -> { x with kind = v });
   }
-  let location = {
-    GapiLens.get = (fun x -> x.location);
-    GapiLens.set = (fun v x -> { x with location = v });
-  }
-  let locked = {
-    GapiLens.get = (fun x -> x.locked);
-    GapiLens.set = (fun v x -> { x with locked = v });
-  }
-  let organizer = {
-    GapiLens.get = (fun x -> x.organizer);
-    GapiLens.set = (fun v x -> { x with organizer = v });
-  }
-  let originalStartTime = {
-    GapiLens.get = (fun x -> x.originalStartTime);
-    GapiLens.set = (fun v x -> { x with originalStartTime = v });
-  }
-  let privateCopy = {
-    GapiLens.get = (fun x -> x.privateCopy);
-    GapiLens.set = (fun v x -> { x with privateCopy = v });
+  let visibility = {
+    GapiLens.get = (fun x -> x.visibility);
+    GapiLens.set = (fun v x -> { x with visibility = v });
   }
-  let recurrence = {
-    GapiLens.get = (fun x -> x.recurrence);
-    GapiLens.set = (fun v x -> { x with recurrence = v });
+  let attendees = {
+    GapiLens.get = (fun x -> x.attendees);
+    GapiLens.set = (fun v x -> { x with attendees = v });
   }
   let recurringEventId = {
     GapiLens.get = (fun x -> x.recurringEventId);
     GapiLens.set = (fun v x -> { x with recurringEventId = v });
   }
-  let reminders = {
-    GapiLens.get = (fun x -> x.reminders);
-    GapiLens.set = (fun v x -> { x with reminders = v });
-  }
-  let sequence = {
-    GapiLens.get = (fun x -> x.sequence);
-    GapiLens.set = (fun v x -> { x with sequence = v });
-  }
   let source = {
     GapiLens.get = (fun x -> x.source);
     GapiLens.set = (fun v x -> { x with source = v });
   }
-  let start = {
-    GapiLens.get = (fun x -> x.start);
-    GapiLens.set = (fun v x -> { x with start = v });
+  let created = {
+    GapiLens.get = (fun x -> x.created);
+    GapiLens.set = (fun v x -> { x with created = v });
   }
-  let status = {
-    GapiLens.get = (fun x -> x.status);
-    GapiLens.set = (fun v x -> { x with status = v });
+  let creator = {
+    GapiLens.get = (fun x -> x.creator);
+    GapiLens.set = (fun v x -> { x with creator = v });
   }
   let summary = {
     GapiLens.get = (fun x -> x.summary);
     GapiLens.set = (fun v x -> { x with summary = v });
   }
-  let transparency = {
-    GapiLens.get = (fun x -> x.transparency);
-    GapiLens.set = (fun v x -> { x with transparency = v });
+  let attachments = {
+    GapiLens.get = (fun x -> x.attachments);
+    GapiLens.set = (fun v x -> { x with attachments = v });
   }
-  let updated = {
-    GapiLens.get = (fun x -> x.updated);
-    GapiLens.set = (fun v x -> { x with updated = v });
+  let endTimeUnspecified = {
+    GapiLens.get = (fun x -> x.endTimeUnspecified);
+    GapiLens.set = (fun v x -> { x with endTimeUnspecified = v });
   }
-  let visibility = {
-    GapiLens.get = (fun x -> x.visibility);
-    GapiLens.set = (fun v x -> { x with visibility = v });
+  let start = {
+    GapiLens.get = (fun x -> x.start);
+    GapiLens.set = (fun v x -> { x with start = v });
+  }
+  let _end = {
+    GapiLens.get = (fun x -> x._end);
+    GapiLens.set = (fun v x -> { x with _end = v });
   }
   
   let empty = {
+    description = "";
+    privateCopy = false;
     anyoneCanAddSelf = false;
-    attachments = [];
-    attendees = [];
+    location = "";
+    hangoutLink = "";
+    eventType = "";
+    extendedProperties = ExtendedProperties.empty;
+    transparency = "";
+    recurrence = [];
+    reminders = Reminders.empty;
+    htmlLink = "";
+    updated = GapiDate.epoch;
+    originalStartTime = EventDateTime.empty;
+    guestsCanInviteOthers = false;
+    sequence = 0;
+    etag = "";
     attendeesOmitted = false;
-    colorId = "";
+    iCalUID = "";
     conferenceData = ConferenceData.empty;
-    created = GapiDate.epoch;
-    creator = Creator.empty;
-    description = "";
-    _end = EventDateTime.empty;
-    endTimeUnspecified = false;
-    etag = "";
-    extendedProperties = ExtendedProperties.empty;
+    colorId = "";
     gadget = Gadget.empty;
-    guestsCanInviteOthers = false;
     guestsCanModify = false;
     guestsCanSeeOtherGuests = false;
-    hangoutLink = "";
-    htmlLink = "";
-    iCalUID = "";
-    id = "";
-    kind = "";
-    location = "";
     locked = false;
+    status = "";
     organizer = Organizer.empty;
-    originalStartTime = EventDateTime.empty;
-    privateCopy = false;
-    recurrence = [];
+    id = "";
+    kind = "";
+    visibility = "";
+    attendees = [];
     recurringEventId = "";
-    reminders = Reminders.empty;
-    sequence = 0;
     source = Source.empty;
-    start = EventDateTime.empty;
-    status = "";
+    created = GapiDate.epoch;
+    creator = Creator.empty;
     summary = "";
-    transparency = "";
-    updated = GapiDate.epoch;
-    visibility = "";
+    attachments = [];
+    endTimeUnspecified = false;
+    start = EventDateTime.empty;
+    _end = EventDateTime.empty;
     
   }
   
   let rec render_content x = 
      [
+      GapiJson.render_string_value "description" x.description;
+      GapiJson.render_bool_value "privateCopy" x.privateCopy;
       GapiJson.render_bool_value "anyoneCanAddSelf" x.anyoneCanAddSelf;
-      GapiJson.render_array "attachments" EventAttachment.render x.attachments;
-      GapiJson.render_array "attendees" EventAttendee.render x.attendees;
+      GapiJson.render_string_value "location" x.location;
+      GapiJson.render_string_value "hangoutLink" x.hangoutLink;
+      GapiJson.render_string_value "eventType" x.eventType;
+      (fun v -> GapiJson.render_object "extendedProperties" (ExtendedProperties.render_content v)) x.extendedProperties;
+      GapiJson.render_string_value "transparency" x.transparency;
+      GapiJson.render_array "recurrence" (GapiJson.render_string_value "") x.recurrence;
+      (fun v -> GapiJson.render_object "reminders" (Reminders.render_content v)) x.reminders;
+      GapiJson.render_string_value "htmlLink" x.htmlLink;
+      GapiJson.render_date_value "updated" x.updated;
+      (fun v -> GapiJson.render_object "originalStartTime" (EventDateTime.render_content v)) x.originalStartTime;
+      GapiJson.render_bool_value "guestsCanInviteOthers" x.guestsCanInviteOthers;
+      GapiJson.render_int_value "sequence" x.sequence;
+      GapiJson.render_string_value "etag" x.etag;
       GapiJson.render_bool_value "attendeesOmitted" x.attendeesOmitted;
-      GapiJson.render_string_value "colorId" x.colorId;
+      GapiJson.render_string_value "iCalUID" x.iCalUID;
       (fun v -> GapiJson.render_object "conferenceData" (ConferenceData.render_content v)) x.conferenceData;
-      GapiJson.render_date_value "created" x.created;
-      (fun v -> GapiJson.render_object "creator" (Creator.render_content v)) x.creator;
-      GapiJson.render_string_value "description" x.description;
-      (fun v -> GapiJson.render_object "end" (EventDateTime.render_content v)) x._end;
-      GapiJson.render_bool_value "endTimeUnspecified" x.endTimeUnspecified;
-      GapiJson.render_string_value "etag" x.etag;
-      (fun v -> GapiJson.render_object "extendedProperties" (ExtendedProperties.render_content v)) x.extendedProperties;
+      GapiJson.render_string_value "colorId" x.colorId;
       (fun v -> GapiJson.render_object "gadget" (Gadget.render_content v)) x.gadget;
-      GapiJson.render_bool_value "guestsCanInviteOthers" x.guestsCanInviteOthers;
       GapiJson.render_bool_value "guestsCanModify" x.guestsCanModify;
       GapiJson.render_bool_value "guestsCanSeeOtherGuests" x.guestsCanSeeOtherGuests;
-      GapiJson.render_string_value "hangoutLink" x.hangoutLink;
-      GapiJson.render_string_value "htmlLink" x.htmlLink;
-      GapiJson.render_string_value "iCalUID" x.iCalUID;
-      GapiJson.render_string_value "id" x.id;
-      GapiJson.render_string_value "kind" x.kind;
-      GapiJson.render_string_value "location" x.location;
       GapiJson.render_bool_value "locked" x.locked;
+      GapiJson.render_string_value "status" x.status;
       (fun v -> GapiJson.render_object "organizer" (Organizer.render_content v)) x.organizer;
-      (fun v -> GapiJson.render_object "originalStartTime" (EventDateTime.render_content v)) x.originalStartTime;
-      GapiJson.render_bool_value "privateCopy" x.privateCopy;
-      GapiJson.render_array "recurrence" (GapiJson.render_string_value "") x.recurrence;
+      GapiJson.render_string_value "id" x.id;
+      GapiJson.render_string_value "kind" x.kind;
+      GapiJson.render_string_value "visibility" x.visibility;
+      GapiJson.render_array "attendees" EventAttendee.render x.attendees;
       GapiJson.render_string_value "recurringEventId" x.recurringEventId;
-      (fun v -> GapiJson.render_object "reminders" (Reminders.render_content v)) x.reminders;
-      GapiJson.render_int_value "sequence" x.sequence;
       (fun v -> GapiJson.render_object "source" (Source.render_content v)) x.source;
-      (fun v -> GapiJson.render_object "start" (EventDateTime.render_content v)) x.start;
-      GapiJson.render_string_value "status" x.status;
+      GapiJson.render_date_value "created" x.created;
+      (fun v -> GapiJson.render_object "creator" (Creator.render_content v)) x.creator;
       GapiJson.render_string_value "summary" x.summary;
-      GapiJson.render_string_value "transparency" x.transparency;
-      GapiJson.render_date_value "updated" x.updated;
-      GapiJson.render_string_value "visibility" x.visibility;
+      GapiJson.render_array "attachments" EventAttachment.render x.attachments;
+      GapiJson.render_bool_value "endTimeUnspecified" x.endTimeUnspecified;
+      (fun v -> GapiJson.render_object "start" (EventDateTime.render_content v)) x.start;
+      (fun v -> GapiJson.render_object "end" (EventDateTime.render_content v)) x._end;
       
     ]
   and render x = 
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with description = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "privateCopy"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with privateCopy = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "anyoneCanAddSelf"; data_type = GapiJson.Scalar },
         `Bool v) ->
       { x with anyoneCanAddSelf = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "location"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with location = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "hangoutLink"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with hangoutLink = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "eventType"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with eventType = v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "attachments"; data_type = GapiJson.Array },
+        ({ GapiJson.name = "extendedProperties"; data_type = GapiJson.Object },
         cs) ->
-      GapiJson.parse_collection
-        (fun x' -> function
-          | GapiCore.AnnotatedTree.Node
-              ({ GapiJson.name = ""; data_type = GapiJson.Object },
-              cs) ->
-            GapiJson.parse_children
-              EventAttachment.parse
-              EventAttachment.empty
-              (fun v -> v)
-              cs
-          | e ->
-            GapiJson.unexpected "GapiCalendarV3Model.Event.parse.parse_collection" e x')
-        EventAttachment.empty
-        (fun v -> { x with attachments = v })
+      GapiJson.parse_children
+        ExtendedProperties.parse
+        ExtendedProperties.empty
+        (fun v -> { x with extendedProperties = v })
         cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "transparency"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with transparency = v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "attendees"; data_type = GapiJson.Array },
+        ({ GapiJson.name = "recurrence"; data_type = GapiJson.Array },
         cs) ->
       GapiJson.parse_collection
         (fun x' -> function
-          | GapiCore.AnnotatedTree.Node
-              ({ GapiJson.name = ""; data_type = GapiJson.Object },
-              cs) ->
-            GapiJson.parse_children
-              EventAttendee.parse
-              EventAttendee.empty
-              (fun v -> v)
-              cs
+          | GapiCore.AnnotatedTree.Leaf
+              ({ GapiJson.name = ""; data_type = GapiJson.Scalar },
+              `String v) ->
+            v
           | e ->
             GapiJson.unexpected "GapiCalendarV3Model.Event.parse.parse_collection" e x')
-        EventAttendee.empty
-        (fun v -> { x with attendees = v })
+        ""
+        (fun v -> { x with recurrence = v })
         cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "attendeesOmitted"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with attendeesOmitted = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "colorId"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with colorId = v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "conferenceData"; data_type = GapiJson.Object },
+        ({ GapiJson.name = "reminders"; data_type = GapiJson.Object },
         cs) ->
       GapiJson.parse_children
-        ConferenceData.parse
-        ConferenceData.empty
-        (fun v -> { x with conferenceData = v })
+        Reminders.parse
+        Reminders.empty
+        (fun v -> { x with reminders = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "created"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "htmlLink"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with created = GapiDate.of_string v }
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "creator"; data_type = GapiJson.Object },
-        cs) ->
-      GapiJson.parse_children
-        Creator.parse
-        Creator.empty
-        (fun v -> { x with creator = v })
-        cs
+      { x with htmlLink = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "updated"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with description = v }
+      { x with updated = GapiDate.of_string v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "end"; data_type = GapiJson.Object },
+        ({ GapiJson.name = "originalStartTime"; data_type = GapiJson.Object },
         cs) ->
       GapiJson.parse_children
         EventDateTime.parse
         EventDateTime.empty
-        (fun v -> { x with _end = v })
+        (fun v -> { x with originalStartTime = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "endTimeUnspecified"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "guestsCanInviteOthers"; data_type = GapiJson.Scalar },
         `Bool v) ->
-      { x with endTimeUnspecified = v }
+      { x with guestsCanInviteOthers = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "sequence"; data_type = GapiJson.Scalar },
+        `Int v) ->
+      { x with sequence = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with etag = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "attendeesOmitted"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with attendeesOmitted = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "iCalUID"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with iCalUID = v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "extendedProperties"; data_type = GapiJson.Object },
+        ({ GapiJson.name = "conferenceData"; data_type = GapiJson.Object },
         cs) ->
       GapiJson.parse_children
-        ExtendedProperties.parse
-        ExtendedProperties.empty
-        (fun v -> { x with extendedProperties = v })
+        ConferenceData.parse
+        ConferenceData.empty
+        (fun v -> { x with conferenceData = v })
         cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "colorId"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with colorId = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "gadget"; data_type = GapiJson.Object },
         cs) ->
@@ -3324,10 +3374,6 @@ struct
         Gadget.empty
         (fun v -> { x with gadget = v })
         cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "guestsCanInviteOthers"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with guestsCanInviteOthers = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "guestsCanModify"; data_type = GapiJson.Scalar },
         `Bool v) ->
@@ -3336,34 +3382,14 @@ struct
         ({ GapiJson.name = "guestsCanSeeOtherGuests"; data_type = GapiJson.Scalar },
         `Bool v) ->
       { x with guestsCanSeeOtherGuests = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "hangoutLink"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with hangoutLink = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "htmlLink"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with htmlLink = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "iCalUID"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with iCalUID = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with id = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with kind = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "location"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with location = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "locked"; data_type = GapiJson.Scalar },
         `Bool v) ->
       { x with locked = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "status"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with status = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "organizer"; data_type = GapiJson.Object },
         cs) ->
@@ -3372,48 +3398,40 @@ struct
         Organizer.empty
         (fun v -> { x with organizer = v })
         cs
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "originalStartTime"; data_type = GapiJson.Object },
-        cs) ->
-      GapiJson.parse_children
-        EventDateTime.parse
-        EventDateTime.empty
-        (fun v -> { x with originalStartTime = v })
-        cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "privateCopy"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with privateCopy = v }
+        ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with id = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with kind = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "visibility"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with visibility = v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "recurrence"; data_type = GapiJson.Array },
+        ({ GapiJson.name = "attendees"; data_type = GapiJson.Array },
         cs) ->
       GapiJson.parse_collection
         (fun x' -> function
-          | GapiCore.AnnotatedTree.Leaf
-              ({ GapiJson.name = ""; data_type = GapiJson.Scalar },
-              `String v) ->
-            v
+          | GapiCore.AnnotatedTree.Node
+              ({ GapiJson.name = ""; data_type = GapiJson.Object },
+              cs) ->
+            GapiJson.parse_children
+              EventAttendee.parse
+              EventAttendee.empty
+              (fun v -> v)
+              cs
           | e ->
             GapiJson.unexpected "GapiCalendarV3Model.Event.parse.parse_collection" e x')
-        ""
-        (fun v -> { x with recurrence = v })
+        EventAttendee.empty
+        (fun v -> { x with attendees = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "recurringEventId"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with recurringEventId = v }
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "reminders"; data_type = GapiJson.Object },
-        cs) ->
-      GapiJson.parse_children
-        Reminders.parse
-        Reminders.empty
-        (fun v -> { x with reminders = v })
-        cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "sequence"; data_type = GapiJson.Scalar },
-        `Int v) ->
-      { x with sequence = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "source"; data_type = GapiJson.Object },
         cs) ->
@@ -3422,34 +3440,60 @@ struct
         Source.empty
         (fun v -> { x with source = v })
         cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "created"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with created = GapiDate.of_string v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "start"; data_type = GapiJson.Object },
+        ({ GapiJson.name = "creator"; data_type = GapiJson.Object },
         cs) ->
       GapiJson.parse_children
-        EventDateTime.parse
-        EventDateTime.empty
-        (fun v -> { x with start = v })
+        Creator.parse
+        Creator.empty
+        (fun v -> { x with creator = v })
         cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "status"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with status = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "summary"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with summary = v }
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "attachments"; data_type = GapiJson.Array },
+        cs) ->
+      GapiJson.parse_collection
+        (fun x' -> function
+          | GapiCore.AnnotatedTree.Node
+              ({ GapiJson.name = ""; data_type = GapiJson.Object },
+              cs) ->
+            GapiJson.parse_children
+              EventAttachment.parse
+              EventAttachment.empty
+              (fun v -> v)
+              cs
+          | e ->
+            GapiJson.unexpected "GapiCalendarV3Model.Event.parse.parse_collection" e x')
+        EventAttachment.empty
+        (fun v -> { x with attachments = v })
+        cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "transparency"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with transparency = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "updated"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with updated = GapiDate.of_string v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "visibility"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with visibility = v }
+        ({ GapiJson.name = "endTimeUnspecified"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with endTimeUnspecified = v }
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "start"; data_type = GapiJson.Object },
+        cs) ->
+      GapiJson.parse_children
+        EventDateTime.parse
+        EventDateTime.empty
+        (fun v -> { x with start = v })
+        cs
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "end"; data_type = GapiJson.Object },
+        cs) ->
+      GapiJson.parse_children
+        EventDateTime.parse
+        EventDateTime.empty
+        (fun v -> { x with _end = v })
+        cs
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
@@ -3466,26 +3510,22 @@ end
 module Acl =
 struct
   type t = {
-    etag : string;
-    items : AclRule.t list;
     kind : string;
+    items : AclRule.t list;
     nextPageToken : string;
     nextSyncToken : string;
+    etag : string;
     
   }
   
-  let etag = {
-    GapiLens.get = (fun x -> x.etag);
-    GapiLens.set = (fun v x -> { x with etag = v });
+  let kind = {
+    GapiLens.get = (fun x -> x.kind);
+    GapiLens.set = (fun v x -> { x with kind = v });
   }
   let items = {
     GapiLens.get = (fun x -> x.items);
     GapiLens.set = (fun v x -> { x with items = v });
   }
-  let kind = {
-    GapiLens.get = (fun x -> x.kind);
-    GapiLens.set = (fun v x -> { x with kind = v });
-  }
   let nextPageToken = {
     GapiLens.get = (fun x -> x.nextPageToken);
     GapiLens.set = (fun v x -> { x with nextPageToken = v });
@@ -3494,23 +3534,27 @@ struct
     GapiLens.get = (fun x -> x.nextSyncToken);
     GapiLens.set = (fun v x -> { x with nextSyncToken = v });
   }
+  let etag = {
+    GapiLens.get = (fun x -> x.etag);
+    GapiLens.set = (fun v x -> { x with etag = v });
+  }
   
   let empty = {
-    etag = "";
-    items = [];
     kind = "";
+    items = [];
     nextPageToken = "";
     nextSyncToken = "";
+    etag = "";
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_string_value "etag" x.etag;
-      GapiJson.render_array "items" AclRule.render x.items;
       GapiJson.render_string_value "kind" x.kind;
+      GapiJson.render_array "items" AclRule.render x.items;
       GapiJson.render_string_value "nextPageToken" x.nextPageToken;
       GapiJson.render_string_value "nextSyncToken" x.nextSyncToken;
+      GapiJson.render_string_value "etag" x.etag;
       
     ]
   and render x = 
@@ -3518,9 +3562,9 @@ struct
   
   let rec parse x = function
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with etag = v }
+      { x with kind = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "items"; data_type = GapiJson.Array },
         cs) ->
@@ -3539,10 +3583,6 @@ struct
         AclRule.empty
         (fun v -> { x with items = v })
         cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with kind = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "nextPageToken"; data_type = GapiJson.Scalar },
         `String v) ->
@@ -3551,6 +3591,10 @@ struct
         ({ GapiJson.name = "nextSyncToken"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with nextSyncToken = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with etag = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
@@ -3567,93 +3611,93 @@ end
 module Events =
 struct
   type t = {
-    accessRole : string;
+    timeZone : string;
     defaultReminders : EventReminder.t list;
-    description : string;
-    etag : string;
-    items : Event.t list;
+    summary : string;
     kind : string;
-    nextPageToken : string;
+    items : Event.t list;
+    description : string;
     nextSyncToken : string;
-    summary : string;
-    timeZone : string;
+    nextPageToken : string;
     updated : GapiDate.t;
+    etag : string;
+    accessRole : string;
     
   }
   
-  let accessRole = {
-    GapiLens.get = (fun x -> x.accessRole);
-    GapiLens.set = (fun v x -> { x with accessRole = v });
+  let timeZone = {
+    GapiLens.get = (fun x -> x.timeZone);
+    GapiLens.set = (fun v x -> { x with timeZone = v });
   }
   let defaultReminders = {
     GapiLens.get = (fun x -> x.defaultReminders);
     GapiLens.set = (fun v x -> { x with defaultReminders = v });
   }
-  let description = {
-    GapiLens.get = (fun x -> x.description);
-    GapiLens.set = (fun v x -> { x with description = v });
+  let summary = {
+    GapiLens.get = (fun x -> x.summary);
+    GapiLens.set = (fun v x -> { x with summary = v });
   }
-  let etag = {
-    GapiLens.get = (fun x -> x.etag);
-    GapiLens.set = (fun v x -> { x with etag = v });
+  let kind = {
+    GapiLens.get = (fun x -> x.kind);
+    GapiLens.set = (fun v x -> { x with kind = v });
   }
   let items = {
     GapiLens.get = (fun x -> x.items);
     GapiLens.set = (fun v x -> { x with items = v });
   }
-  let kind = {
-    GapiLens.get = (fun x -> x.kind);
-    GapiLens.set = (fun v x -> { x with kind = v });
-  }
-  let nextPageToken = {
-    GapiLens.get = (fun x -> x.nextPageToken);
-    GapiLens.set = (fun v x -> { x with nextPageToken = v });
+  let description = {
+    GapiLens.get = (fun x -> x.description);
+    GapiLens.set = (fun v x -> { x with description = v });
   }
   let nextSyncToken = {
     GapiLens.get = (fun x -> x.nextSyncToken);
     GapiLens.set = (fun v x -> { x with nextSyncToken = v });
   }
-  let summary = {
-    GapiLens.get = (fun x -> x.summary);
-    GapiLens.set = (fun v x -> { x with summary = v });
-  }
-  let timeZone = {
-    GapiLens.get = (fun x -> x.timeZone);
-    GapiLens.set = (fun v x -> { x with timeZone = v });
+  let nextPageToken = {
+    GapiLens.get = (fun x -> x.nextPageToken);
+    GapiLens.set = (fun v x -> { x with nextPageToken = v });
   }
   let updated = {
     GapiLens.get = (fun x -> x.updated);
     GapiLens.set = (fun v x -> { x with updated = v });
   }
+  let etag = {
+    GapiLens.get = (fun x -> x.etag);
+    GapiLens.set = (fun v x -> { x with etag = v });
+  }
+  let accessRole = {
+    GapiLens.get = (fun x -> x.accessRole);
+    GapiLens.set = (fun v x -> { x with accessRole = v });
+  }
   
   let empty = {
-    accessRole = "";
+    timeZone = "";
     defaultReminders = [];
-    description = "";
-    etag = "";
-    items = [];
+    summary = "";
     kind = "";
-    nextPageToken = "";
+    items = [];
+    description = "";
     nextSyncToken = "";
-    summary = "";
-    timeZone = "";
+    nextPageToken = "";
     updated = GapiDate.epoch;
+    etag = "";
+    accessRole = "";
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_string_value "accessRole" x.accessRole;
+      GapiJson.render_string_value "timeZone" x.timeZone;
       GapiJson.render_array "defaultReminders" EventReminder.render x.defaultReminders;
-      GapiJson.render_string_value "description" x.description;
-      GapiJson.render_string_value "etag" x.etag;
-      GapiJson.render_array "items" Event.render x.items;
+      GapiJson.render_string_value "summary" x.summary;
       GapiJson.render_string_value "kind" x.kind;
-      GapiJson.render_string_value "nextPageToken" x.nextPageToken;
+      GapiJson.render_array "items" Event.render x.items;
+      GapiJson.render_string_value "description" x.description;
       GapiJson.render_string_value "nextSyncToken" x.nextSyncToken;
-      GapiJson.render_string_value "summary" x.summary;
-      GapiJson.render_string_value "timeZone" x.timeZone;
+      GapiJson.render_string_value "nextPageToken" x.nextPageToken;
       GapiJson.render_date_value "updated" x.updated;
+      GapiJson.render_string_value "etag" x.etag;
+      GapiJson.render_string_value "accessRole" x.accessRole;
       
     ]
   and render x = 
@@ -3661,9 +3705,9 @@ struct
   
   let rec parse x = function
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "accessRole"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "timeZone"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with accessRole = v }
+      { x with timeZone = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "defaultReminders"; data_type = GapiJson.Array },
         cs) ->
@@ -3683,13 +3727,13 @@ struct
         (fun v -> { x with defaultReminders = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "summary"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with description = v }
+      { x with summary = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with etag = v }
+      { x with kind = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "items"; data_type = GapiJson.Array },
         cs) ->
@@ -3705,29 +3749,29 @@ struct
         (fun v -> { x with items = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with kind = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "nextPageToken"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with nextPageToken = v }
+      { x with description = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "nextSyncToken"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with nextSyncToken = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "summary"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with summary = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "timeZone"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "nextPageToken"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with timeZone = v }
+      { x with nextPageToken = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "updated"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with updated = GapiDate.of_string v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with etag = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "accessRole"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with accessRole = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
@@ -3744,31 +3788,47 @@ end
 module Channel =
 struct
   type t = {
-    address : string;
-    expiration : int64;
-    id : string;
-    kind : string;
-    params : (string * string) list;
-    payload : bool;
     resourceId : string;
-    resourceUri : string;
     token : string;
+    payload : bool;
     _type : string;
+    id : string;
+    resourceUri : string;
+    expiration : int64;
+    kind : string;
+    params : (string * string) list;
+    address : string;
     
   }
   
-  let address = {
-    GapiLens.get = (fun x -> x.address);
-    GapiLens.set = (fun v x -> { x with address = v });
+  let resourceId = {
+    GapiLens.get = (fun x -> x.resourceId);
+    GapiLens.set = (fun v x -> { x with resourceId = v });
   }
-  let expiration = {
-    GapiLens.get = (fun x -> x.expiration);
-    GapiLens.set = (fun v x -> { x with expiration = v });
+  let token = {
+    GapiLens.get = (fun x -> x.token);
+    GapiLens.set = (fun v x -> { x with token = v });
+  }
+  let payload = {
+    GapiLens.get = (fun x -> x.payload);
+    GapiLens.set = (fun v x -> { x with payload = v });
+  }
+  let _type = {
+    GapiLens.get = (fun x -> x._type);
+    GapiLens.set = (fun v x -> { x with _type = v });
   }
   let id = {
     GapiLens.get = (fun x -> x.id);
     GapiLens.set = (fun v x -> { x with id = v });
   }
+  let resourceUri = {
+    GapiLens.get = (fun x -> x.resourceUri);
+    GapiLens.set = (fun v x -> { x with resourceUri = v });
+  }
+  let expiration = {
+    GapiLens.get = (fun x -> x.expiration);
+    GapiLens.set = (fun v x -> { x with expiration = v });
+  }
   let kind = {
     GapiLens.get = (fun x -> x.kind);
     GapiLens.set = (fun v x -> { x with kind = v });
@@ -3777,53 +3837,37 @@ struct
     GapiLens.get = (fun x -> x.params);
     GapiLens.set = (fun v x -> { x with params = v });
   }
-  let payload = {
-    GapiLens.get = (fun x -> x.payload);
-    GapiLens.set = (fun v x -> { x with payload = v });
-  }
-  let resourceId = {
-    GapiLens.get = (fun x -> x.resourceId);
-    GapiLens.set = (fun v x -> { x with resourceId = v });
-  }
-  let resourceUri = {
-    GapiLens.get = (fun x -> x.resourceUri);
-    GapiLens.set = (fun v x -> { x with resourceUri = v });
-  }
-  let token = {
-    GapiLens.get = (fun x -> x.token);
-    GapiLens.set = (fun v x -> { x with token = v });
-  }
-  let _type = {
-    GapiLens.get = (fun x -> x._type);
-    GapiLens.set = (fun v x -> { x with _type = v });
+  let address = {
+    GapiLens.get = (fun x -> x.address);
+    GapiLens.set = (fun v x -> { x with address = v });
   }
   
   let empty = {
-    address = "";
-    expiration = 0L;
-    id = "";
-    kind = "";
-    params = [];
-    payload = false;
     resourceId = "";
-    resourceUri = "";
     token = "";
+    payload = false;
     _type = "";
+    id = "";
+    resourceUri = "";
+    expiration = 0L;
+    kind = "";
+    params = [];
+    address = "";
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_string_value "address" x.address;
-      GapiJson.render_int64_value "expiration" x.expiration;
-      GapiJson.render_string_value "id" x.id;
-      GapiJson.render_string_value "kind" x.kind;
-      GapiJson.render_collection "params" GapiJson.Object (fun (id, v) -> GapiJson.render_nullable_string_value id v) x.params;
-      GapiJson.render_bool_value "payload" x.payload;
       GapiJson.render_string_value "resourceId" x.resourceId;
-      GapiJson.render_string_value "resourceUri" x.resourceUri;
       GapiJson.render_string_value "token" x.token;
+      GapiJson.render_bool_value "payload" x.payload;
       GapiJson.render_string_value "type" x._type;
+      GapiJson.render_string_value "id" x.id;
+      GapiJson.render_string_value "resourceUri" x.resourceUri;
+      GapiJson.render_int64_value "expiration" x.expiration;
+      GapiJson.render_string_value "kind" x.kind;
+      GapiJson.render_collection "params" GapiJson.Object (fun (id, v) -> GapiJson.render_nullable_string_value id v) x.params;
+      GapiJson.render_string_value "address" x.address;
       
     ]
   and render x = 
@@ -3831,17 +3875,33 @@ struct
   
   let rec parse x = function
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "address"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "resourceId"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with address = v }
+      { x with resourceId = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "expiration"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "token"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with expiration = Int64.of_string v }
+      { x with token = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "payload"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with payload = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "type"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with _type = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with id = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "resourceUri"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with resourceUri = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "expiration"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with expiration = Int64.of_string v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
         `String v) ->
@@ -3861,25 +3921,9 @@ struct
         (fun v -> { x with params = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "payload"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with payload = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "resourceId"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with resourceId = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "resourceUri"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with resourceUri = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "token"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with token = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "type"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "address"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with _type = v }
+      { x with address = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
@@ -3896,50 +3940,54 @@ end
 module Colors =
 struct
   type t = {
+    updated : GapiDate.t;
     calendar : (string * ColorDefinition.t) list;
-    event : (string * ColorDefinition.t) list;
     kind : string;
-    updated : GapiDate.t;
+    event : (string * ColorDefinition.t) list;
     
   }
   
+  let updated = {
+    GapiLens.get = (fun x -> x.updated);
+    GapiLens.set = (fun v x -> { x with updated = v });
+  }
   let calendar = {
     GapiLens.get = (fun x -> x.calendar);
     GapiLens.set = (fun v x -> { x with calendar = v });
   }
-  let event = {
-    GapiLens.get = (fun x -> x.event);
-    GapiLens.set = (fun v x -> { x with event = v });
-  }
   let kind = {
     GapiLens.get = (fun x -> x.kind);
     GapiLens.set = (fun v x -> { x with kind = v });
   }
-  let updated = {
-    GapiLens.get = (fun x -> x.updated);
-    GapiLens.set = (fun v x -> { x with updated = v });
+  let event = {
+    GapiLens.get = (fun x -> x.event);
+    GapiLens.set = (fun v x -> { x with event = v });
   }
   
   let empty = {
+    updated = GapiDate.epoch;
     calendar = [];
-    event = [];
     kind = "";
-    updated = GapiDate.epoch;
+    event = [];
     
   }
   
   let rec render_content x = 
      [
+      GapiJson.render_date_value "updated" x.updated;
       GapiJson.render_collection "calendar" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (ColorDefinition.render_content v)) v) x.calendar;
-      GapiJson.render_collection "event" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (ColorDefinition.render_content v)) v) x.event;
       GapiJson.render_string_value "kind" x.kind;
-      GapiJson.render_date_value "updated" x.updated;
+      GapiJson.render_collection "event" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (ColorDefinition.render_content v)) v) x.event;
       
     ]
   and render x = 
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "updated"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with updated = GapiDate.of_string v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "calendar"; data_type = GapiJson.Object },
         cs) ->
@@ -3958,6 +4006,10 @@ struct
         ("", ColorDefinition.empty)
         (fun v -> { x with calendar = v })
         cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with kind = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "event"; data_type = GapiJson.Object },
         cs) ->
@@ -3976,14 +4028,6 @@ struct
         ("", ColorDefinition.empty)
         (fun v -> { x with event = v })
         cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with kind = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "updated"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with updated = GapiDate.of_string v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
diff --git a/src/gapi/gapiCalendarV3Model.mli b/src/gapi/gapiCalendarV3Model.mli
index 0b76fd73..418f9767 100644
--- a/src/gapi/gapiCalendarV3Model.mli
+++ b/src/gapi/gapiCalendarV3Model.mli
@@ -1,4 +1,5 @@
-(* Warning! This file is generated. Modify at your own risk. *)
+(* Warning! This file is generated. Modify at your own risk.
+        *)
 
 (** Data definition for Calendar API (v3).
   
@@ -6,14 +7,23 @@
   {{:https://developers.google.com/google-apps/calendar/firstapp}API Documentation}.
   *)
 
-module FreeBusyRequestItem :
+module Setting :
 sig
   type t = {
+    etag : string;
+    (** ETag of the resource. *)
+    value : string;
+    (** Value of the user setting. The format of the value depends on the ID of the setting. It must always be a UTF-8 string of length up to 1024 characters. *)
+    kind : string;
+    (** Type of the resource ("calendar#setting"). *)
     id : string;
-    (** The identifier of a calendar or a group. *)
+    (** The id of the user setting. *)
     
   }
   
+  val etag : (t, string) GapiLens.t
+  val value : (t, string) GapiLens.t
+  val kind : (t, string) GapiLens.t
   val id : (t, string) GapiLens.t
   
   val empty : t
@@ -28,30 +38,27 @@ sig
   
 end
 
-module FreeBusyRequest :
+module Settings :
 sig
   type t = {
-    calendarExpansionMax : int;
-    (** Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50. *)
-    groupExpansionMax : int;
-    (** Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100. *)
-    items : FreeBusyRequestItem.t list;
-    (** List of calendars and/or groups to query. *)
-    timeMax : GapiDate.t;
-    (** The end of the interval for the query formatted as per RFC3339. *)
-    timeMin : GapiDate.t;
-    (** The start of the interval for the query formatted as per RFC3339. *)
-    timeZone : string;
-    (** Time zone used in the response. Optional. The default is UTC. *)
+    etag : string;
+    (** Etag of the collection. *)
+    nextPageToken : string;
+    (** Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided. *)
+    items : Setting.t list;
+    (** List of user settings. *)
+    nextSyncToken : string;
+    (** Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided. *)
+    kind : string;
+    (** Type of the collection ("calendar#settings"). *)
     
   }
   
-  val calendarExpansionMax : (t, int) GapiLens.t
-  val groupExpansionMax : (t, int) GapiLens.t
-  val items : (t, FreeBusyRequestItem.t list) GapiLens.t
-  val timeMax : (t, GapiDate.t) GapiLens.t
-  val timeMin : (t, GapiDate.t) GapiLens.t
-  val timeZone : (t, string) GapiLens.t
+  val etag : (t, string) GapiLens.t
+  val nextPageToken : (t, string) GapiLens.t
+  val items : (t, Setting.t list) GapiLens.t
+  val nextSyncToken : (t, string) GapiLens.t
+  val kind : (t, string) GapiLens.t
   
   val empty : t
   
@@ -65,24 +72,15 @@ sig
   
 end
 
-module Setting :
+module FreeBusyRequestItem :
 sig
   type t = {
-    etag : string;
-    (** ETag of the resource. *)
     id : string;
-    (** The id of the user setting. *)
-    kind : string;
-    (** Type of the resource ("calendar#setting"). *)
-    value : string;
-    (** Value of the user setting. The format of the value depends on the ID of the setting. It must always be a UTF-8 string of length up to 1024 characters. *)
+    (** The identifier of a calendar or a group. *)
     
   }
   
-  val etag : (t, string) GapiLens.t
   val id : (t, string) GapiLens.t
-  val kind : (t, string) GapiLens.t
-  val value : (t, string) GapiLens.t
   
   val empty : t
   
@@ -96,27 +94,30 @@ sig
   
 end
 
-module Settings :
+module FreeBusyRequest :
 sig
   type t = {
-    etag : string;
-    (** Etag of the collection. *)
-    items : Setting.t list;
-    (** List of user settings. *)
-    kind : string;
-    (** Type of the collection ("calendar#settings"). *)
-    nextPageToken : string;
-    (** Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided. *)
-    nextSyncToken : string;
-    (** Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided. *)
+    timeMax : GapiDate.t;
+    (** The end of the interval for the query formatted as per RFC3339. *)
+    timeZone : string;
+    (** Time zone used in the response. Optional. The default is UTC. *)
+    calendarExpansionMax : int;
+    (** Maximal number of calendars for which FreeBusy information is to be provided. Optional. Maximum value is 50. *)
+    timeMin : GapiDate.t;
+    (** The start of the interval for the query formatted as per RFC3339. *)
+    groupExpansionMax : int;
+    (** Maximal number of calendar identifiers to be provided for a single group. Optional. An error is returned for a group with more members than this value. Maximum value is 100. *)
+    items : FreeBusyRequestItem.t list;
+    (** List of calendars and/or groups to query. *)
     
   }
   
-  val etag : (t, string) GapiLens.t
-  val items : (t, Setting.t list) GapiLens.t
-  val kind : (t, string) GapiLens.t
-  val nextPageToken : (t, string) GapiLens.t
-  val nextSyncToken : (t, string) GapiLens.t
+  val timeMax : (t, GapiDate.t) GapiLens.t
+  val timeZone : (t, string) GapiLens.t
+  val calendarExpansionMax : (t, int) GapiLens.t
+  val timeMin : (t, GapiDate.t) GapiLens.t
+  val groupExpansionMax : (t, int) GapiLens.t
+  val items : (t, FreeBusyRequestItem.t list) GapiLens.t
   
   val empty : t
   
@@ -133,43 +134,43 @@ end
 module EventAttendee :
 sig
   type t = {
-    additionalGuests : int;
-    (** Number of additional guests. Optional. The default is 0. *)
+    resource : bool;
+    (** Whether the attendee is a resource. Can only be set when the attendee is added to the event for the first time. Subsequent modifications are ignored. Optional. The default is False. *)
     comment : string;
     (** The attendee's response comment. Optional. *)
+    optional : bool;
+    (** Whether this is an optional attendee. Optional. The default is False. *)
+    id : string;
+    (** The attendee's Profile ID, if available. *)
     displayName : string;
     (** The attendee's name, if available. Optional. *)
     email : string;
     (** The attendee's email address, if available. This field must be present when adding an attendee. It must be a valid email address as per RFC5322.
 Required when adding an attendee. *)
-    id : string;
-    (** The attendee's Profile ID, if available. It corresponds to the id field in the People collection of the Google+ API *)
-    optional : bool;
-    (** Whether this is an optional attendee. Optional. The default is False. *)
-    organizer : bool;
-    (** Whether the attendee is the organizer of the event. Read-only. The default is False. *)
-    resource : bool;
-    (** Whether the attendee is a resource. Can only be set when the attendee is added to the event for the first time. Subsequent modifications are ignored. Optional. The default is False. *)
     responseStatus : string;
     (** The attendee's response status. Possible values are:  
 - "needsAction" - The attendee has not responded to the invitation. 
 - "declined" - The attendee has declined the invitation. 
 - "tentative" - The attendee has tentatively accepted the invitation. 
 - "accepted" - The attendee has accepted the invitation. *)
+    additionalGuests : int;
+    (** Number of additional guests. Optional. The default is 0. *)
+    organizer : bool;
+    (** Whether the attendee is the organizer of the event. Read-only. The default is False. *)
     self : bool;
     (** Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False. *)
     
   }
   
-  val additionalGuests : (t, int) GapiLens.t
+  val resource : (t, bool) GapiLens.t
   val comment : (t, string) GapiLens.t
+  val optional : (t, bool) GapiLens.t
+  val id : (t, string) GapiLens.t
   val displayName : (t, string) GapiLens.t
   val email : (t, string) GapiLens.t
-  val id : (t, string) GapiLens.t
-  val optional : (t, bool) GapiLens.t
-  val organizer : (t, bool) GapiLens.t
-  val resource : (t, bool) GapiLens.t
   val responseStatus : (t, string) GapiLens.t
+  val additionalGuests : (t, int) GapiLens.t
+  val organizer : (t, bool) GapiLens.t
   val self : (t, bool) GapiLens.t
   
   val empty : t
@@ -184,27 +185,44 @@ Required when adding an attendee. *)
   
 end
 
+module Error :
+sig
+  type t = {
+    domain : string;
+    (** Domain, or broad category, of the error. *)
+    reason : string;
+    (** Specific reason for the error. Some of the possible values are:  
+- "groupTooBig" - The group of users requested is too large for a single query. 
+- "tooManyCalendarsRequested" - The number of calendars requested is too large for a single query. 
+- "notFound" - The requested resource was not found. 
+- "internalError" - The API service has encountered an internal error.  Additional error types may be added in the future, so clients should gracefully handle additional error statuses not included in this list. *)
+    
+  }
+  
+  val domain : (t, string) GapiLens.t
+  val reason : (t, string) GapiLens.t
+  
+  val empty : t
+  
+  val render : t -> GapiJson.json_data_model list
+  
+  val parse : t -> GapiJson.json_data_model -> t
+  
+  val to_data_model : t -> GapiJson.json_data_model
+  
+  val of_data_model : GapiJson.json_data_model -> t
+  
+end
+
 module EntryPoint :
 sig
   type t = {
-    accessCode : string;
-    (** The access code to access the conference. The maximum length is 128 characters.
+    regionCode : string;
+    (** The CLDR/ISO 3166 region code for the country associated with this phone access. Example: "SE" for Sweden.
+Calendar backend will populate this field only for EntryPointType.PHONE. *)
+    pin : string;
+    (** The PIN to access the conference. The maximum length is 128 characters.
 When creating new conference data, populate only the subset of \{meetingCode, accessCode, passcode, password, pin\} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
-Optional. *)
-    entryPointType : string;
-    (** The type of the conference entry point.
-Possible values are:  
-- "video" - joining a conference over HTTP. A conference can have zero or one video entry point.
-- "phone" - joining a conference by dialing a phone number. A conference can have zero or more phone entry points.
-- "sip" - joining a conference over SIP. A conference can have zero or one sip entry point.
-- "more" - further conference joining instructions, for example additional phone numbers. A conference can have zero or one more entry point. A conference with only a more entry point is not a valid conference. *)
-    label : string;
-    (** The label for the URI. Visible to end users. Not localized. The maximum length is 512 characters.
-Examples:  
-- for video: meet.google.com/aaa-bbbb-ccc
-- for phone: +1 123 268 2601
-- for sip: 12345678\@altostrat.com
-- for more: should not be filled  
 Optional. *)
     meetingCode : string;
     (** The meeting code to access the conference. The maximum length is 128 characters.
@@ -213,14 +231,8 @@ Optional. *)
     passcode : string;
     (** The passcode to access the conference. The maximum length is 128 characters.
 When creating new conference data, populate only the subset of \{meetingCode, accessCode, passcode, password, pin\} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed. *)
-    password : string;
-    (** The password to access the conference. The maximum length is 128 characters.
-When creating new conference data, populate only the subset of \{meetingCode, accessCode, passcode, password, pin\} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
-Optional. *)
-    pin : string;
-    (** The PIN to access the conference. The maximum length is 128 characters.
-When creating new conference data, populate only the subset of \{meetingCode, accessCode, passcode, password, pin\} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
-Optional. *)
+    entryPointFeatures : string list;
+    (** Features of the entry point, such as being toll or toll-free. One entry point can have multiple features. However, toll and toll-free cannot be both set on the same entry point. *)
     uri : string;
     (** The URI of the entry point. The maximum length is 1300 characters.
 Format:  
@@ -228,17 +240,42 @@ Format:
 - for phone, tel: schema is required. The URI should include the entire dial sequence (e.g., tel:+12345678900,,,123456789;1234).
 - for sip, sip: schema is required, e.g., sip:12345678\@myprovider.com.
 - for more, http: or https: schema is required. *)
+    label : string;
+    (** The label for the URI. Visible to end users. Not localized. The maximum length is 512 characters.
+Examples:  
+- for video: meet.google.com/aaa-bbbb-ccc
+- for phone: +1 123 268 2601
+- for sip: 12345678\@altostrat.com
+- for more: should not be filled  
+Optional. *)
+    password : string;
+    (** The password to access the conference. The maximum length is 128 characters.
+When creating new conference data, populate only the subset of \{meetingCode, accessCode, passcode, password, pin\} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
+Optional. *)
+    entryPointType : string;
+    (** The type of the conference entry point.
+Possible values are:  
+- "video" - joining a conference over HTTP. A conference can have zero or one video entry point.
+- "phone" - joining a conference by dialing a phone number. A conference can have zero or more phone entry points.
+- "sip" - joining a conference over SIP. A conference can have zero or one sip entry point.
+- "more" - further conference joining instructions, for example additional phone numbers. A conference can have zero or one more entry point. A conference with only a more entry point is not a valid conference. *)
+    accessCode : string;
+    (** The access code to access the conference. The maximum length is 128 characters.
+When creating new conference data, populate only the subset of \{meetingCode, accessCode, passcode, password, pin\} fields that match the terminology that the conference provider uses. Only the populated fields should be displayed.
+Optional. *)
     
   }
   
-  val accessCode : (t, string) GapiLens.t
-  val entryPointType : (t, string) GapiLens.t
-  val label : (t, string) GapiLens.t
+  val regionCode : (t, string) GapiLens.t
+  val pin : (t, string) GapiLens.t
   val meetingCode : (t, string) GapiLens.t
   val passcode : (t, string) GapiLens.t
-  val password : (t, string) GapiLens.t
-  val pin : (t, string) GapiLens.t
+  val entryPointFeatures : (t, string list) GapiLens.t
   val uri : (t, string) GapiLens.t
+  val label : (t, string) GapiLens.t
+  val password : (t, string) GapiLens.t
+  val entryPointType : (t, string) GapiLens.t
+  val accessCode : (t, string) GapiLens.t
   
   val empty : t
   
@@ -252,22 +289,18 @@ Format:
   
 end
 
-module Error :
+module FreeBusyGroup :
 sig
   type t = {
-    domain : string;
-    (** Domain, or broad category, of the error. *)
-    reason : string;
-    (** Specific reason for the error. Some of the possible values are:  
-- "groupTooBig" - The group of users requested is too large for a single query. 
-- "tooManyCalendarsRequested" - The number of calendars requested is too large for a single query. 
-- "notFound" - The requested resource was not found. 
-- "internalError" - The API service has encountered an internal error.  Additional error types may be added in the future, so clients should gracefully handle additional error statuses not included in this list. *)
+    errors : Error.t list;
+    (** Optional error(s) (if computation for the group failed). *)
+    calendars : string list;
+    (** List of calendars' identifiers within a group. *)
     
   }
   
-  val domain : (t, string) GapiLens.t
-  val reason : (t, string) GapiLens.t
+  val errors : (t, Error.t list) GapiLens.t
+  val calendars : (t, string list) GapiLens.t
   
   val empty : t
   
@@ -306,31 +339,6 @@ sig
   
 end
 
-module FreeBusyGroup :
-sig
-  type t = {
-    calendars : string list;
-    (** List of calendars' identifiers within a group. *)
-    errors : Error.t list;
-    (** Optional error(s) (if computation for the group failed). *)
-    
-  }
-  
-  val calendars : (t, string list) GapiLens.t
-  val errors : (t, Error.t list) GapiLens.t
-  
-  val empty : t
-  
-  val render : t -> GapiJson.json_data_model list
-  
-  val parse : t -> GapiJson.json_data_model -> t
-  
-  val to_data_model : t -> GapiJson.json_data_model
-  
-  val of_data_model : GapiJson.json_data_model -> t
-  
-end
-
 module ConferenceProperties :
 sig
   type t = {
@@ -401,27 +409,22 @@ sig
   
 end
 
-module CalendarNotification :
+module EventReminder :
 sig
   type t = {
     _method : string;
-    (** The method used to deliver the notification. Possible values are:  
+    (** The method used by this reminder. Possible values are:  
 - "email" - Reminders are sent via email. 
-- "sms" - Reminders are sent via SMS. This value is read-only and is ignored on inserts and updates. SMS reminders are only available for G Suite customers.  
-Required when adding a notification. *)
-    _type : string;
-    (** The type of notification. Possible values are:  
-- "eventCreation" - Notification sent when a new event is put on the calendar. 
-- "eventChange" - Notification sent when an event is changed. 
-- "eventCancellation" - Notification sent when an event is cancelled. 
-- "eventResponse" - Notification sent when an attendee responds to the event invitation. 
-- "agenda" - An agenda with the events of the day (sent out in the morning).  
-Required when adding a notification. *)
+- "popup" - Reminders are sent via a UI popup.  
+Required when adding a reminder. *)
+    minutes : int;
+    (** Number of minutes before the start of the event when the reminder should trigger. Valid values are between 0 and 40320 (4 weeks in minutes).
+Required when adding a reminder. *)
     
   }
   
   val _method : (t, string) GapiLens.t
-  val _type : (t, string) GapiLens.t
+  val minutes : (t, int) GapiLens.t
   
   val empty : t
   
@@ -435,23 +438,26 @@ Required when adding a notification. *)
   
 end
 
-module EventReminder :
+module CalendarNotification :
 sig
   type t = {
     _method : string;
-    (** The method used by this reminder. Possible values are:  
-- "email" - Reminders are sent via email. 
-- "sms" - Reminders are sent via SMS. These are only available for G Suite customers. Requests to set SMS reminders for other account types are ignored. 
-- "popup" - Reminders are sent via a UI popup.  
-Required when adding a reminder. *)
-    minutes : int;
-    (** Number of minutes before the start of the event when the reminder should trigger. Valid values are between 0 and 40320 (4 weeks in minutes).
-Required when adding a reminder. *)
+    (** The method used to deliver the notification. The possible value is:  
+- "email" - Notifications are sent via email.  
+Required when adding a notification. *)
+    _type : string;
+    (** The type of notification. Possible values are:  
+- "eventCreation" - Notification sent when a new event is put on the calendar. 
+- "eventChange" - Notification sent when an event is changed. 
+- "eventCancellation" - Notification sent when an event is cancelled. 
+- "eventResponse" - Notification sent when an attendee responds to the event invitation. 
+- "agenda" - An agenda with the events of the day (sent out in the morning).  
+Required when adding a notification. *)
     
   }
   
   val _method : (t, string) GapiLens.t
-  val minutes : (t, int) GapiLens.t
+  val _type : (t, string) GapiLens.t
   
   val empty : t
   
@@ -486,70 +492,70 @@ sig
   end
   
   type t = {
+    primary : bool;
+    (** Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False. *)
+    notificationSettings : NotificationSettings.t;
+    (** The notifications that the authenticated user is receiving for this calendar. *)
+    summaryOverride : string;
+    (** The summary that the authenticated user has set for this calendar. Optional. *)
+    kind : string;
+    (** Type of the resource ("calendar#calendarListEntry"). *)
+    etag : string;
+    (** ETag of the resource. *)
+    deleted : bool;
+    (** Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False. *)
     accessRole : string;
     (** The effective access role that the authenticated user has on the calendar. Read-only. Possible values are:  
 - "freeBusyReader" - Provides read access to free/busy information. 
 - "reader" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
 - "writer" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
 - "owner" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs. *)
-    backgroundColor : string;
-    (** The main color of the calendar in the hexadecimal format "#0088aa". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional. *)
+    selected : bool;
+    (** Whether the calendar content shows up in the calendar UI. Optional. The default is False. *)
+    description : string;
+    (** Description of the calendar. Optional. Read-only. *)
+    timeZone : string;
+    (** The time zone of the calendar. Optional. Read-only. *)
     colorId : string;
     (** The color of the calendar. This is an ID referring to an entry in the calendar section of the colors definition (see the colors endpoint). This property is superseded by the backgroundColor and foregroundColor properties and can be ignored when using these properties. Optional. *)
+    backgroundColor : string;
+    (** The main color of the calendar in the hexadecimal format "#0088aa". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional. *)
     conferenceProperties : ConferenceProperties.t;
     (** Conferencing properties for this calendar, for example what types of conferences are allowed. *)
     defaultReminders : EventReminder.t list;
     (** The default reminders that the authenticated user has for this calendar. *)
-    deleted : bool;
-    (** Whether this calendar list entry has been deleted from the calendar list. Read-only. Optional. The default is False. *)
-    description : string;
-    (** Description of the calendar. Optional. Read-only. *)
-    etag : string;
-    (** ETag of the resource. *)
-    foregroundColor : string;
-    (** The foreground color of the calendar in the hexadecimal format "#ffffff". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional. *)
     hidden : bool;
-    (** Whether the calendar has been hidden from the list. Optional. The default is False. *)
-    id : string;
-    (** Identifier of the calendar. *)
-    kind : string;
-    (** Type of the resource ("calendar#calendarListEntry"). *)
+    (** Whether the calendar has been hidden from the list. Optional. The attribute is only returned when the calendar is hidden, in which case the value is true. *)
     location : string;
     (** Geographic location of the calendar as free-form text. Optional. Read-only. *)
-    notificationSettings : NotificationSettings.t;
-    (** The notifications that the authenticated user is receiving for this calendar. *)
-    primary : bool;
-    (** Whether the calendar is the primary calendar of the authenticated user. Read-only. Optional. The default is False. *)
-    selected : bool;
-    (** Whether the calendar content shows up in the calendar UI. Optional. The default is False. *)
     summary : string;
     (** Title of the calendar. Read-only. *)
-    summaryOverride : string;
-    (** The summary that the authenticated user has set for this calendar. Optional. *)
-    timeZone : string;
-    (** The time zone of the calendar. Optional. Read-only. *)
+    id : string;
+    (** Identifier of the calendar. *)
+    foregroundColor : string;
+    (** The foreground color of the calendar in the hexadecimal format "#ffffff". This property supersedes the index-based colorId property. To set or change this property, you need to specify colorRgbFormat=true in the parameters of the insert, update and patch methods. Optional. *)
     
   }
   
+  val primary : (t, bool) GapiLens.t
+  val notificationSettings : (t, NotificationSettings.t) GapiLens.t
+  val summaryOverride : (t, string) GapiLens.t
+  val kind : (t, string) GapiLens.t
+  val etag : (t, string) GapiLens.t
+  val deleted : (t, bool) GapiLens.t
   val accessRole : (t, string) GapiLens.t
-  val backgroundColor : (t, string) GapiLens.t
+  val selected : (t, bool) GapiLens.t
+  val description : (t, string) GapiLens.t
+  val timeZone : (t, string) GapiLens.t
   val colorId : (t, string) GapiLens.t
+  val backgroundColor : (t, string) GapiLens.t
   val conferenceProperties : (t, ConferenceProperties.t) GapiLens.t
   val defaultReminders : (t, EventReminder.t list) GapiLens.t
-  val deleted : (t, bool) GapiLens.t
-  val description : (t, string) GapiLens.t
-  val etag : (t, string) GapiLens.t
-  val foregroundColor : (t, string) GapiLens.t
   val hidden : (t, bool) GapiLens.t
-  val id : (t, string) GapiLens.t
-  val kind : (t, string) GapiLens.t
   val location : (t, string) GapiLens.t
-  val notificationSettings : (t, NotificationSettings.t) GapiLens.t
-  val primary : (t, bool) GapiLens.t
-  val selected : (t, bool) GapiLens.t
   val summary : (t, string) GapiLens.t
-  val summaryOverride : (t, string) GapiLens.t
-  val timeZone : (t, string) GapiLens.t
+  val id : (t, string) GapiLens.t
+  val foregroundColor : (t, string) GapiLens.t
   
   val empty : t
   
@@ -566,24 +572,24 @@ end
 module CalendarList :
 sig
   type t = {
-    etag : string;
-    (** ETag of the collection. *)
+    nextSyncToken : string;
+    (** Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided. *)
     items : CalendarListEntry.t list;
     (** Calendars that are present on the user's calendar list. *)
-    kind : string;
-    (** Type of the collection ("calendar#calendarList"). *)
     nextPageToken : string;
     (** Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided. *)
-    nextSyncToken : string;
-    (** Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided. *)
+    kind : string;
+    (** Type of the collection ("calendar#calendarList"). *)
+    etag : string;
+    (** ETag of the collection. *)
     
   }
   
-  val etag : (t, string) GapiLens.t
+  val nextSyncToken : (t, string) GapiLens.t
   val items : (t, CalendarListEntry.t list) GapiLens.t
-  val kind : (t, string) GapiLens.t
   val nextPageToken : (t, string) GapiLens.t
-  val nextSyncToken : (t, string) GapiLens.t
+  val kind : (t, string) GapiLens.t
+  val etag : (t, string) GapiLens.t
   
   val empty : t
   
@@ -602,19 +608,19 @@ sig
   module Scope :
   sig
     type t = {
+      value : string;
+      (** The email address of a user or group, or the name of a domain, depending on the scope type. Omitted for type "default". *)
       _type : string;
       (** The type of the scope. Possible values are:  
 - "default" - The public scope. This is the default value. 
 - "user" - Limits the scope to a single user. 
 - "group" - Limits the scope to a group. 
 - "domain" - Limits the scope to a domain.  Note: The permissions granted to the "default", or public, scope apply to any user, authenticated or not. *)
-      value : string;
-      (** The email address of a user or group, or the name of a domain, depending on the scope type. Omitted for type "default". *)
       
     }
     
-    val _type : (t, string) GapiLens.t
     val value : (t, string) GapiLens.t
+    val _type : (t, string) GapiLens.t
     
     val empty : t
     
@@ -625,12 +631,12 @@ sig
   end
   
   type t = {
+    kind : string;
+    (** Type of the resource ("calendar#aclRule"). *)
     etag : string;
     (** ETag of the resource. *)
     id : string;
-    (** Identifier of the ACL rule. *)
-    kind : string;
-    (** Type of the resource ("calendar#aclRule"). *)
+    (** Identifier of the Access Control List (ACL) rule. See Sharing calendars. *)
     role : string;
     (** The role assigned to the scope. Possible values are:  
 - "none" - Provides no access. 
@@ -639,13 +645,13 @@ sig
 - "writer" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
 - "owner" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs. *)
     scope : Scope.t;
-    (** The scope of the rule. *)
+    (** The extent to which calendar access is granted by this ACL rule. *)
     
   }
   
+  val kind : (t, string) GapiLens.t
   val etag : (t, string) GapiLens.t
   val id : (t, string) GapiLens.t
-  val kind : (t, string) GapiLens.t
   val role : (t, string) GapiLens.t
   val scope : (t, Scope.t) GapiLens.t
   
@@ -664,32 +670,32 @@ end
 module Calendar :
 sig
   type t = {
-    conferenceProperties : ConferenceProperties.t;
-    (** Conferencing properties for this calendar, for example what types of conferences are allowed. *)
     description : string;
     (** Description of the calendar. Optional. *)
-    etag : string;
-    (** ETag of the resource. *)
     id : string;
     (** Identifier of the calendar. To retrieve IDs call the calendarList.list() method. *)
+    conferenceProperties : ConferenceProperties.t;
+    (** Conferencing properties for this calendar, for example what types of conferences are allowed. *)
+    etag : string;
+    (** ETag of the resource. *)
+    summary : string;
+    (** Title of the calendar. *)
     kind : string;
     (** Type of the resource ("calendar#calendar"). *)
     location : string;
     (** Geographic location of the calendar as free-form text. Optional. *)
-    summary : string;
-    (** Title of the calendar. *)
     timeZone : string;
     (** The time zone of the calendar. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) Optional. *)
     
   }
   
-  val conferenceProperties : (t, ConferenceProperties.t) GapiLens.t
   val description : (t, string) GapiLens.t
-  val etag : (t, string) GapiLens.t
   val id : (t, string) GapiLens.t
+  val conferenceProperties : (t, ConferenceProperties.t) GapiLens.t
+  val etag : (t, string) GapiLens.t
+  val summary : (t, string) GapiLens.t
   val kind : (t, string) GapiLens.t
   val location : (t, string) GapiLens.t
-  val summary : (t, string) GapiLens.t
   val timeZone : (t, string) GapiLens.t
   
   val empty : t
@@ -704,33 +710,6 @@ sig
   
 end
 
-module ConferenceSolutionKey :
-sig
-  type t = {
-    _type : string;
-    (** The conference solution type.
-If a client encounters an unfamiliar or empty type, it should still be able to display the entry points. However, it should disallow modifications.
-The possible values are:  
-- "eventHangout" for Hangouts for consumers (http://hangouts.google.com)
-- "eventNamedHangout" for classic Hangouts for G Suite users (http://hangouts.google.com)
-- "hangoutsMeet" for Hangouts Meet (http://meet.google.com) *)
-    
-  }
-  
-  val _type : (t, string) GapiLens.t
-  
-  val empty : t
-  
-  val render : t -> GapiJson.json_data_model list
-  
-  val parse : t -> GapiJson.json_data_model -> t
-  
-  val to_data_model : t -> GapiJson.json_data_model
-  
-  val of_data_model : GapiJson.json_data_model -> t
-  
-end
-
 module ConferenceRequestStatus :
 sig
   type t = {
@@ -757,22 +736,21 @@ The possible values are:
   
 end
 
-module CreateConferenceRequest :
+module ConferenceSolutionKey :
 sig
   type t = {
-    conferenceSolutionKey : ConferenceSolutionKey.t;
-    (** The conference solution, such as Hangouts or Hangouts Meet. *)
-    requestId : string;
-    (** The client-generated unique ID for this request.
-Clients should regenerate this ID for every new request. If an ID provided is the same as for the previous request, the request is ignored. *)
-    status : ConferenceRequestStatus.t;
-    (** The status of the conference create request. *)
+    _type : string;
+    (** The conference solution type.
+If a client encounters an unfamiliar or empty type, it should still be able to display the entry points. However, it should disallow modifications.
+The possible values are:  
+- "eventHangout" for Hangouts for consumers (deprecated; existing events may show this conference solution type but new conferences cannot be created)
+- "eventNamedHangout" for classic Hangouts for Google Workspace users (deprecated; existing events may show this conference solution type but new conferences cannot be created)
+- "hangoutsMeet" for Google Meet (http://meet.google.com)
+- "addOn" for 3P conference providers *)
     
   }
   
-  val conferenceSolutionKey : (t, ConferenceSolutionKey.t) GapiLens.t
-  val requestId : (t, string) GapiLens.t
-  val status : (t, ConferenceRequestStatus.t) GapiLens.t
+  val _type : (t, string) GapiLens.t
   
   val empty : t
   
@@ -786,21 +764,22 @@ Clients should regenerate this ID for every new request. If an ID provided is th
   
 end
 
-module ConferenceSolution :
+module CreateConferenceRequest :
 sig
   type t = {
-    iconUri : string;
-    (** The user-visible icon for this solution. *)
-    key : ConferenceSolutionKey.t;
-    (** The key which can uniquely identify the conference solution for this event. *)
-    name : string;
-    (** The user-visible name of this solution. Not localized. *)
+    status : ConferenceRequestStatus.t;
+    (** The status of the conference create request. *)
+    requestId : string;
+    (** The client-generated unique ID for this request.
+Clients should regenerate this ID for every new request. If an ID provided is the same as for the previous request, the request is ignored. *)
+    conferenceSolutionKey : ConferenceSolutionKey.t;
+    (** The conference solution, such as Hangouts or Google Meet. *)
     
   }
   
-  val iconUri : (t, string) GapiLens.t
-  val key : (t, ConferenceSolutionKey.t) GapiLens.t
-  val name : (t, string) GapiLens.t
+  val status : (t, ConferenceRequestStatus.t) GapiLens.t
+  val requestId : (t, string) GapiLens.t
+  val conferenceSolutionKey : (t, ConferenceSolutionKey.t) GapiLens.t
   
   val empty : t
   
@@ -817,15 +796,15 @@ end
 module TimePeriod :
 sig
   type t = {
-    _end : GapiDate.t;
-    (** The (exclusive) end of the time period. *)
     start : GapiDate.t;
     (** The (inclusive) start of the time period. *)
+    _end : GapiDate.t;
+    (** The (exclusive) end of the time period. *)
     
   }
   
-  val _end : (t, GapiDate.t) GapiLens.t
   val start : (t, GapiDate.t) GapiLens.t
+  val _end : (t, GapiDate.t) GapiLens.t
   
   val empty : t
   
@@ -867,24 +846,24 @@ end
 module FreeBusyResponse :
 sig
   type t = {
+    timeMin : GapiDate.t;
+    (** The start of the interval. *)
+    timeMax : GapiDate.t;
+    (** The end of the interval. *)
     calendars : (string * FreeBusyCalendar.t) list;
     (** List of free/busy information for calendars. *)
     groups : (string * FreeBusyGroup.t) list;
     (** Expansion of groups. *)
     kind : string;
     (** Type of the resource ("calendar#freeBusy"). *)
-    timeMax : GapiDate.t;
-    (** The end of the interval. *)
-    timeMin : GapiDate.t;
-    (** The start of the interval. *)
     
   }
   
+  val timeMin : (t, GapiDate.t) GapiLens.t
+  val timeMax : (t, GapiDate.t) GapiLens.t
   val calendars : (t, (string * FreeBusyCalendar.t) list) GapiLens.t
   val groups : (t, (string * FreeBusyGroup.t) list) GapiLens.t
   val kind : (t, string) GapiLens.t
-  val timeMax : (t, GapiDate.t) GapiLens.t
-  val timeMin : (t, GapiDate.t) GapiLens.t
   
   val empty : t
   
@@ -898,23 +877,23 @@ sig
   
 end
 
-module EventDateTime :
+module ConferenceSolution :
 sig
   type t = {
-    date : GapiDate.t;
-    (** The date, in the format "yyyy-mm-dd", if this is an all-day event. *)
-    dateTime : GapiDate.t;
-    (** The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone. *)
-    timeZone : string;
-    (** The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end. *)
+    iconUri : string;
+    (** The user-visible icon for this solution. *)
+    name : string;
+    (** The user-visible name of this solution. Not localized. *)
+    key : ConferenceSolutionKey.t;
+    (** The key which can uniquely identify the conference solution for this event. *)
     
   }
   
-  val date : (t, GapiDate.t) GapiLens.t
-  val dateTime : (t, GapiDate.t) GapiLens.t
-  val timeZone : (t, string) GapiLens.t
-  
-  val empty : t
+  val iconUri : (t, string) GapiLens.t
+  val name : (t, string) GapiLens.t
+  val key : (t, ConferenceSolutionKey.t) GapiLens.t
+  
+  val empty : t
   
   val render : t -> GapiJson.json_data_model list
   
@@ -929,27 +908,27 @@ end
 module EventAttachment :
 sig
   type t = {
-    fileId : string;
-    (** ID of the attached file. Read-only.
-For Google Drive files, this is the ID of the corresponding Files resource entry in the Drive API. *)
     fileUrl : string;
     (** URL link to the attachment.
 For adding Google Drive file attachments use the same format as in alternateLink property of the Files resource in the Drive API.
 Required when adding an attachment. *)
     iconLink : string;
     (** URL link to the attachment's icon. Read-only. *)
-    mimeType : string;
-    (** Internet media type (MIME type) of the attachment. *)
+    fileId : string;
+    (** ID of the attached file. Read-only.
+For Google Drive files, this is the ID of the corresponding Files resource entry in the Drive API. *)
     title : string;
     (** Attachment title. *)
+    mimeType : string;
+    (** Internet media type (MIME type) of the attachment. *)
     
   }
   
-  val fileId : (t, string) GapiLens.t
   val fileUrl : (t, string) GapiLens.t
   val iconLink : (t, string) GapiLens.t
-  val mimeType : (t, string) GapiLens.t
+  val fileId : (t, string) GapiLens.t
   val title : (t, string) GapiLens.t
+  val mimeType : (t, string) GapiLens.t
   
   val empty : t
   
@@ -966,43 +945,72 @@ end
 module ConferenceData :
 sig
   type t = {
-    conferenceId : string;
-    (** The ID of the conference.
-Can be used by developers to keep track of conferences, should not be displayed to users.
-Values for solution types:  
-- "eventHangout": unset.
-- "eventNamedHangout": the name of the Hangout.
-- "hangoutsMeet": the 10-letter meeting code, for example "aaa-bbbb-ccc".  Optional. *)
-    conferenceSolution : ConferenceSolution.t;
-    (** The conference solution, such as Hangouts or Hangouts Meet.
-Unset for a conference with a failed create request.
-Either conferenceSolution and at least one entryPoint, or createRequest is required. *)
-    createRequest : CreateConferenceRequest.t;
-    (** A request to generate a new conference and attach it to the event. The data is generated asynchronously. To see whether the data is present check the status field.
-Either conferenceSolution and at least one entryPoint, or createRequest is required. *)
     entryPoints : EntryPoint.t list;
     (** Information about individual conference entry points, such as URLs or phone numbers.
 All of them must belong to the same conference.
 Either conferenceSolution and at least one entryPoint, or createRequest is required. *)
     notes : string;
     (** Additional notes (such as instructions from the domain administrator, legal notices) to display to the user. Can contain HTML. The maximum length is 2048 characters. Optional. *)
-    parameters : ConferenceParameters.t;
-    (** Additional properties related to a conference. An example would be a solution-specific setting for enabling video streaming. *)
     signature : string;
     (** The signature of the conference data.
-Genereated on server side. Must be preserved while copying the conference data between events, otherwise the conference data will not be copied.
+Generated on server side. Must be preserved while copying the conference data between events, otherwise the conference data will not be copied.
 Unset for a conference with a failed create request.
 Optional for a conference with a pending create request. *)
+    conferenceId : string;
+    (** The ID of the conference.
+Can be used by developers to keep track of conferences, should not be displayed to users.
+The ID value is formed differently for each conference solution type:  
+- eventHangout: ID is not set. (This conference type is deprecated.)
+- eventNamedHangout: ID is the name of the Hangout. (This conference type is deprecated.)
+- hangoutsMeet: ID is the 10-letter meeting code, for example aaa-bbbb-ccc.
+- addOn: ID is defined by the third-party provider.  Optional. *)
+    parameters : ConferenceParameters.t;
+    (** Additional properties related to a conference. An example would be a solution-specific setting for enabling video streaming. *)
+    conferenceSolution : ConferenceSolution.t;
+    (** The conference solution, such as Google Meet.
+Unset for a conference with a failed create request.
+Either conferenceSolution and at least one entryPoint, or createRequest is required. *)
+    createRequest : CreateConferenceRequest.t;
+    (** A request to generate a new conference and attach it to the event. The data is generated asynchronously. To see whether the data is present check the status field.
+Either conferenceSolution and at least one entryPoint, or createRequest is required. *)
     
   }
   
-  val conferenceId : (t, string) GapiLens.t
-  val conferenceSolution : (t, ConferenceSolution.t) GapiLens.t
-  val createRequest : (t, CreateConferenceRequest.t) GapiLens.t
   val entryPoints : (t, EntryPoint.t list) GapiLens.t
   val notes : (t, string) GapiLens.t
-  val parameters : (t, ConferenceParameters.t) GapiLens.t
   val signature : (t, string) GapiLens.t
+  val conferenceId : (t, string) GapiLens.t
+  val parameters : (t, ConferenceParameters.t) GapiLens.t
+  val conferenceSolution : (t, ConferenceSolution.t) GapiLens.t
+  val createRequest : (t, CreateConferenceRequest.t) GapiLens.t
+  
+  val empty : t
+  
+  val render : t -> GapiJson.json_data_model list
+  
+  val parse : t -> GapiJson.json_data_model -> t
+  
+  val to_data_model : t -> GapiJson.json_data_model
+  
+  val of_data_model : GapiJson.json_data_model -> t
+  
+end
+
+module EventDateTime :
+sig
+  type t = {
+    timeZone : string;
+    (** The time zone in which the time is specified. (Formatted as an IANA Time Zone Database name, e.g. "Europe/Zurich".) For recurring events this field is required and specifies the time zone in which the recurrence is expanded. For single events this field is optional and indicates a custom time zone for the event start/end. *)
+    date : GapiDate.t;
+    (** The date, in the format "yyyy-mm-dd", if this is an all-day event. *)
+    dateTime : GapiDate.t;
+    (** The time, as a combined date-time value (formatted according to RFC3339). A time zone offset is required unless a time zone is explicitly specified in timeZone. *)
+    
+  }
+  
+  val timeZone : (t, string) GapiLens.t
+  val date : (t, GapiDate.t) GapiLens.t
+  val dateTime : (t, GapiDate.t) GapiLens.t
   
   val empty : t
   
@@ -1018,18 +1026,24 @@ end
 
 module Event :
 sig
-  module Source :
+  module Creator :
   sig
     type t = {
-      title : string;
-      (** Title of the source; for example a title of a web page or an email subject. *)
-      url : string;
-      (** URL of the source pointing to a resource. The URL scheme must be HTTP or HTTPS. *)
+      id : string;
+      (** The creator's Profile ID, if available. *)
+      email : string;
+      (** The creator's email address, if available. *)
+      displayName : string;
+      (** The creator's name, if available. *)
+      self : bool;
+      (** Whether the creator corresponds to the calendar on which this copy of the event appears. Read-only. The default is False. *)
       
     }
     
-    val title : (t, string) GapiLens.t
-    val url : (t, string) GapiLens.t
+    val id : (t, string) GapiLens.t
+    val email : (t, string) GapiLens.t
+    val displayName : (t, string) GapiLens.t
+    val self : (t, bool) GapiLens.t
     
     val empty : t
     
@@ -1039,18 +1053,18 @@ sig
     
   end
   
-  module Reminders :
+  module Source :
   sig
     type t = {
-      overrides : EventReminder.t list;
-      (** If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5. *)
-      useDefault : bool;
-      (** Whether the default reminders of the calendar apply to the event. *)
+      title : string;
+      (** Title of the source; for example a title of a web page or an email subject. *)
+      url : string;
+      (** URL of the source pointing to a resource. The URL scheme must be HTTP or HTTPS. *)
       
     }
     
-    val overrides : (t, EventReminder.t list) GapiLens.t
-    val useDefault : (t, bool) GapiLens.t
+    val title : (t, string) GapiLens.t
+    val url : (t, string) GapiLens.t
     
     val empty : t
     
@@ -1063,21 +1077,21 @@ sig
   module Organizer :
   sig
     type t = {
-      displayName : string;
-      (** The organizer's name, if available. *)
+      self : bool;
+      (** Whether the organizer corresponds to the calendar on which this copy of the event appears. Read-only. The default is False. *)
       email : string;
       (** The organizer's email address, if available. It must be a valid email address as per RFC5322. *)
       id : string;
-      (** The organizer's Profile ID, if available. It corresponds to the id field in the People collection of the Google+ API *)
-      self : bool;
-      (** Whether the organizer corresponds to the calendar on which this copy of the event appears. Read-only. The default is False. *)
+      (** The organizer's Profile ID, if available. *)
+      displayName : string;
+      (** The organizer's name, if available. *)
       
     }
     
-    val displayName : (t, string) GapiLens.t
+    val self : (t, bool) GapiLens.t
     val email : (t, string) GapiLens.t
     val id : (t, string) GapiLens.t
-    val self : (t, bool) GapiLens.t
+    val displayName : (t, string) GapiLens.t
     
     val empty : t
     
@@ -1090,35 +1104,35 @@ sig
   module Gadget :
   sig
     type t = {
+      width : int;
+      (** The gadget's width in pixels. The width must be an integer greater than 0. Optional. Deprecated. *)
+      title : string;
+      (** The gadget's title. Deprecated. *)
+      preferences : (string * string) list;
+      (** Preferences. *)
+      height : int;
+      (** The gadget's height in pixels. The height must be an integer greater than 0. Optional. Deprecated. *)
+      _type : string;
+      (** The gadget's type. Deprecated. *)
       display : string;
-      (** The gadget's display mode. Optional. Possible values are:  
+      (** The gadget's display mode. Deprecated. Possible values are:  
 - "icon" - The gadget displays next to the event's title in the calendar view. 
 - "chip" - The gadget displays when the event is clicked. *)
-      height : int;
-      (** The gadget's height in pixels. The height must be an integer greater than 0. Optional. *)
-      iconLink : string;
-      (** The gadget's icon URL. The URL scheme must be HTTPS. *)
       link : string;
-      (** The gadget's URL. The URL scheme must be HTTPS. *)
-      preferences : (string * string) list;
-      (** Preferences. *)
-      title : string;
-      (** The gadget's title. *)
-      _type : string;
-      (** The gadget's type. *)
-      width : int;
-      (** The gadget's width in pixels. The width must be an integer greater than 0. Optional. *)
+      (** The gadget's URL. The URL scheme must be HTTPS. Deprecated. *)
+      iconLink : string;
+      (** The gadget's icon URL. The URL scheme must be HTTPS. Deprecated. *)
       
     }
     
-    val display : (t, string) GapiLens.t
-    val height : (t, int) GapiLens.t
-    val iconLink : (t, string) GapiLens.t
-    val link : (t, string) GapiLens.t
-    val preferences : (t, (string * string) list) GapiLens.t
+    val width : (t, int) GapiLens.t
     val title : (t, string) GapiLens.t
+    val preferences : (t, (string * string) list) GapiLens.t
+    val height : (t, int) GapiLens.t
     val _type : (t, string) GapiLens.t
-    val width : (t, int) GapiLens.t
+    val display : (t, string) GapiLens.t
+    val link : (t, string) GapiLens.t
+    val iconLink : (t, string) GapiLens.t
     
     val empty : t
     
@@ -1128,18 +1142,18 @@ sig
     
   end
   
-  module ExtendedProperties :
+  module Reminders :
   sig
     type t = {
-      _private : (string * string) list;
-      (** Properties that are private to the copy of the event that appears on this calendar. *)
-      shared : (string * string) list;
-      (** Properties that are shared between copies of the event on other attendees' calendars. *)
+      overrides : EventReminder.t list;
+      (** If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5. *)
+      useDefault : bool;
+      (** Whether the default reminders of the calendar apply to the event. *)
       
     }
     
-    val _private : (t, (string * string) list) GapiLens.t
-    val shared : (t, (string * string) list) GapiLens.t
+    val overrides : (t, EventReminder.t list) GapiLens.t
+    val useDefault : (t, bool) GapiLens.t
     
     val empty : t
     
@@ -1149,24 +1163,18 @@ sig
     
   end
   
-  module Creator :
+  module ExtendedProperties :
   sig
     type t = {
-      displayName : string;
-      (** The creator's name, if available. *)
-      email : string;
-      (** The creator's email address, if available. *)
-      id : string;
-      (** The creator's Profile ID, if available. It corresponds to the id field in the People collection of the Google+ API *)
-      self : bool;
-      (** Whether the creator corresponds to the calendar on which this copy of the event appears. Read-only. The default is False. *)
+      _private : (string * string) list;
+      (** Properties that are private to the copy of the event that appears on this calendar. *)
+      shared : (string * string) list;
+      (** Properties that are shared between copies of the event on other attendees' calendars. *)
       
     }
     
-    val displayName : (t, string) GapiLens.t
-    val email : (t, string) GapiLens.t
-    val id : (t, string) GapiLens.t
-    val self : (t, bool) GapiLens.t
+    val _private : (t, (string * string) list) GapiLens.t
+    val shared : (t, (string * string) list) GapiLens.t
     
     val empty : t
     
@@ -1177,80 +1185,59 @@ sig
   end
   
   type t = {
+    description : string;
+    (** Description of the event. Can contain HTML. Optional. *)
+    privateCopy : bool;
+    (** If set to True, Event propagation is disabled. Note that it is not the same thing as Private event properties. Optional. Immutable. The default is False. *)
     anyoneCanAddSelf : bool;
-    (** Whether anyone can invite themselves to the event (currently works for Google+ events only). Optional. The default is False. *)
-    attachments : EventAttachment.t list;
-    (** File attachments for the event. Currently only Google Drive attachments are supported.
-In order to modify attachments the supportsAttachments request parameter should be set to true.
-There can be at most 25 attachments per event, *)
-    attendees : EventAttendee.t list;
-    (** The attendees of the event. See the Events with attendees guide for more information on scheduling events with other calendar users. *)
+    (** Whether anyone can invite themselves to the event (deprecated). Optional. The default is False. *)
+    location : string;
+    (** Geographic location of the event as free-form text. Optional. *)
+    hangoutLink : string;
+    (** An absolute link to the Google Hangout associated with this event. Read-only. *)
+    eventType : string;
+    (** Specific type of the event. Read-only. Possible values are:  
+- "default" - A regular event or not further specified. 
+- "outOfOffice" - An out-of-office event. *)
+    extendedProperties : ExtendedProperties.t;
+    (** Extended properties of the event. *)
+    transparency : string;
+    (** Whether the event blocks time on the calendar. Optional. Possible values are:  
+- "opaque" - Default value. The event does block time on the calendar. This is equivalent to setting Show me as to Busy in the Calendar UI. 
+- "transparent" - The event does not block time on the calendar. This is equivalent to setting Show me as to Available in the Calendar UI. *)
+    recurrence : string list;
+    (** List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events. *)
+    reminders : Reminders.t;
+    (** Information about the event's reminders for the authenticated user. *)
+    htmlLink : string;
+    (** An absolute link to this event in the Google Calendar Web UI. Read-only. *)
+    updated : GapiDate.t;
+    (** Last modification time of the event (as a RFC3339 timestamp). Read-only. *)
+    originalStartTime : EventDateTime.t;
+    (** For an instance of a recurring event, this is the time at which this event would start according to the recurrence data in the recurring event identified by recurringEventId. It uniquely identifies the instance within the recurring event series even if the instance was moved to a different time. Immutable. *)
+    guestsCanInviteOthers : bool;
+    (** Whether attendees other than the organizer can invite others to the event. Optional. The default is True. *)
+    sequence : int;
+    (** Sequence number as per iCalendar. *)
+    etag : string;
+    (** ETag of the resource. *)
     attendeesOmitted : bool;
     (** Whether attendees may have been omitted from the event's representation. When retrieving an event, this may be due to a restriction specified by the maxAttendee query parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False. *)
+    iCalUID : string;
+    (** Event unique identifier as defined in RFC5545. It is used to uniquely identify events accross calendaring systems and must be supplied when importing events via the import method.
+Note that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs. *)
+    conferenceData : ConferenceData.t;
+    (** The conference-related information, such as details of a Google Meet conference. To create new conference details use the createRequest field. To persist your changes, remember to set the conferenceDataVersion request parameter to 1 for all event modification requests. *)
     colorId : string;
     (** The color of the event. This is an ID referring to an entry in the event section of the colors definition (see the  colors endpoint). Optional. *)
-    conferenceData : ConferenceData.t;
-    (** The conference-related information, such as details of a Hangouts Meet conference. To create new conference details use the createRequest field. To persist your changes, remember to set the conferenceDataVersion request parameter to 1 for all event modification requests. *)
-    created : GapiDate.t;
-    (** Creation time of the event (as a RFC3339 timestamp). Read-only. *)
-    creator : Creator.t;
-    (** The creator of the event. Read-only. *)
-    description : string;
-    (** Description of the event. Optional. *)
-    _end : EventDateTime.t;
-    (** The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance. *)
-    endTimeUnspecified : bool;
-    (** Whether the end time is actually unspecified. An end time is still provided for compatibility reasons, even if this attribute is set to True. The default is False. *)
-    etag : string;
-    (** ETag of the resource. *)
-    extendedProperties : ExtendedProperties.t;
-    (** Extended properties of the event. *)
     gadget : Gadget.t;
-    (** A gadget that extends this event. *)
-    guestsCanInviteOthers : bool;
-    (** Whether attendees other than the organizer can invite others to the event. Optional. The default is True. *)
+    (** A gadget that extends this event. Gadgets are deprecated; this structure is instead only used for returning birthday calendar metadata. *)
     guestsCanModify : bool;
     (** Whether attendees other than the organizer can modify the event. Optional. The default is False. *)
     guestsCanSeeOtherGuests : bool;
     (** Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True. *)
-    hangoutLink : string;
-    (** An absolute link to the Google+ hangout associated with this event. Read-only. *)
-    htmlLink : string;
-    (** An absolute link to this event in the Google Calendar Web UI. Read-only. *)
-    iCalUID : string;
-    (** Event unique identifier as defined in RFC5545. It is used to uniquely identify events accross calendaring systems and must be supplied when importing events via the import method.
-Note that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs. *)
-    id : string;
-    (** Opaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:  
-- characters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938 
-- the length of the ID must be between 5 and 1024 characters 
-- the ID must be unique per calendar  Due to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122.
-If you do not specify an ID, it will be automatically generated by the server.
-Note that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs. *)
-    kind : string;
-    (** Type of the resource ("calendar#event"). *)
-    location : string;
-    (** Geographic location of the event as free-form text. Optional. *)
     locked : bool;
     (** Whether this is a locked event copy where no changes can be made to the main event fields "summary", "description", "location", "start", "end" or "recurrence". The default is False. Read-Only. *)
-    organizer : Organizer.t;
-    (** The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in attendees with the organizer field set to True. To change the organizer, use the move operation. Read-only, except when importing an event. *)
-    originalStartTime : EventDateTime.t;
-    (** For an instance of a recurring event, this is the time at which this event would start according to the recurrence data in the recurring event identified by recurringEventId. It uniquely identifies the instance within the recurring event series even if the instance was moved to a different time. Immutable. *)
-    privateCopy : bool;
-    (** Whether this is a private event copy where changes are not shared with other copies on other calendars. Optional. Immutable. The default is False. *)
-    recurrence : string list;
-    (** List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events. *)
-    recurringEventId : string;
-    (** For an instance of a recurring event, this is the id of the recurring event to which this instance belongs. Immutable. *)
-    reminders : Reminders.t;
-    (** Information about the event's reminders for the authenticated user. *)
-    sequence : int;
-    (** Sequence number as per iCalendar. *)
-    source : Source.t;
-    (** Source from which the event was created. For example, a web page, an email message or any document identifiable by an URL with HTTP or HTTPS scheme. Can only be seen or modified by the creator of the event. *)
-    start : EventDateTime.t;
-    (** The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance. *)
     status : string;
     (** Status of the event. Optional. Possible values are:  
 - "confirmed" - The event is confirmed. This is the default status. 
@@ -1262,61 +1249,87 @@ Cancelled exceptions are only guaranteed to have values for the id, recurringEve
 - All other cancelled events represent deleted events. Clients should remove their locally synced copies. Such cancelled events will eventually disappear, so do not rely on them being available indefinitely.
 Deleted events are only guaranteed to have the id field populated.   On the organizer's calendar, cancelled events continue to expose event details (summary, location, etc.) so that they can be restored (undeleted). Similarly, the events to which the user was invited and that they manually removed continue to provide details. However, incremental sync requests with showDeleted set to false will not return these details.
 If an event changes its organizer (for example via the move operation) and the original organizer is not on the attendee list, it will leave behind a cancelled event where only the id field is guaranteed to be populated. *)
-    summary : string;
-    (** Title of the event. *)
-    transparency : string;
-    (** Whether the event blocks time on the calendar. Optional. Possible values are:  
-- "opaque" - Default value. The event does block time on the calendar. This is equivalent to setting Show me as to Busy in the Calendar UI. 
-- "transparent" - The event does not block time on the calendar. This is equivalent to setting Show me as to Available in the Calendar UI. *)
-    updated : GapiDate.t;
-    (** Last modification time of the event (as a RFC3339 timestamp). Read-only. *)
+    organizer : Organizer.t;
+    (** The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in attendees with the organizer field set to True. To change the organizer, use the move operation. Read-only, except when importing an event. *)
+    id : string;
+    (** Opaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:  
+- characters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938 
+- the length of the ID must be between 5 and 1024 characters 
+- the ID must be unique per calendar  Due to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122.
+If you do not specify an ID, it will be automatically generated by the server.
+Note that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs. *)
+    kind : string;
+    (** Type of the resource ("calendar#event"). *)
     visibility : string;
     (** Visibility of the event. Optional. Possible values are:  
 - "default" - Uses the default visibility for events on the calendar. This is the default value. 
 - "public" - The event is public and event details are visible to all readers of the calendar. 
 - "private" - The event is private and only event attendees may view event details. 
 - "confidential" - The event is private. This value is provided for compatibility reasons. *)
+    attendees : EventAttendee.t list;
+    (** The attendees of the event. See the Events with attendees guide for more information on scheduling events with other calendar users. Service accounts need to use domain-wide delegation of authority to populate the attendee list. *)
+    recurringEventId : string;
+    (** For an instance of a recurring event, this is the id of the recurring event to which this instance belongs. Immutable. *)
+    source : Source.t;
+    (** Source from which the event was created. For example, a web page, an email message or any document identifiable by an URL with HTTP or HTTPS scheme. Can only be seen or modified by the creator of the event. *)
+    created : GapiDate.t;
+    (** Creation time of the event (as a RFC3339 timestamp). Read-only. *)
+    creator : Creator.t;
+    (** The creator of the event. Read-only. *)
+    summary : string;
+    (** Title of the event. *)
+    attachments : EventAttachment.t list;
+    (** File attachments for the event. Currently only Google Drive attachments are supported.
+In order to modify attachments the supportsAttachments request parameter should be set to true.
+There can be at most 25 attachments per event, *)
+    endTimeUnspecified : bool;
+    (** Whether the end time is actually unspecified. An end time is still provided for compatibility reasons, even if this attribute is set to True. The default is False. *)
+    start : EventDateTime.t;
+    (** The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance. *)
+    _end : EventDateTime.t;
+    (** The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance. *)
     
   }
   
+  val description : (t, string) GapiLens.t
+  val privateCopy : (t, bool) GapiLens.t
   val anyoneCanAddSelf : (t, bool) GapiLens.t
-  val attachments : (t, EventAttachment.t list) GapiLens.t
-  val attendees : (t, EventAttendee.t list) GapiLens.t
+  val location : (t, string) GapiLens.t
+  val hangoutLink : (t, string) GapiLens.t
+  val eventType : (t, string) GapiLens.t
+  val extendedProperties : (t, ExtendedProperties.t) GapiLens.t
+  val transparency : (t, string) GapiLens.t
+  val recurrence : (t, string list) GapiLens.t
+  val reminders : (t, Reminders.t) GapiLens.t
+  val htmlLink : (t, string) GapiLens.t
+  val updated : (t, GapiDate.t) GapiLens.t
+  val originalStartTime : (t, EventDateTime.t) GapiLens.t
+  val guestsCanInviteOthers : (t, bool) GapiLens.t
+  val sequence : (t, int) GapiLens.t
+  val etag : (t, string) GapiLens.t
   val attendeesOmitted : (t, bool) GapiLens.t
-  val colorId : (t, string) GapiLens.t
+  val iCalUID : (t, string) GapiLens.t
   val conferenceData : (t, ConferenceData.t) GapiLens.t
-  val created : (t, GapiDate.t) GapiLens.t
-  val creator : (t, Creator.t) GapiLens.t
-  val description : (t, string) GapiLens.t
-  val _end : (t, EventDateTime.t) GapiLens.t
-  val endTimeUnspecified : (t, bool) GapiLens.t
-  val etag : (t, string) GapiLens.t
-  val extendedProperties : (t, ExtendedProperties.t) GapiLens.t
+  val colorId : (t, string) GapiLens.t
   val gadget : (t, Gadget.t) GapiLens.t
-  val guestsCanInviteOthers : (t, bool) GapiLens.t
   val guestsCanModify : (t, bool) GapiLens.t
   val guestsCanSeeOtherGuests : (t, bool) GapiLens.t
-  val hangoutLink : (t, string) GapiLens.t
-  val htmlLink : (t, string) GapiLens.t
-  val iCalUID : (t, string) GapiLens.t
-  val id : (t, string) GapiLens.t
-  val kind : (t, string) GapiLens.t
-  val location : (t, string) GapiLens.t
   val locked : (t, bool) GapiLens.t
+  val status : (t, string) GapiLens.t
   val organizer : (t, Organizer.t) GapiLens.t
-  val originalStartTime : (t, EventDateTime.t) GapiLens.t
-  val privateCopy : (t, bool) GapiLens.t
-  val recurrence : (t, string list) GapiLens.t
+  val id : (t, string) GapiLens.t
+  val kind : (t, string) GapiLens.t
+  val visibility : (t, string) GapiLens.t
+  val attendees : (t, EventAttendee.t list) GapiLens.t
   val recurringEventId : (t, string) GapiLens.t
-  val reminders : (t, Reminders.t) GapiLens.t
-  val sequence : (t, int) GapiLens.t
   val source : (t, Source.t) GapiLens.t
-  val start : (t, EventDateTime.t) GapiLens.t
-  val status : (t, string) GapiLens.t
+  val created : (t, GapiDate.t) GapiLens.t
+  val creator : (t, Creator.t) GapiLens.t
   val summary : (t, string) GapiLens.t
-  val transparency : (t, string) GapiLens.t
-  val updated : (t, GapiDate.t) GapiLens.t
-  val visibility : (t, string) GapiLens.t
+  val attachments : (t, EventAttachment.t list) GapiLens.t
+  val endTimeUnspecified : (t, bool) GapiLens.t
+  val start : (t, EventDateTime.t) GapiLens.t
+  val _end : (t, EventDateTime.t) GapiLens.t
   
   val empty : t
   
@@ -1333,24 +1346,24 @@ end
 module Acl :
 sig
   type t = {
-    etag : string;
-    (** ETag of the collection. *)
-    items : AclRule.t list;
-    (** List of rules on the access control list. *)
     kind : string;
     (** Type of the collection ("calendar#acl"). *)
+    items : AclRule.t list;
+    (** List of rules on the access control list. *)
     nextPageToken : string;
     (** Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided. *)
     nextSyncToken : string;
     (** Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided. *)
+    etag : string;
+    (** ETag of the collection. *)
     
   }
   
-  val etag : (t, string) GapiLens.t
-  val items : (t, AclRule.t list) GapiLens.t
   val kind : (t, string) GapiLens.t
+  val items : (t, AclRule.t list) GapiLens.t
   val nextPageToken : (t, string) GapiLens.t
   val nextSyncToken : (t, string) GapiLens.t
+  val etag : (t, string) GapiLens.t
   
   val empty : t
   
@@ -1367,47 +1380,47 @@ end
 module Events :
 sig
   type t = {
-    accessRole : string;
-    (** The user's access role for this calendar. Read-only. Possible values are:  
-- "none" - The user has no access. 
-- "freeBusyReader" - The user has read access to free/busy information. 
-- "reader" - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
-- "writer" - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
-- "owner" - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs. *)
+    timeZone : string;
+    (** The time zone of the calendar. Read-only. *)
     defaultReminders : EventReminder.t list;
     (** The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have reminders.useDefault set to True). *)
-    description : string;
-    (** Description of the calendar. Read-only. *)
-    etag : string;
-    (** ETag of the collection. *)
-    items : Event.t list;
-    (** List of events on the calendar. *)
+    summary : string;
+    (** Title of the calendar. Read-only. *)
     kind : string;
     (** Type of the collection ("calendar#events"). *)
-    nextPageToken : string;
-    (** Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided. *)
+    items : Event.t list;
+    (** List of events on the calendar. *)
+    description : string;
+    (** Description of the calendar. Read-only. *)
     nextSyncToken : string;
     (** Token used at a later point in time to retrieve only the entries that have changed since this result was returned. Omitted if further results are available, in which case nextPageToken is provided. *)
-    summary : string;
-    (** Title of the calendar. Read-only. *)
-    timeZone : string;
-    (** The time zone of the calendar. Read-only. *)
+    nextPageToken : string;
+    (** Token used to access the next page of this result. Omitted if no further results are available, in which case nextSyncToken is provided. *)
     updated : GapiDate.t;
     (** Last modification time of the calendar (as a RFC3339 timestamp). Read-only. *)
+    etag : string;
+    (** ETag of the collection. *)
+    accessRole : string;
+    (** The user's access role for this calendar. Read-only. Possible values are:  
+- "none" - The user has no access. 
+- "freeBusyReader" - The user has read access to free/busy information. 
+- "reader" - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. 
+- "writer" - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. 
+- "owner" - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs. *)
     
   }
   
-  val accessRole : (t, string) GapiLens.t
+  val timeZone : (t, string) GapiLens.t
   val defaultReminders : (t, EventReminder.t list) GapiLens.t
-  val description : (t, string) GapiLens.t
-  val etag : (t, string) GapiLens.t
-  val items : (t, Event.t list) GapiLens.t
+  val summary : (t, string) GapiLens.t
   val kind : (t, string) GapiLens.t
-  val nextPageToken : (t, string) GapiLens.t
+  val items : (t, Event.t list) GapiLens.t
+  val description : (t, string) GapiLens.t
   val nextSyncToken : (t, string) GapiLens.t
-  val summary : (t, string) GapiLens.t
-  val timeZone : (t, string) GapiLens.t
+  val nextPageToken : (t, string) GapiLens.t
   val updated : (t, GapiDate.t) GapiLens.t
+  val etag : (t, string) GapiLens.t
+  val accessRole : (t, string) GapiLens.t
   
   val empty : t
   
@@ -1424,39 +1437,39 @@ end
 module Channel :
 sig
   type t = {
-    address : string;
-    (** The address where notifications are delivered for this channel. *)
-    expiration : int64;
-    (** Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional. *)
-    id : string;
-    (** A UUID or similar unique string that identifies this channel. *)
-    kind : string;
-    (** Identifies this as a notification channel used to watch for changes to a resource. Value: the fixed string "api#channel". *)
-    params : (string * string) list;
-    (** Additional parameters controlling delivery channel behavior. Optional. *)
-    payload : bool;
-    (** A Boolean value to indicate whether payload is wanted. Optional. *)
     resourceId : string;
     (** An opaque ID that identifies the resource being watched on this channel. Stable across different API versions. *)
-    resourceUri : string;
-    (** A version-specific identifier for the watched resource. *)
     token : string;
     (** An arbitrary string delivered to the target address with each notification delivered over this channel. Optional. *)
+    payload : bool;
+    (** A Boolean value to indicate whether payload is wanted. Optional. *)
     _type : string;
-    (** The type of delivery mechanism used for this channel. *)
+    (** The type of delivery mechanism used for this channel. Valid values are "web_hook" (or "webhook"). Both values refer to a channel where Http requests are used to deliver messages. *)
+    id : string;
+    (** A UUID or similar unique string that identifies this channel. *)
+    resourceUri : string;
+    (** A version-specific identifier for the watched resource. *)
+    expiration : int64;
+    (** Date and time of notification channel expiration, expressed as a Unix timestamp, in milliseconds. Optional. *)
+    kind : string;
+    (** Identifies this as a notification channel used to watch for changes to a resource, which is "api#channel". *)
+    params : (string * string) list;
+    (** Additional parameters controlling delivery channel behavior. Optional. *)
+    address : string;
+    (** The address where notifications are delivered for this channel. *)
     
   }
   
-  val address : (t, string) GapiLens.t
-  val expiration : (t, int64) GapiLens.t
-  val id : (t, string) GapiLens.t
-  val kind : (t, string) GapiLens.t
-  val params : (t, (string * string) list) GapiLens.t
-  val payload : (t, bool) GapiLens.t
   val resourceId : (t, string) GapiLens.t
-  val resourceUri : (t, string) GapiLens.t
   val token : (t, string) GapiLens.t
+  val payload : (t, bool) GapiLens.t
   val _type : (t, string) GapiLens.t
+  val id : (t, string) GapiLens.t
+  val resourceUri : (t, string) GapiLens.t
+  val expiration : (t, int64) GapiLens.t
+  val kind : (t, string) GapiLens.t
+  val params : (t, (string * string) list) GapiLens.t
+  val address : (t, string) GapiLens.t
   
   val empty : t
   
@@ -1473,21 +1486,21 @@ end
 module Colors :
 sig
   type t = {
+    updated : GapiDate.t;
+    (** Last modification time of the color palette (as a RFC3339 timestamp). Read-only. *)
     calendar : (string * ColorDefinition.t) list;
-    (** A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its color field. Read-only. *)
-    event : (string * ColorDefinition.t) list;
-    (** A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its color field. Read-only. *)
+    (** A global palette of calendar colors, mapping from the color ID to its definition. A calendarListEntry resource refers to one of these color IDs in its colorId field. Read-only. *)
     kind : string;
     (** Type of the resource ("calendar#colors"). *)
-    updated : GapiDate.t;
-    (** Last modification time of the color palette (as a RFC3339 timestamp). Read-only. *)
+    event : (string * ColorDefinition.t) list;
+    (** A global palette of event colors, mapping from the color ID to its definition. An event resource may refer to one of these color IDs in its colorId field. Read-only. *)
     
   }
   
+  val updated : (t, GapiDate.t) GapiLens.t
   val calendar : (t, (string * ColorDefinition.t) list) GapiLens.t
-  val event : (t, (string * ColorDefinition.t) list) GapiLens.t
   val kind : (t, string) GapiLens.t
-  val updated : (t, GapiDate.t) GapiLens.t
+  val event : (t, (string * ColorDefinition.t) list) GapiLens.t
   
   val empty : t
   
diff --git a/src/gapi/gapiCalendarV3Service.ml b/src/gapi/gapiCalendarV3Service.ml
index e4a25155..ef6eeae1 100644
--- a/src/gapi/gapiCalendarV3Service.ml
+++ b/src/gapi/gapiCalendarV3Service.ml
@@ -1,4 +1,5 @@
-(* Warning! This file is generated. Modify at your own risk. *)
+(* Warning! This file is generated. Modify at your own risk.
+        *)
 
 open GapiUtils.Infix
 open GapiCalendarV3Model
@@ -7,8 +8,33 @@ module Scope =
 struct
   let calendar = "https://www.googleapis.com/auth/calendar"
   
+  let calendar_events_readonly = "https://www.googleapis.com/auth/calendar.events.readonly"
+  
   let calendar_readonly = "https://www.googleapis.com/auth/calendar.readonly"
   
+  let calendar_events = "https://www.googleapis.com/auth/calendar.events"
+  
+  let calendar_settings_readonly = "https://www.googleapis.com/auth/calendar.settings.readonly"
+  
+  
+end
+
+module ColorsResource =
+struct
+  let get
+        ?(base_url = "https://www.googleapis.com/calendar/v3/")
+        ?etag
+        ?std_params
+        ?custom_headers
+        session =
+    let full_url = GapiUtils.add_path_to_url ["colors"] base_url in
+    let params = GapiService.StandardParameters.merge_parameters
+      ?standard_parameters:std_params () in
+    let query_parameters = GapiOption.map
+      GapiService.StandardParameters.to_key_value_list params in
+    GapiService.get ?query_parameters ?etag ?custom_headers full_url
+      (GapiJson.parse_json_response Colors.of_data_model) session 
+    
   
 end
 
@@ -91,9 +117,11 @@ struct
     
   end
   
-  let delete
+  let get
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
+        ?etag
         ?std_params
+        ?custom_headers
         ~calendarId
         ~ruleId
         session =
@@ -101,15 +129,35 @@ struct
       ((fun x -> x) calendarId); "acl"; ((fun x -> x) ruleId)] base_url in
     let params = AclParameters.merge_parameters
       ?standard_parameters:std_params () in
-    let query_parameters = GapiOption.map AclParameters.to_key_value_list params
-      in
-    GapiService.delete ?query_parameters full_url
-      GapiRequest.parse_empty_response session 
+    let query_parameters = GapiOption.map AclParameters.to_key_value_list
+      params in
+    GapiService.get ?query_parameters ?etag ?custom_headers full_url
+      (GapiJson.parse_json_response AclRule.of_data_model) session 
     
-  let get
+  let list
+        ?(base_url = "https://www.googleapis.com/calendar/v3/")
+        ?std_params
+        ?custom_headers
+        ?showDeleted
+        ?syncToken
+        ?pageToken
+        ?maxResults
+        ~calendarId
+        session =
+    let full_url = GapiUtils.add_path_to_url ["calendars";
+      ((fun x -> x) calendarId); "acl"] base_url in
+    let params = AclParameters.merge_parameters
+      ?standard_parameters:std_params ?showDeleted ?syncToken ?pageToken
+      ?maxResults () in
+    let query_parameters = GapiOption.map AclParameters.to_key_value_list
+      params in
+    GapiService.get ?query_parameters ?custom_headers full_url
+      (GapiJson.parse_json_response Acl.of_data_model) session 
+    
+  let delete
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
-        ?etag
         ?std_params
+        ?custom_headers
         ~calendarId
         ~ruleId
         session =
@@ -117,14 +165,15 @@ struct
       ((fun x -> x) calendarId); "acl"; ((fun x -> x) ruleId)] base_url in
     let params = AclParameters.merge_parameters
       ?standard_parameters:std_params () in
-    let query_parameters = GapiOption.map AclParameters.to_key_value_list params
-      in
-    GapiService.get ?query_parameters ?etag full_url
-      (GapiJson.parse_json_response AclRule.of_data_model) session 
+    let query_parameters = GapiOption.map AclParameters.to_key_value_list
+      params in
+    GapiService.delete ?query_parameters ?custom_headers full_url
+      GapiRequest.parse_empty_response session 
     
   let insert
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
+        ?custom_headers
         ?sendNotifications
         ~calendarId
         aclRule
@@ -134,35 +183,17 @@ struct
     let etag = GapiUtils.etag_option aclRule.AclRule.etag in
     let params = AclParameters.merge_parameters
       ?standard_parameters:std_params ?sendNotifications () in
-    let query_parameters = GapiOption.map AclParameters.to_key_value_list params
-      in
-    GapiService.post ?query_parameters ?etag
+    let query_parameters = GapiOption.map AclParameters.to_key_value_list
+      params in
+    GapiService.post ?query_parameters ?etag ?custom_headers
       ~data_to_post:(GapiJson.render_json AclRule.to_data_model)
       ~data:aclRule full_url
       (GapiJson.parse_json_response AclRule.of_data_model) session 
     
-  let list
-        ?(base_url = "https://www.googleapis.com/calendar/v3/")
-        ?std_params
-        ?maxResults
-        ?pageToken
-        ?showDeleted
-        ?syncToken
-        ~calendarId
-        session =
-    let full_url = GapiUtils.add_path_to_url ["calendars";
-      ((fun x -> x) calendarId); "acl"] base_url in
-    let params = AclParameters.merge_parameters
-      ?standard_parameters:std_params ?maxResults ?pageToken ?showDeleted
-      ?syncToken () in
-    let query_parameters = GapiOption.map AclParameters.to_key_value_list params
-      in
-    GapiService.get ?query_parameters full_url
-      (GapiJson.parse_json_response Acl.of_data_model) session 
-    
-  let patch
+  let update
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
+        ?custom_headers
         ?sendNotifications
         ~calendarId
         ~ruleId
@@ -173,16 +204,17 @@ struct
     let etag = GapiUtils.etag_option aclRule.AclRule.etag in
     let params = AclParameters.merge_parameters
       ?standard_parameters:std_params ?sendNotifications () in
-    let query_parameters = GapiOption.map AclParameters.to_key_value_list params
-      in
-    GapiService.patch ?query_parameters ?etag
+    let query_parameters = GapiOption.map AclParameters.to_key_value_list
+      params in
+    GapiService.put ?query_parameters ?etag ?custom_headers
       ~data_to_post:(GapiJson.render_json AclRule.to_data_model)
       ~data:aclRule full_url
       (GapiJson.parse_json_response AclRule.of_data_model) session 
     
-  let update
+  let patch
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
+        ?custom_headers
         ?sendNotifications
         ~calendarId
         ~ruleId
@@ -193,9 +225,9 @@ struct
     let etag = GapiUtils.etag_option aclRule.AclRule.etag in
     let params = AclParameters.merge_parameters
       ?standard_parameters:std_params ?sendNotifications () in
-    let query_parameters = GapiOption.map AclParameters.to_key_value_list params
-      in
-    GapiService.put ?query_parameters ?etag
+    let query_parameters = GapiOption.map AclParameters.to_key_value_list
+      params in
+    GapiService.patch ?query_parameters ?etag ?custom_headers
       ~data_to_post:(GapiJson.render_json AclRule.to_data_model)
       ~data:aclRule full_url
       (GapiJson.parse_json_response AclRule.of_data_model) session 
@@ -203,26 +235,133 @@ struct
   let watch
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
+        ?custom_headers
         ?maxResults
-        ?pageToken
         ?showDeleted
         ?syncToken
+        ?pageToken
         ~calendarId
         channel
         session =
     let full_url = GapiUtils.add_path_to_url ["calendars";
       ((fun x -> x) calendarId); "acl"; "watch"] base_url in
     let params = AclParameters.merge_parameters
-      ?standard_parameters:std_params ?maxResults ?pageToken ?showDeleted
-      ?syncToken () in
-    let query_parameters = GapiOption.map AclParameters.to_key_value_list params
-      in
-    GapiService.post ?query_parameters
+      ?standard_parameters:std_params ?maxResults ?showDeleted ?syncToken
+      ?pageToken () in
+    let query_parameters = GapiOption.map AclParameters.to_key_value_list
+      params in
+    GapiService.post ?query_parameters ?custom_headers
       ~data_to_post:(GapiJson.render_json Channel.to_data_model)
       ~data:channel full_url
       (GapiJson.parse_json_response Channel.of_data_model) session 
     
   
+end
+
+module CalendarsResource =
+struct
+  let delete
+        ?(base_url = "https://www.googleapis.com/calendar/v3/")
+        ?std_params
+        ?custom_headers
+        ~calendarId
+        session =
+    let full_url = GapiUtils.add_path_to_url ["calendars";
+      ((fun x -> x) calendarId)] base_url in
+    let params = GapiService.StandardParameters.merge_parameters
+      ?standard_parameters:std_params () in
+    let query_parameters = GapiOption.map
+      GapiService.StandardParameters.to_key_value_list params in
+    GapiService.delete ?query_parameters ?custom_headers full_url
+      GapiRequest.parse_empty_response session 
+    
+  let insert
+        ?(base_url = "https://www.googleapis.com/calendar/v3/")
+        ?std_params
+        ?custom_headers
+        calendar
+        session =
+    let full_url = GapiUtils.add_path_to_url ["calendars"] base_url in
+    let etag = GapiUtils.etag_option calendar.Calendar.etag in
+    let params = GapiService.StandardParameters.merge_parameters
+      ?standard_parameters:std_params () in
+    let query_parameters = GapiOption.map
+      GapiService.StandardParameters.to_key_value_list params in
+    GapiService.post ?query_parameters ?etag ?custom_headers
+      ~data_to_post:(GapiJson.render_json Calendar.to_data_model)
+      ~data:calendar full_url
+      (GapiJson.parse_json_response Calendar.of_data_model) session 
+    
+  let get
+        ?(base_url = "https://www.googleapis.com/calendar/v3/")
+        ?etag
+        ?std_params
+        ?custom_headers
+        ~calendarId
+        session =
+    let full_url = GapiUtils.add_path_to_url ["calendars";
+      ((fun x -> x) calendarId)] base_url in
+    let params = GapiService.StandardParameters.merge_parameters
+      ?standard_parameters:std_params () in
+    let query_parameters = GapiOption.map
+      GapiService.StandardParameters.to_key_value_list params in
+    GapiService.get ?query_parameters ?etag ?custom_headers full_url
+      (GapiJson.parse_json_response Calendar.of_data_model) session 
+    
+  let clear
+        ?(base_url = "https://www.googleapis.com/calendar/v3/")
+        ?std_params
+        ?custom_headers
+        ~calendarId
+        session =
+    let full_url = GapiUtils.add_path_to_url ["calendars";
+      ((fun x -> x) calendarId); "clear"] base_url in
+    let params = GapiService.StandardParameters.merge_parameters
+      ?standard_parameters:std_params () in
+    let query_parameters = GapiOption.map
+      GapiService.StandardParameters.to_key_value_list params in
+    GapiService.post ?query_parameters ?custom_headers ~data:() full_url
+      GapiRequest.parse_empty_response session 
+    
+  let patch
+        ?(base_url = "https://www.googleapis.com/calendar/v3/")
+        ?std_params
+        ?custom_headers
+        ~calendarId
+        calendar
+        session =
+    let full_url = GapiUtils.add_path_to_url ["calendars";
+      ((fun x -> x) calendarId)] base_url in
+    let etag = GapiUtils.etag_option calendar.Calendar.etag in
+    let params = GapiService.StandardParameters.merge_parameters
+      ?standard_parameters:std_params () in
+    let query_parameters = GapiOption.map
+      GapiService.StandardParameters.to_key_value_list params in
+    GapiService.patch ?query_parameters ?etag ?custom_headers
+      ~data_to_post:(GapiJson.render_json Calendar.to_data_model)
+      ~data:calendar full_url
+      (GapiJson.parse_json_response Calendar.of_data_model) session 
+    
+  let update
+        ?(base_url = "https://www.googleapis.com/calendar/v3/")
+        ?std_params
+        ?custom_headers
+        ~calendarId
+        calendar
+        session =
+    let full_url = GapiUtils.add_path_to_url ["calendars";
+      ((fun x -> x) calendarId)] base_url in
+    let etag = GapiUtils.etag_option calendar.Calendar.etag in
+    let params = GapiService.StandardParameters.merge_parameters
+      ?standard_parameters:std_params () in
+    let query_parameters = GapiOption.map
+      GapiService.StandardParameters.to_key_value_list params in
+    GapiService.put ?query_parameters ?etag ?custom_headers
+      ~data_to_post:(GapiJson.render_json Calendar.to_data_model)
+      ~data:calendar full_url
+      (GapiJson.parse_json_response Calendar.of_data_model) session 
+    
+  
 end
 
 module CalendarListResource =
@@ -340,24 +479,32 @@ struct
     
   end
   
-  let delete
+  let list
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
-        ~calendarId
+        ?custom_headers
+        ?minAccessRole
+        ?syncToken
+        ?showHidden
+        ?showDeleted
+        ?pageToken
+        ?maxResults
         session =
-    let full_url = GapiUtils.add_path_to_url ["users"; "me"; "calendarList";
-      ((fun x -> x) calendarId)] base_url in
+    let full_url = GapiUtils.add_path_to_url ["users"; "me"; "calendarList"]
+      base_url in
     let params = CalendarListParameters.merge_parameters
-      ?standard_parameters:std_params () in
+      ?standard_parameters:std_params ?minAccessRole ?syncToken ?showHidden
+      ?showDeleted ?pageToken ?maxResults () in
     let query_parameters = GapiOption.map
       CalendarListParameters.to_key_value_list params in
-    GapiService.delete ?query_parameters full_url
-      GapiRequest.parse_empty_response session 
+    GapiService.get ?query_parameters ?custom_headers full_url
+      (GapiJson.parse_json_response CalendarList.of_data_model) session 
     
   let get
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?etag
         ?std_params
+        ?custom_headers
         ~calendarId
         session =
     let full_url = GapiUtils.add_path_to_url ["users"; "me"; "calendarList";
@@ -366,12 +513,37 @@ struct
       ?standard_parameters:std_params () in
     let query_parameters = GapiOption.map
       CalendarListParameters.to_key_value_list params in
-    GapiService.get ?query_parameters ?etag full_url
+    GapiService.get ?query_parameters ?etag ?custom_headers full_url
       (GapiJson.parse_json_response CalendarListEntry.of_data_model) session 
     
+  let watch
+        ?(base_url = "https://www.googleapis.com/calendar/v3/")
+        ?std_params
+        ?custom_headers
+        ?minAccessRole
+        ?maxResults
+        ?syncToken
+        ?showHidden
+        ?showDeleted
+        ?pageToken
+        channel
+        session =
+    let full_url = GapiUtils.add_path_to_url ["users"; "me"; "calendarList";
+      "watch"] base_url in
+    let params = CalendarListParameters.merge_parameters
+      ?standard_parameters:std_params ?minAccessRole ?maxResults ?syncToken
+      ?showHidden ?showDeleted ?pageToken () in
+    let query_parameters = GapiOption.map
+      CalendarListParameters.to_key_value_list params in
+    GapiService.post ?query_parameters ?custom_headers
+      ~data_to_post:(GapiJson.render_json Channel.to_data_model)
+      ~data:channel full_url
+      (GapiJson.parse_json_response Channel.of_data_model) session 
+    
   let insert
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
+        ?custom_headers
         ?colorRgbFormat
         calendarListEntry
         session =
@@ -383,34 +555,30 @@ struct
       ?standard_parameters:std_params ?colorRgbFormat () in
     let query_parameters = GapiOption.map
       CalendarListParameters.to_key_value_list params in
-    GapiService.post ?query_parameters ?etag
+    GapiService.post ?query_parameters ?etag ?custom_headers
       ~data_to_post:(GapiJson.render_json CalendarListEntry.to_data_model)
       ~data:calendarListEntry full_url
       (GapiJson.parse_json_response CalendarListEntry.of_data_model) session 
     
-  let list
+  let delete
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
-        ?maxResults
-        ?minAccessRole
-        ?pageToken
-        ?showDeleted
-        ?showHidden
-        ?syncToken
+        ?custom_headers
+        ~calendarId
         session =
-    let full_url = GapiUtils.add_path_to_url ["users"; "me"; "calendarList"]
-      base_url in
+    let full_url = GapiUtils.add_path_to_url ["users"; "me"; "calendarList";
+      ((fun x -> x) calendarId)] base_url in
     let params = CalendarListParameters.merge_parameters
-      ?standard_parameters:std_params ?maxResults ?minAccessRole ?pageToken
-      ?showDeleted ?showHidden ?syncToken () in
+      ?standard_parameters:std_params () in
     let query_parameters = GapiOption.map
       CalendarListParameters.to_key_value_list params in
-    GapiService.get ?query_parameters full_url
-      (GapiJson.parse_json_response CalendarList.of_data_model) session 
+    GapiService.delete ?query_parameters ?custom_headers full_url
+      GapiRequest.parse_empty_response session 
     
   let patch
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
+        ?custom_headers
         ?colorRgbFormat
         ~calendarId
         calendarListEntry
@@ -423,7 +591,7 @@ struct
       ?standard_parameters:std_params ?colorRgbFormat () in
     let query_parameters = GapiOption.map
       CalendarListParameters.to_key_value_list params in
-    GapiService.patch ?query_parameters ?etag
+    GapiService.patch ?query_parameters ?etag ?custom_headers
       ~data_to_post:(GapiJson.render_json CalendarListEntry.to_data_model)
       ~data:calendarListEntry full_url
       (GapiJson.parse_json_response CalendarListEntry.of_data_model) session 
@@ -431,6 +599,7 @@ struct
   let update
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
+        ?custom_headers
         ?colorRgbFormat
         ~calendarId
         calendarListEntry
@@ -443,133 +612,31 @@ struct
       ?standard_parameters:std_params ?colorRgbFormat () in
     let query_parameters = GapiOption.map
       CalendarListParameters.to_key_value_list params in
-    GapiService.put ?query_parameters ?etag
+    GapiService.put ?query_parameters ?etag ?custom_headers
       ~data_to_post:(GapiJson.render_json CalendarListEntry.to_data_model)
       ~data:calendarListEntry full_url
       (GapiJson.parse_json_response CalendarListEntry.of_data_model) session 
     
-  let watch
-        ?(base_url = "https://www.googleapis.com/calendar/v3/")
-        ?std_params
-        ?maxResults
-        ?minAccessRole
-        ?pageToken
-        ?showDeleted
-        ?showHidden
-        ?syncToken
-        channel
-        session =
-    let full_url = GapiUtils.add_path_to_url ["users"; "me"; "calendarList";
-      "watch"] base_url in
-    let params = CalendarListParameters.merge_parameters
-      ?standard_parameters:std_params ?maxResults ?minAccessRole ?pageToken
-      ?showDeleted ?showHidden ?syncToken () in
-    let query_parameters = GapiOption.map
-      CalendarListParameters.to_key_value_list params in
-    GapiService.post ?query_parameters
-      ~data_to_post:(GapiJson.render_json Channel.to_data_model)
-      ~data:channel full_url
-      (GapiJson.parse_json_response Channel.of_data_model) session 
-    
   
 end
 
-module CalendarsResource =
+module FreebusyResource =
 struct
-  let clear
+  let query
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
-        ~calendarId
+        ?custom_headers
+        freeBusyRequest
         session =
-    let full_url = GapiUtils.add_path_to_url ["calendars";
-      ((fun x -> x) calendarId); "clear"] base_url in
+    let full_url = GapiUtils.add_path_to_url ["freeBusy"] base_url in
     let params = GapiService.StandardParameters.merge_parameters
       ?standard_parameters:std_params () in
     let query_parameters = GapiOption.map
       GapiService.StandardParameters.to_key_value_list params in
-    GapiService.post ?query_parameters ~data:() full_url
-      GapiRequest.parse_empty_response session 
-    
-  let delete
-        ?(base_url = "https://www.googleapis.com/calendar/v3/")
-        ?std_params
-        ~calendarId
-        session =
-    let full_url = GapiUtils.add_path_to_url ["calendars";
-      ((fun x -> x) calendarId)] base_url in
-    let params = GapiService.StandardParameters.merge_parameters
-      ?standard_parameters:std_params () in
-    let query_parameters = GapiOption.map
-      GapiService.StandardParameters.to_key_value_list params in
-    GapiService.delete ?query_parameters full_url
-      GapiRequest.parse_empty_response session 
-    
-  let get
-        ?(base_url = "https://www.googleapis.com/calendar/v3/")
-        ?etag
-        ?std_params
-        ~calendarId
-        session =
-    let full_url = GapiUtils.add_path_to_url ["calendars";
-      ((fun x -> x) calendarId)] base_url in
-    let params = GapiService.StandardParameters.merge_parameters
-      ?standard_parameters:std_params () in
-    let query_parameters = GapiOption.map
-      GapiService.StandardParameters.to_key_value_list params in
-    GapiService.get ?query_parameters ?etag full_url
-      (GapiJson.parse_json_response Calendar.of_data_model) session 
-    
-  let insert
-        ?(base_url = "https://www.googleapis.com/calendar/v3/")
-        ?std_params
-        calendar
-        session =
-    let full_url = GapiUtils.add_path_to_url ["calendars"] base_url in
-    let etag = GapiUtils.etag_option calendar.Calendar.etag in
-    let params = GapiService.StandardParameters.merge_parameters
-      ?standard_parameters:std_params () in
-    let query_parameters = GapiOption.map
-      GapiService.StandardParameters.to_key_value_list params in
-    GapiService.post ?query_parameters ?etag
-      ~data_to_post:(GapiJson.render_json Calendar.to_data_model)
-      ~data:calendar full_url
-      (GapiJson.parse_json_response Calendar.of_data_model) session 
-    
-  let patch
-        ?(base_url = "https://www.googleapis.com/calendar/v3/")
-        ?std_params
-        ~calendarId
-        calendar
-        session =
-    let full_url = GapiUtils.add_path_to_url ["calendars";
-      ((fun x -> x) calendarId)] base_url in
-    let etag = GapiUtils.etag_option calendar.Calendar.etag in
-    let params = GapiService.StandardParameters.merge_parameters
-      ?standard_parameters:std_params () in
-    let query_parameters = GapiOption.map
-      GapiService.StandardParameters.to_key_value_list params in
-    GapiService.patch ?query_parameters ?etag
-      ~data_to_post:(GapiJson.render_json Calendar.to_data_model)
-      ~data:calendar full_url
-      (GapiJson.parse_json_response Calendar.of_data_model) session 
-    
-  let update
-        ?(base_url = "https://www.googleapis.com/calendar/v3/")
-        ?std_params
-        ~calendarId
-        calendar
-        session =
-    let full_url = GapiUtils.add_path_to_url ["calendars";
-      ((fun x -> x) calendarId)] base_url in
-    let etag = GapiUtils.etag_option calendar.Calendar.etag in
-    let params = GapiService.StandardParameters.merge_parameters
-      ?standard_parameters:std_params () in
-    let query_parameters = GapiOption.map
-      GapiService.StandardParameters.to_key_value_list params in
-    GapiService.put ?query_parameters ?etag
-      ~data_to_post:(GapiJson.render_json Calendar.to_data_model)
-      ~data:calendar full_url
-      (GapiJson.parse_json_response Calendar.of_data_model) session 
+    GapiService.post ?query_parameters ?custom_headers
+      ~data_to_post:(GapiJson.render_json FreeBusyRequest.to_data_model)
+      ~data:freeBusyRequest full_url
+      (GapiJson.parse_json_response FreeBusyResponse.of_data_model) session 
     
   
 end
@@ -579,6 +646,7 @@ struct
   let stop
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
+        ?custom_headers
         channel
         session =
     let full_url = GapiUtils.add_path_to_url ["channels"; "stop"] base_url in
@@ -586,27 +654,134 @@ struct
       ?standard_parameters:std_params () in
     let query_parameters = GapiOption.map
       GapiService.StandardParameters.to_key_value_list params in
-    GapiService.post ?query_parameters
+    GapiService.post ?query_parameters ?custom_headers
       ~data_to_post:(GapiJson.render_json Channel.to_data_model)
       ~data:channel full_url GapiRequest.parse_empty_response session 
     
   
 end
 
-module ColorsResource =
+module SettingsResource =
 struct
+  module SettingsParameters =
+  struct
+    type t = {
+      (* Standard query parameters *)
+      alt : string;
+      fields : string;
+      prettyPrint : bool;
+      quotaUser : string;
+      userIp : string;
+      key : string;
+      (* settings-specific query parameters *)
+      maxResults : int;
+      pageToken : string;
+      syncToken : string;
+      
+    }
+    
+    let default = {
+      alt = "";
+      fields = "";
+      prettyPrint = true;
+      quotaUser = "";
+      userIp = "";
+      key = "";
+      maxResults = 0;
+      pageToken = "";
+      syncToken = "";
+      
+    }
+    
+    let to_key_value_list qp =
+      let param get_value to_string name =
+        GapiService.build_param default qp get_value to_string name in [
+      param (fun p -> p.alt) (fun x -> x) "alt";
+      param (fun p -> p.fields) (fun x -> x) "fields";
+      param (fun p -> p.prettyPrint) string_of_bool "prettyPrint";
+      param (fun p -> p.quotaUser) (fun x -> x) "quotaUser";
+      param (fun p -> p.userIp) (fun x -> x) "userIp";
+      param (fun p -> p.key) (fun x -> x) "key";
+      param (fun p -> p.maxResults) string_of_int "maxResults";
+      param (fun p -> p.pageToken) (fun x -> x) "pageToken";
+      param (fun p -> p.syncToken) (fun x -> x) "syncToken";
+      
+    ] |> List.concat
+    
+    let merge_parameters
+        ?(standard_parameters = GapiService.StandardParameters.default)
+        ?(maxResults = default.maxResults)
+        ?(pageToken = default.pageToken)
+        ?(syncToken = default.syncToken)
+        () =
+      let parameters = {
+        alt = standard_parameters.GapiService.StandardParameters.alt;
+        fields = standard_parameters.GapiService.StandardParameters.fields;
+        prettyPrint = standard_parameters.GapiService.StandardParameters.prettyPrint;
+        quotaUser = standard_parameters.GapiService.StandardParameters.quotaUser;
+        userIp = standard_parameters.GapiService.StandardParameters.userIp;
+        key = standard_parameters.GapiService.StandardParameters.key;
+        maxResults;
+        pageToken;
+        syncToken;
+        
+      } in
+      if parameters = default then None else Some parameters
+    
+  end
+  
   let get
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?etag
         ?std_params
+        ?custom_headers
+        ~setting
         session =
-    let full_url = GapiUtils.add_path_to_url ["colors"] base_url in
-    let params = GapiService.StandardParameters.merge_parameters
+    let full_url = GapiUtils.add_path_to_url ["users"; "me"; "settings";
+      ((fun x -> x) setting)] base_url in
+    let params = SettingsParameters.merge_parameters
       ?standard_parameters:std_params () in
     let query_parameters = GapiOption.map
-      GapiService.StandardParameters.to_key_value_list params in
-    GapiService.get ?query_parameters ?etag full_url
-      (GapiJson.parse_json_response Colors.of_data_model) session 
+      SettingsParameters.to_key_value_list params in
+    GapiService.get ?query_parameters ?etag ?custom_headers full_url
+      (GapiJson.parse_json_response Setting.of_data_model) session 
+    
+  let watch
+        ?(base_url = "https://www.googleapis.com/calendar/v3/")
+        ?std_params
+        ?custom_headers
+        ?pageToken
+        ?maxResults
+        ?syncToken
+        channel
+        session =
+    let full_url = GapiUtils.add_path_to_url ["users"; "me"; "settings";
+      "watch"] base_url in
+    let params = SettingsParameters.merge_parameters
+      ?standard_parameters:std_params ?pageToken ?maxResults ?syncToken () in
+    let query_parameters = GapiOption.map
+      SettingsParameters.to_key_value_list params in
+    GapiService.post ?query_parameters ?custom_headers
+      ~data_to_post:(GapiJson.render_json Channel.to_data_model)
+      ~data:channel full_url
+      (GapiJson.parse_json_response Channel.of_data_model) session 
+    
+  let list
+        ?(base_url = "https://www.googleapis.com/calendar/v3/")
+        ?std_params
+        ?custom_headers
+        ?syncToken
+        ?maxResults
+        ?pageToken
+        session =
+    let full_url = GapiUtils.add_path_to_url ["users"; "me"; "settings"]
+      base_url in
+    let params = SettingsParameters.merge_parameters
+      ?standard_parameters:std_params ?syncToken ?maxResults ?pageToken () in
+    let query_parameters = GapiOption.map
+      SettingsParameters.to_key_value_list params in
+    GapiService.get ?query_parameters ?custom_headers full_url
+      (GapiJson.parse_json_response Settings.of_data_model) session 
     
   
 end
@@ -633,6 +808,29 @@ struct
   
   end
   
+  module SendUpdates =
+  struct
+    type t =
+      | Default
+      | All
+      | ExternalOnly
+      | None
+      
+    let to_string = function
+      | Default -> ""
+      | All -> "all"
+      | ExternalOnly -> "externalOnly"
+      | None -> "none"
+      
+    let of_string = function
+      | "" -> Default
+      | "all" -> All
+      | "externalOnly" -> ExternalOnly
+      | "none" -> None
+      | s -> failwith ("Unexpected value for SendUpdates:" ^ s)
+  
+  end
+  
   module EventsParameters =
   struct
     type t = {
@@ -656,6 +854,7 @@ struct
       privateExtendedProperty : string list;
       q : string;
       sendNotifications : bool;
+      sendUpdates : SendUpdates.t;
       sharedExtendedProperty : string list;
       showDeleted : bool;
       showHiddenInvitations : bool;
@@ -689,6 +888,7 @@ struct
       privateExtendedProperty = [];
       q = "";
       sendNotifications = false;
+      sendUpdates = SendUpdates.Default;
       sharedExtendedProperty = [];
       showDeleted = false;
       showHiddenInvitations = false;
@@ -724,6 +924,7 @@ struct
       GapiService.build_params qp (fun p -> p.privateExtendedProperty) (fun x -> x) "privateExtendedProperty";
       param (fun p -> p.q) (fun x -> x) "q";
       param (fun p -> p.sendNotifications) string_of_bool "sendNotifications";
+      param (fun p -> p.sendUpdates) SendUpdates.to_string "sendUpdates";
       GapiService.build_params qp (fun p -> p.sharedExtendedProperty) (fun x -> x) "sharedExtendedProperty";
       param (fun p -> p.showDeleted) string_of_bool "showDeleted";
       param (fun p -> p.showHiddenInvitations) string_of_bool "showHiddenInvitations";
@@ -752,6 +953,7 @@ struct
         ?(privateExtendedProperty = default.privateExtendedProperty)
         ?(q = default.q)
         ?(sendNotifications = default.sendNotifications)
+        ?(sendUpdates = default.sendUpdates)
         ?(sharedExtendedProperty = default.sharedExtendedProperty)
         ?(showDeleted = default.showDeleted)
         ?(showHiddenInvitations = default.showHiddenInvitations)
@@ -783,6 +985,7 @@ struct
         privateExtendedProperty;
         q;
         sendNotifications;
+        sendUpdates;
         sharedExtendedProperty;
         showDeleted;
         showHiddenInvitations;
@@ -800,10 +1003,14 @@ struct
     
   end
   
-  let delete
+  let get
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
+        ?etag
         ?std_params
-        ?sendNotifications
+        ?custom_headers
+        ?timeZone
+        ?maxAttendees
+        ?alwaysIncludeEmail
         ~calendarId
         ~eventId
         session =
@@ -811,162 +1018,188 @@ struct
       ((fun x -> x) calendarId); "events"; ((fun x -> x) eventId)] base_url
       in
     let params = EventsParameters.merge_parameters
-      ?standard_parameters:std_params ?sendNotifications () in
+      ?standard_parameters:std_params ?timeZone ?maxAttendees
+      ?alwaysIncludeEmail () in
     let query_parameters = GapiOption.map EventsParameters.to_key_value_list
       params in
-    GapiService.delete ?query_parameters full_url
-      GapiRequest.parse_empty_response session 
+    GapiService.get ?query_parameters ?etag ?custom_headers full_url
+      (GapiJson.parse_json_response Event.of_data_model) session 
     
-  let get
+  let instances
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
-        ?etag
         ?std_params
+        ?custom_headers
+        ?timeZone
+        ?timeMin
+        ?timeMax
+        ?pageToken
+        ?maxResults
+        ?originalStart
         ?alwaysIncludeEmail
+        ?showDeleted
         ?maxAttendees
-        ?timeZone
         ~calendarId
         ~eventId
         session =
     let full_url = GapiUtils.add_path_to_url ["calendars";
-      ((fun x -> x) calendarId); "events"; ((fun x -> x) eventId)] base_url
-      in
+      ((fun x -> x) calendarId); "events"; ((fun x -> x) eventId);
+      "instances"] base_url in
     let params = EventsParameters.merge_parameters
-      ?standard_parameters:std_params ?alwaysIncludeEmail ?maxAttendees
-      ?timeZone () in
+      ?standard_parameters:std_params ?timeZone ?timeMin ?timeMax ?pageToken
+      ?maxResults ?originalStart ?alwaysIncludeEmail ?showDeleted
+      ?maxAttendees () in
     let query_parameters = GapiOption.map EventsParameters.to_key_value_list
       params in
-    GapiService.get ?query_parameters ?etag full_url
-      (GapiJson.parse_json_response Event.of_data_model) session 
+    GapiService.get ?query_parameters ?custom_headers full_url
+      (GapiJson.parse_json_response Events.of_data_model) session 
     
-  let import
+  let quickAdd
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
-        ?conferenceDataVersion
-        ?supportsAttachments
+        ?custom_headers
+        ?sendNotifications
+        ?sendUpdates
         ~calendarId
-        event
+        ~text
         session =
     let full_url = GapiUtils.add_path_to_url ["calendars";
-      ((fun x -> x) calendarId); "events"; "import"] base_url in
-    let etag = GapiUtils.etag_option event.Event.etag in
+      ((fun x -> x) calendarId); "events"; "quickAdd"] base_url in
     let params = EventsParameters.merge_parameters
-      ?standard_parameters:std_params ?conferenceDataVersion
-      ?supportsAttachments () in
+      ?standard_parameters:std_params ?sendNotifications ~text ?sendUpdates
+      () in
     let query_parameters = GapiOption.map EventsParameters.to_key_value_list
       params in
-    GapiService.post ?query_parameters ?etag
-      ~data_to_post:(GapiJson.render_json Event.to_data_model) ~data:event
+    GapiService.post ?query_parameters ?custom_headers ~data:Event.empty
       full_url (GapiJson.parse_json_response Event.of_data_model) session 
     
-  let insert
+  let list
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
-        ?conferenceDataVersion
+        ?custom_headers
+        ?(maxResults = 250)
+        ?q
+        ?timeZone
+        ?sharedExtendedProperty
+        ?syncToken
+        ?updatedMin
         ?maxAttendees
-        ?sendNotifications
-        ?supportsAttachments
+        ?privateExtendedProperty
+        ?singleEvents
+        ?showDeleted
+        ?orderBy
+        ?alwaysIncludeEmail
+        ?showHiddenInvitations
+        ?pageToken
+        ?timeMin
+        ?timeMax
+        ?iCalUID
         ~calendarId
-        event
         session =
     let full_url = GapiUtils.add_path_to_url ["calendars";
       ((fun x -> x) calendarId); "events"] base_url in
-    let etag = GapiUtils.etag_option event.Event.etag in
     let params = EventsParameters.merge_parameters
-      ?standard_parameters:std_params ?conferenceDataVersion ?maxAttendees
-      ?sendNotifications ?supportsAttachments () in
+      ?standard_parameters:std_params ?q ?timeZone ~maxResults
+      ?sharedExtendedProperty ?syncToken ?updatedMin ?maxAttendees
+      ?privateExtendedProperty ?singleEvents ?showDeleted ?orderBy
+      ?alwaysIncludeEmail ?showHiddenInvitations ?pageToken ?timeMin ?timeMax
+      ?iCalUID () in
     let query_parameters = GapiOption.map EventsParameters.to_key_value_list
       params in
-    GapiService.post ?query_parameters ?etag
-      ~data_to_post:(GapiJson.render_json Event.to_data_model) ~data:event
-      full_url (GapiJson.parse_json_response Event.of_data_model) session 
+    GapiService.get ?query_parameters ?custom_headers full_url
+      (GapiJson.parse_json_response Events.of_data_model) session 
     
-  let instances
+  let delete
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
-        ?alwaysIncludeEmail
-        ?maxAttendees
-        ?maxResults
-        ?originalStart
-        ?pageToken
-        ?showDeleted
-        ?timeMax
-        ?timeMin
-        ?timeZone
+        ?custom_headers
+        ?sendNotifications
+        ?sendUpdates
         ~calendarId
         ~eventId
         session =
     let full_url = GapiUtils.add_path_to_url ["calendars";
-      ((fun x -> x) calendarId); "events"; ((fun x -> x) eventId);
-      "instances"] base_url in
+      ((fun x -> x) calendarId); "events"; ((fun x -> x) eventId)] base_url
+      in
     let params = EventsParameters.merge_parameters
-      ?standard_parameters:std_params ?alwaysIncludeEmail ?maxAttendees
-      ?maxResults ?originalStart ?pageToken ?showDeleted ?timeMax ?timeMin
-      ?timeZone () in
+      ?standard_parameters:std_params ?sendNotifications ?sendUpdates () in
     let query_parameters = GapiOption.map EventsParameters.to_key_value_list
       params in
-    GapiService.get ?query_parameters full_url
-      (GapiJson.parse_json_response Events.of_data_model) session 
+    GapiService.delete ?query_parameters ?custom_headers full_url
+      GapiRequest.parse_empty_response session 
     
-  let list
+  let watch
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
+        ?custom_headers
         ?(maxResults = 250)
-        ?alwaysIncludeEmail
+        ?timeMax
+        ?timeZone
         ?iCalUID
-        ?maxAttendees
-        ?orderBy
-        ?pageToken
         ?privateExtendedProperty
+        ?orderBy
+        ?singleEvents
+        ?showDeleted
         ?q
         ?sharedExtendedProperty
-        ?showDeleted
-        ?showHiddenInvitations
-        ?singleEvents
-        ?syncToken
-        ?timeMax
-        ?timeMin
-        ?timeZone
         ?updatedMin
+        ?timeMin
+        ?pageToken
+        ?syncToken
+        ?showHiddenInvitations
+        ?maxAttendees
+        ?alwaysIncludeEmail
         ~calendarId
+        channel
         session =
     let full_url = GapiUtils.add_path_to_url ["calendars";
-      ((fun x -> x) calendarId); "events"] base_url in
+      ((fun x -> x) calendarId); "events"; "watch"] base_url in
     let params = EventsParameters.merge_parameters
-      ?standard_parameters:std_params ?alwaysIncludeEmail ?iCalUID
-      ?maxAttendees ~maxResults ?orderBy ?pageToken ?privateExtendedProperty
-      ?q ?sharedExtendedProperty ?showDeleted ?showHiddenInvitations
-      ?singleEvents ?syncToken ?timeMax ?timeMin ?timeZone ?updatedMin () in
+      ?standard_parameters:std_params ?timeMax ?timeZone ?iCalUID
+      ?privateExtendedProperty ?orderBy ?singleEvents ?showDeleted ?q
+      ?sharedExtendedProperty ?updatedMin ?timeMin ?pageToken ?syncToken
+      ?showHiddenInvitations ?maxAttendees ?alwaysIncludeEmail ~maxResults ()
+      in
     let query_parameters = GapiOption.map EventsParameters.to_key_value_list
       params in
-    GapiService.get ?query_parameters full_url
-      (GapiJson.parse_json_response Events.of_data_model) session 
+    GapiService.post ?query_parameters ?custom_headers
+      ~data_to_post:(GapiJson.render_json Channel.to_data_model)
+      ~data:channel full_url
+      (GapiJson.parse_json_response Channel.of_data_model) session 
     
-  let move
+  let insert
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
+        ?custom_headers
+        ?conferenceDataVersion
+        ?maxAttendees
+        ?supportsAttachments
         ?sendNotifications
+        ?sendUpdates
         ~calendarId
-        ~eventId
-        ~destination
+        event
         session =
     let full_url = GapiUtils.add_path_to_url ["calendars";
-      ((fun x -> x) calendarId); "events"; ((fun x -> x) eventId); "move"]
-      base_url in
+      ((fun x -> x) calendarId); "events"] base_url in
+    let etag = GapiUtils.etag_option event.Event.etag in
     let params = EventsParameters.merge_parameters
-      ?standard_parameters:std_params ~destination ?sendNotifications () in
+      ?standard_parameters:std_params ?conferenceDataVersion ?maxAttendees
+      ?supportsAttachments ?sendNotifications ?sendUpdates () in
     let query_parameters = GapiOption.map EventsParameters.to_key_value_list
       params in
-    GapiService.post ?query_parameters ~data:Event.empty full_url
-      (GapiJson.parse_json_response Event.of_data_model) session 
+    GapiService.post ?query_parameters ?etag ?custom_headers
+      ~data_to_post:(GapiJson.render_json Event.to_data_model) ~data:event
+      full_url (GapiJson.parse_json_response Event.of_data_model) session 
     
   let patch
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
-        ?alwaysIncludeEmail
+        ?custom_headers
+        ?sendNotifications
         ?conferenceDataVersion
         ?maxAttendees
-        ?sendNotifications
+        ?alwaysIncludeEmail
         ?supportsAttachments
+        ?sendUpdates
         ~calendarId
         ~eventId
         event
@@ -976,39 +1209,46 @@ struct
       in
     let etag = GapiUtils.etag_option event.Event.etag in
     let params = EventsParameters.merge_parameters
-      ?standard_parameters:std_params ?alwaysIncludeEmail
-      ?conferenceDataVersion ?maxAttendees ?sendNotifications
-      ?supportsAttachments () in
+      ?standard_parameters:std_params ?sendNotifications
+      ?conferenceDataVersion ?maxAttendees ?alwaysIncludeEmail
+      ?supportsAttachments ?sendUpdates () in
     let query_parameters = GapiOption.map EventsParameters.to_key_value_list
       params in
-    GapiService.patch ?query_parameters ?etag
+    GapiService.patch ?query_parameters ?etag ?custom_headers
       ~data_to_post:(GapiJson.render_json Event.to_data_model) ~data:event
       full_url (GapiJson.parse_json_response Event.of_data_model) session 
     
-  let quickAdd
+  let move
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
+        ?custom_headers
         ?sendNotifications
+        ?sendUpdates
         ~calendarId
-        ~text
+        ~eventId
+        ~destination
         session =
     let full_url = GapiUtils.add_path_to_url ["calendars";
-      ((fun x -> x) calendarId); "events"; "quickAdd"] base_url in
+      ((fun x -> x) calendarId); "events"; ((fun x -> x) eventId); "move"]
+      base_url in
     let params = EventsParameters.merge_parameters
-      ?standard_parameters:std_params ?sendNotifications ~text () in
+      ?standard_parameters:std_params ?sendNotifications ~destination
+      ?sendUpdates () in
     let query_parameters = GapiOption.map EventsParameters.to_key_value_list
       params in
-    GapiService.post ?query_parameters ~data:Event.empty full_url
-      (GapiJson.parse_json_response Event.of_data_model) session 
+    GapiService.post ?query_parameters ?custom_headers ~data:Event.empty
+      full_url (GapiJson.parse_json_response Event.of_data_model) session 
     
   let update
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
-        ?alwaysIncludeEmail
+        ?custom_headers
         ?conferenceDataVersion
-        ?maxAttendees
         ?sendNotifications
         ?supportsAttachments
+        ?sendUpdates
+        ?maxAttendees
+        ?alwaysIncludeEmail
         ~calendarId
         ~eventId
         event
@@ -1018,193 +1258,35 @@ struct
       in
     let etag = GapiUtils.etag_option event.Event.etag in
     let params = EventsParameters.merge_parameters
-      ?standard_parameters:std_params ?alwaysIncludeEmail
-      ?conferenceDataVersion ?maxAttendees ?sendNotifications
-      ?supportsAttachments () in
+      ?standard_parameters:std_params ?conferenceDataVersion
+      ?sendNotifications ?supportsAttachments ?sendUpdates ?maxAttendees
+      ?alwaysIncludeEmail () in
     let query_parameters = GapiOption.map EventsParameters.to_key_value_list
       params in
-    GapiService.put ?query_parameters ?etag
+    GapiService.put ?query_parameters ?etag ?custom_headers
       ~data_to_post:(GapiJson.render_json Event.to_data_model) ~data:event
       full_url (GapiJson.parse_json_response Event.of_data_model) session 
     
-  let watch
+  let import
         ?(base_url = "https://www.googleapis.com/calendar/v3/")
         ?std_params
-        ?(maxResults = 250)
-        ?alwaysIncludeEmail
-        ?iCalUID
-        ?maxAttendees
-        ?orderBy
-        ?pageToken
-        ?privateExtendedProperty
-        ?q
-        ?sharedExtendedProperty
-        ?showDeleted
-        ?showHiddenInvitations
-        ?singleEvents
-        ?syncToken
-        ?timeMax
-        ?timeMin
-        ?timeZone
-        ?updatedMin
+        ?custom_headers
+        ?supportsAttachments
+        ?conferenceDataVersion
         ~calendarId
-        channel
+        event
         session =
     let full_url = GapiUtils.add_path_to_url ["calendars";
-      ((fun x -> x) calendarId); "events"; "watch"] base_url in
+      ((fun x -> x) calendarId); "events"; "import"] base_url in
+    let etag = GapiUtils.etag_option event.Event.etag in
     let params = EventsParameters.merge_parameters
-      ?standard_parameters:std_params ?alwaysIncludeEmail ?iCalUID
-      ?maxAttendees ~maxResults ?orderBy ?pageToken ?privateExtendedProperty
-      ?q ?sharedExtendedProperty ?showDeleted ?showHiddenInvitations
-      ?singleEvents ?syncToken ?timeMax ?timeMin ?timeZone ?updatedMin () in
+      ?standard_parameters:std_params ?supportsAttachments
+      ?conferenceDataVersion () in
     let query_parameters = GapiOption.map EventsParameters.to_key_value_list
       params in
-    GapiService.post ?query_parameters
-      ~data_to_post:(GapiJson.render_json Channel.to_data_model)
-      ~data:channel full_url
-      (GapiJson.parse_json_response Channel.of_data_model) session 
-    
-  
-end
-
-module FreebusyResource =
-struct
-  let query
-        ?(base_url = "https://www.googleapis.com/calendar/v3/")
-        ?std_params
-        freeBusyRequest
-        session =
-    let full_url = GapiUtils.add_path_to_url ["freeBusy"] base_url in
-    let params = GapiService.StandardParameters.merge_parameters
-      ?standard_parameters:std_params () in
-    let query_parameters = GapiOption.map
-      GapiService.StandardParameters.to_key_value_list params in
-    GapiService.post ?query_parameters
-      ~data_to_post:(GapiJson.render_json FreeBusyRequest.to_data_model)
-      ~data:freeBusyRequest full_url
-      (GapiJson.parse_json_response FreeBusyResponse.of_data_model) session 
-    
-  
-end
-
-module SettingsResource =
-struct
-  module SettingsParameters =
-  struct
-    type t = {
-      (* Standard query parameters *)
-      alt : string;
-      fields : string;
-      prettyPrint : bool;
-      quotaUser : string;
-      userIp : string;
-      key : string;
-      (* settings-specific query parameters *)
-      maxResults : int;
-      pageToken : string;
-      syncToken : string;
-      
-    }
-    
-    let default = {
-      alt = "";
-      fields = "";
-      prettyPrint = true;
-      quotaUser = "";
-      userIp = "";
-      key = "";
-      maxResults = 0;
-      pageToken = "";
-      syncToken = "";
-      
-    }
-    
-    let to_key_value_list qp =
-      let param get_value to_string name =
-        GapiService.build_param default qp get_value to_string name in [
-      param (fun p -> p.alt) (fun x -> x) "alt";
-      param (fun p -> p.fields) (fun x -> x) "fields";
-      param (fun p -> p.prettyPrint) string_of_bool "prettyPrint";
-      param (fun p -> p.quotaUser) (fun x -> x) "quotaUser";
-      param (fun p -> p.userIp) (fun x -> x) "userIp";
-      param (fun p -> p.key) (fun x -> x) "key";
-      param (fun p -> p.maxResults) string_of_int "maxResults";
-      param (fun p -> p.pageToken) (fun x -> x) "pageToken";
-      param (fun p -> p.syncToken) (fun x -> x) "syncToken";
-      
-    ] |> List.concat
-    
-    let merge_parameters
-        ?(standard_parameters = GapiService.StandardParameters.default)
-        ?(maxResults = default.maxResults)
-        ?(pageToken = default.pageToken)
-        ?(syncToken = default.syncToken)
-        () =
-      let parameters = {
-        alt = standard_parameters.GapiService.StandardParameters.alt;
-        fields = standard_parameters.GapiService.StandardParameters.fields;
-        prettyPrint = standard_parameters.GapiService.StandardParameters.prettyPrint;
-        quotaUser = standard_parameters.GapiService.StandardParameters.quotaUser;
-        userIp = standard_parameters.GapiService.StandardParameters.userIp;
-        key = standard_parameters.GapiService.StandardParameters.key;
-        maxResults;
-        pageToken;
-        syncToken;
-        
-      } in
-      if parameters = default then None else Some parameters
-    
-  end
-  
-  let get
-        ?(base_url = "https://www.googleapis.com/calendar/v3/")
-        ?etag
-        ?std_params
-        ~setting
-        session =
-    let full_url = GapiUtils.add_path_to_url ["users"; "me"; "settings";
-      ((fun x -> x) setting)] base_url in
-    let params = SettingsParameters.merge_parameters
-      ?standard_parameters:std_params () in
-    let query_parameters = GapiOption.map SettingsParameters.to_key_value_list
-      params in
-    GapiService.get ?query_parameters ?etag full_url
-      (GapiJson.parse_json_response Setting.of_data_model) session 
-    
-  let list
-        ?(base_url = "https://www.googleapis.com/calendar/v3/")
-        ?std_params
-        ?maxResults
-        ?pageToken
-        ?syncToken
-        session =
-    let full_url = GapiUtils.add_path_to_url ["users"; "me"; "settings"]
-      base_url in
-    let params = SettingsParameters.merge_parameters
-      ?standard_parameters:std_params ?maxResults ?pageToken ?syncToken () in
-    let query_parameters = GapiOption.map SettingsParameters.to_key_value_list
-      params in
-    GapiService.get ?query_parameters full_url
-      (GapiJson.parse_json_response Settings.of_data_model) session 
-    
-  let watch
-        ?(base_url = "https://www.googleapis.com/calendar/v3/")
-        ?std_params
-        ?maxResults
-        ?pageToken
-        ?syncToken
-        channel
-        session =
-    let full_url = GapiUtils.add_path_to_url ["users"; "me"; "settings";
-      "watch"] base_url in
-    let params = SettingsParameters.merge_parameters
-      ?standard_parameters:std_params ?maxResults ?pageToken ?syncToken () in
-    let query_parameters = GapiOption.map SettingsParameters.to_key_value_list
-      params in
-    GapiService.post ?query_parameters
-      ~data_to_post:(GapiJson.render_json Channel.to_data_model)
-      ~data:channel full_url
-      (GapiJson.parse_json_response Channel.of_data_model) session 
+    GapiService.post ?query_parameters ?etag ?custom_headers
+      ~data_to_post:(GapiJson.render_json Event.to_data_model) ~data:event
+      full_url (GapiJson.parse_json_response Event.of_data_model) session 
     
   
 end
diff --git a/src/gapi/gapiCalendarV3Service.mli b/src/gapi/gapiCalendarV3Service.mli
index 918ec979..1a39ebc7 100644
--- a/src/gapi/gapiCalendarV3Service.mli
+++ b/src/gapi/gapiCalendarV3Service.mli
@@ -1,4 +1,5 @@
-(* Warning! This file is generated. Modify at your own risk. *)
+(* Warning! This file is generated. Modify at your own risk.
+        *)
 
 (** Service definition for Calendar API (v3).
   
@@ -11,38 +12,54 @@
 module Scope :
 sig
   val calendar : string
-  (** Manage your calendars *)
+  (** See, edit, share, and permanently delete all the calendars you can access using Google Calendar *)
+  
+  val calendar_events_readonly : string
+  (** View events on all your calendars *)
   
   val calendar_readonly : string
-  (** View your calendars *)
+  (** See and download any calendar you can access using your Google Calendar *)
+  
+  val calendar_events : string
+  (** View and edit events on all your calendars *)
+  
+  val calendar_settings_readonly : string
+  (** View your Calendar settings *)
   
   
 end
 (** Service Auth Scopes *)
 
-module AclResource :
+module ColorsResource :
 sig
   
-  (** Deletes an access control rule.
+  (** Returns the color definitions for calendars and events.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
+    @param etag Optional ETag.
     @param std_params Optional standard parameters.
-    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
-    @param ruleId ACL rule identifier.
+    @param custom_headers Optional HTTP custom headers.
     *)
-  val delete :
+  val get :
     ?base_url:string ->
+    ?etag:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    calendarId:string ->
-    ruleId:string ->
+    ?custom_headers:GapiCore.Header.t list ->
     GapiConversation.Session.t ->
-    unit * GapiConversation.Session.t
+    GapiCalendarV3Model.Colors.t * GapiConversation.Session.t
+  
+  
+end
+
+module AclResource :
+sig
   
   (** Returns an access control rule.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param etag Optional ETag.
     @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     @param ruleId ACL rule identifier.
     *)
@@ -50,65 +67,69 @@ sig
     ?base_url:string ->
     ?etag:string ->
     ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
     calendarId:string ->
     ruleId:string ->
     GapiConversation.Session.t ->
     GapiCalendarV3Model.AclRule.t * GapiConversation.Session.t
   
-  (** Creates an access control rule.
-    
-    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
-    @param std_params Optional standard parameters.
-    @param sendNotifications Whether to send notifications about the calendar sharing change. Optional. The default is True.
-    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
-    *)
-  val insert :
-    ?base_url:string ->
-    ?std_params:GapiService.StandardParameters.t ->
-    ?sendNotifications:bool ->
-    calendarId:string ->
-    GapiCalendarV3Model.AclRule.t ->
-    GapiConversation.Session.t ->
-    GapiCalendarV3Model.AclRule.t * GapiConversation.Session.t
-  
   (** Returns the rules in the access control list for the calendar.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param maxResults Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
-    @param pageToken Token specifying which result page to return. Optional.
+    @param custom_headers Optional HTTP custom headers.
     @param showDeleted Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.
     @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
 If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
 Learn more about incremental synchronization.
 Optional. The default is to return all entries.
+    @param pageToken Token specifying which result page to return. Optional.
+    @param maxResults Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     *)
   val list :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    ?maxResults:int ->
-    ?pageToken:string ->
+    ?custom_headers:GapiCore.Header.t list ->
     ?showDeleted:bool ->
     ?syncToken:string ->
+    ?pageToken:string ->
+    ?maxResults:int ->
     calendarId:string ->
     GapiConversation.Session.t ->
     GapiCalendarV3Model.Acl.t * GapiConversation.Session.t
   
-  (** Updates an access control rule. This method supports patch semantics.
+  (** Deletes an access control rule.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param sendNotifications Whether to send notifications about the calendar sharing change. Note that there are no notifications on access removal. Optional. The default is True.
+    @param custom_headers Optional HTTP custom headers.
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     @param ruleId ACL rule identifier.
     *)
-  val patch :
+  val delete :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    ?sendNotifications:bool ->
+    ?custom_headers:GapiCore.Header.t list ->
     calendarId:string ->
     ruleId:string ->
+    GapiConversation.Session.t ->
+    unit * GapiConversation.Session.t
+  
+  (** Creates an access control rule.
+    
+    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
+    @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
+    @param sendNotifications Whether to send notifications about the calendar sharing change. Optional. The default is True.
+    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
+    *)
+  val insert :
+    ?base_url:string ->
+    ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?sendNotifications:bool ->
+    calendarId:string ->
     GapiCalendarV3Model.AclRule.t ->
     GapiConversation.Session.t ->
     GapiCalendarV3Model.AclRule.t * GapiConversation.Session.t
@@ -117,6 +138,7 @@ Optional. The default is to return all entries.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
     @param sendNotifications Whether to send notifications about the calendar sharing change. Note that there are no notifications on access removal. Optional. The default is True.
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     @param ruleId ACL rule identifier.
@@ -124,6 +146,27 @@ Optional. The default is to return all entries.
   val update :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?sendNotifications:bool ->
+    calendarId:string ->
+    ruleId:string ->
+    GapiCalendarV3Model.AclRule.t ->
+    GapiConversation.Session.t ->
+    GapiCalendarV3Model.AclRule.t * GapiConversation.Session.t
+  
+  (** Updates an access control rule. This method supports patch semantics.
+    
+    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
+    @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
+    @param sendNotifications Whether to send notifications about the calendar sharing change. Note that there are no notifications on access removal. Optional. The default is True.
+    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
+    @param ruleId ACL rule identifier.
+    *)
+  val patch :
+    ?base_url:string ->
+    ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
     ?sendNotifications:bool ->
     calendarId:string ->
     ruleId:string ->
@@ -135,28 +178,129 @@ Optional. The default is to return all entries.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
     @param maxResults Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
-    @param pageToken Token specifying which result page to return. Optional.
     @param showDeleted Whether to include deleted ACLs in the result. Deleted ACLs are represented by role equal to "none". Deleted ACLs will always be included if syncToken is provided. Optional. The default is False.
     @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All entries deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
 If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
 Learn more about incremental synchronization.
 Optional. The default is to return all entries.
+    @param pageToken Token specifying which result page to return. Optional.
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     *)
   val watch :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
     ?maxResults:int ->
-    ?pageToken:string ->
     ?showDeleted:bool ->
     ?syncToken:string ->
+    ?pageToken:string ->
     calendarId:string ->
     GapiCalendarV3Model.Channel.t ->
     GapiConversation.Session.t ->
     GapiCalendarV3Model.Channel.t * GapiConversation.Session.t
   
   
+end
+
+module CalendarsResource :
+sig
+  
+  (** Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.
+    
+    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
+    @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
+    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
+    *)
+  val delete :
+    ?base_url:string ->
+    ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    calendarId:string ->
+    GapiConversation.Session.t ->
+    unit * GapiConversation.Session.t
+  
+  (** Creates a secondary calendar.
+    
+    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
+    @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
+    *)
+  val insert :
+    ?base_url:string ->
+    ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    GapiCalendarV3Model.Calendar.t ->
+    GapiConversation.Session.t ->
+    GapiCalendarV3Model.Calendar.t * GapiConversation.Session.t
+  
+  (** Returns metadata for a calendar.
+    
+    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
+    @param etag Optional ETag.
+    @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
+    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
+    *)
+  val get :
+    ?base_url:string ->
+    ?etag:string ->
+    ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    calendarId:string ->
+    GapiConversation.Session.t ->
+    GapiCalendarV3Model.Calendar.t * GapiConversation.Session.t
+  
+  (** Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.
+    
+    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
+    @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
+    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
+    *)
+  val clear :
+    ?base_url:string ->
+    ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    calendarId:string ->
+    GapiConversation.Session.t ->
+    unit * GapiConversation.Session.t
+  
+  (** Updates metadata for a calendar. This method supports patch semantics.
+    
+    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
+    @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
+    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
+    *)
+  val patch :
+    ?base_url:string ->
+    ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    calendarId:string ->
+    GapiCalendarV3Model.Calendar.t ->
+    GapiConversation.Session.t ->
+    GapiCalendarV3Model.Calendar.t * GapiConversation.Session.t
+  
+  (** Updates metadata for a calendar.
+    
+    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
+    @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
+    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
+    *)
+  val update :
+    ?base_url:string ->
+    ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    calendarId:string ->
+    GapiCalendarV3Model.Calendar.t ->
+    GapiConversation.Session.t ->
+    GapiCalendarV3Model.Calendar.t * GapiConversation.Session.t
+  
+  
 end
 
 module CalendarListResource :
@@ -177,85 +321,125 @@ sig
     
   end
   
-  (** Removes a calendar from the user's calendar list.
+  (** Returns the calendars on the user's calendar list.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
+    @param custom_headers Optional HTTP custom headers.
+    @param minAccessRole The minimum access role for the user in the returned entries. Optional. The default is no restriction.
+    @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.
+To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.
+If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
+Learn more about incremental synchronization.
+Optional. The default is to return all entries.
+    @param showHidden Whether to show hidden entries. Optional. The default is False.
+    @param showDeleted Whether to include deleted calendar list entries in the result. Optional. The default is False.
+    @param pageToken Token specifying which result page to return. Optional.
+    @param maxResults Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
     *)
-  val delete :
+  val list :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    calendarId:string ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?minAccessRole:MinAccessRole.t ->
+    ?syncToken:string ->
+    ?showHidden:bool ->
+    ?showDeleted:bool ->
+    ?pageToken:string ->
+    ?maxResults:int ->
     GapiConversation.Session.t ->
-    unit * GapiConversation.Session.t
+    GapiCalendarV3Model.CalendarList.t * GapiConversation.Session.t
   
   (** Returns a calendar from the user's calendar list.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param etag Optional ETag.
     @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     *)
   val get :
     ?base_url:string ->
     ?etag:string ->
     ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
     calendarId:string ->
     GapiConversation.Session.t ->
     GapiCalendarV3Model.CalendarListEntry.t * GapiConversation.Session.t
   
+  (** Watch for changes to CalendarList resources.
+    
+    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
+    @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
+    @param minAccessRole The minimum access role for the user in the returned entries. Optional. The default is no restriction.
+    @param maxResults Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
+    @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.
+To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.
+If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
+Learn more about incremental synchronization.
+Optional. The default is to return all entries.
+    @param showHidden Whether to show hidden entries. Optional. The default is False.
+    @param showDeleted Whether to include deleted calendar list entries in the result. Optional. The default is False.
+    @param pageToken Token specifying which result page to return. Optional.
+    *)
+  val watch :
+    ?base_url:string ->
+    ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?minAccessRole:MinAccessRole.t ->
+    ?maxResults:int ->
+    ?syncToken:string ->
+    ?showHidden:bool ->
+    ?showDeleted:bool ->
+    ?pageToken:string ->
+    GapiCalendarV3Model.Channel.t ->
+    GapiConversation.Session.t ->
+    GapiCalendarV3Model.Channel.t * GapiConversation.Session.t
+  
   (** Inserts an existing calendar into the user's calendar list.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
     @param colorRgbFormat Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.
     *)
   val insert :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
     ?colorRgbFormat:bool ->
     GapiCalendarV3Model.CalendarListEntry.t ->
     GapiConversation.Session.t ->
     GapiCalendarV3Model.CalendarListEntry.t * GapiConversation.Session.t
   
-  (** Returns the calendars on the user's calendar list.
+  (** Removes a calendar from the user's calendar list.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param maxResults Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
-    @param minAccessRole The minimum access role for the user in the returned entries. Optional. The default is no restriction.
-    @param pageToken Token specifying which result page to return. Optional.
-    @param showDeleted Whether to include deleted calendar list entries in the result. Optional. The default is False.
-    @param showHidden Whether to show hidden entries. Optional. The default is False.
-    @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.
-To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.
-If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
-Learn more about incremental synchronization.
-Optional. The default is to return all entries.
+    @param custom_headers Optional HTTP custom headers.
+    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     *)
-  val list :
+  val delete :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    ?maxResults:int ->
-    ?minAccessRole:MinAccessRole.t ->
-    ?pageToken:string ->
-    ?showDeleted:bool ->
-    ?showHidden:bool ->
-    ?syncToken:string ->
+    ?custom_headers:GapiCore.Header.t list ->
+    calendarId:string ->
     GapiConversation.Session.t ->
-    GapiCalendarV3Model.CalendarList.t * GapiConversation.Session.t
+    unit * GapiConversation.Session.t
   
   (** Updates an existing calendar on the user's calendar list. This method supports patch semantics.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
     @param colorRgbFormat Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     *)
   val patch :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
     ?colorRgbFormat:bool ->
     calendarId:string ->
     GapiCalendarV3Model.CalendarListEntry.t ->
@@ -266,175 +450,147 @@ Optional. The default is to return all entries.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
     @param colorRgbFormat Whether to use the foregroundColor and backgroundColor fields to write the calendar colors (RGB). If this feature is used, the index-based colorId field will be set to the best matching option automatically. Optional. The default is False.
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     *)
   val update :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
     ?colorRgbFormat:bool ->
     calendarId:string ->
     GapiCalendarV3Model.CalendarListEntry.t ->
     GapiConversation.Session.t ->
     GapiCalendarV3Model.CalendarListEntry.t * GapiConversation.Session.t
   
-  (** Watch for changes to CalendarList resources.
-    
-    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
-    @param std_params Optional standard parameters.
-    @param maxResults Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
-    @param minAccessRole The minimum access role for the user in the returned entries. Optional. The default is no restriction.
-    @param pageToken Token specifying which result page to return. Optional.
-    @param showDeleted Whether to include deleted calendar list entries in the result. Optional. The default is False.
-    @param showHidden Whether to show hidden entries. Optional. The default is False.
-    @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. If only read-only fields such as calendar properties or ACLs have changed, the entry won't be returned. All entries deleted and hidden since the previous list request will always be in the result set and it is not allowed to set showDeleted neither showHidden to False.
-To ensure client state consistency minAccessRole query parameter cannot be specified together with nextSyncToken.
-If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
-Learn more about incremental synchronization.
-Optional. The default is to return all entries.
-    *)
-  val watch :
-    ?base_url:string ->
-    ?std_params:GapiService.StandardParameters.t ->
-    ?maxResults:int ->
-    ?minAccessRole:MinAccessRole.t ->
-    ?pageToken:string ->
-    ?showDeleted:bool ->
-    ?showHidden:bool ->
-    ?syncToken:string ->
-    GapiCalendarV3Model.Channel.t ->
-    GapiConversation.Session.t ->
-    GapiCalendarV3Model.Channel.t * GapiConversation.Session.t
-  
   
 end
 
-module CalendarsResource :
+module FreebusyResource :
 sig
   
-  (** Clears a primary calendar. This operation deletes all events associated with the primary calendar of an account.
+  (** Returns free/busy information for a set of calendars.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
+    @param custom_headers Optional HTTP custom headers.
     *)
-  val clear :
+  val query :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    calendarId:string ->
+    ?custom_headers:GapiCore.Header.t list ->
+    GapiCalendarV3Model.FreeBusyRequest.t ->
     GapiConversation.Session.t ->
-    unit * GapiConversation.Session.t
+    GapiCalendarV3Model.FreeBusyResponse.t * GapiConversation.Session.t
   
-  (** Deletes a secondary calendar. Use calendars.clear for clearing all events on primary calendars.
+  
+end
+
+module ChannelsResource :
+sig
+  
+  (** Stop watching resources through this channel
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
+    @param custom_headers Optional HTTP custom headers.
     *)
-  val delete :
+  val stop :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    calendarId:string ->
+    ?custom_headers:GapiCore.Header.t list ->
+    GapiCalendarV3Model.Channel.t ->
     GapiConversation.Session.t ->
     unit * GapiConversation.Session.t
   
-  (** Returns metadata for a calendar.
+  
+end
+
+module SettingsResource :
+sig
+  
+  (** Returns a single user setting.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param etag Optional ETag.
     @param std_params Optional standard parameters.
-    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
+    @param custom_headers Optional HTTP custom headers.
+    @param setting The id of the user setting.
     *)
   val get :
     ?base_url:string ->
     ?etag:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    calendarId:string ->
-    GapiConversation.Session.t ->
-    GapiCalendarV3Model.Calendar.t * GapiConversation.Session.t
-  
-  (** Creates a secondary calendar.
-    
-    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
-    @param std_params Optional standard parameters.
-    *)
-  val insert :
-    ?base_url:string ->
-    ?std_params:GapiService.StandardParameters.t ->
-    GapiCalendarV3Model.Calendar.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    setting:string ->
     GapiConversation.Session.t ->
-    GapiCalendarV3Model.Calendar.t * GapiConversation.Session.t
+    GapiCalendarV3Model.Setting.t * GapiConversation.Session.t
   
-  (** Updates metadata for a calendar. This method supports patch semantics.
+  (** Watch for changes to Settings resources.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
+    @param custom_headers Optional HTTP custom headers.
+    @param pageToken Token specifying which result page to return. Optional.
+    @param maxResults Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
+    @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.
+If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
+Learn more about incremental synchronization.
+Optional. The default is to return all entries.
     *)
-  val patch :
+  val watch :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    calendarId:string ->
-    GapiCalendarV3Model.Calendar.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?pageToken:string ->
+    ?maxResults:int ->
+    ?syncToken:string ->
+    GapiCalendarV3Model.Channel.t ->
     GapiConversation.Session.t ->
-    GapiCalendarV3Model.Calendar.t * GapiConversation.Session.t
+    GapiCalendarV3Model.Channel.t * GapiConversation.Session.t
   
-  (** Updates metadata for a calendar.
+  (** Returns all user settings for the authenticated user.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
+    @param custom_headers Optional HTTP custom headers.
+    @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.
+If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
+Learn more about incremental synchronization.
+Optional. The default is to return all entries.
+    @param maxResults Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
+    @param pageToken Token specifying which result page to return. Optional.
     *)
-  val update :
+  val list :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    calendarId:string ->
-    GapiCalendarV3Model.Calendar.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?syncToken:string ->
+    ?maxResults:int ->
+    ?pageToken:string ->
     GapiConversation.Session.t ->
-    GapiCalendarV3Model.Calendar.t * GapiConversation.Session.t
+    GapiCalendarV3Model.Settings.t * GapiConversation.Session.t
   
   
 end
 
-module ChannelsResource :
+module EventsResource :
 sig
   
-  (** Stop watching resources through this channel
+  module SendUpdates :
+  sig
+    type t =
+      | Default
+      | All (** Notifications are sent to all guests. *)
+      | ExternalOnly (** Notifications are sent to non-Google Calendar guests only. *)
+      | None (** No notifications are sent. For calendar migration tasks, consider using the Events.import method instead. *)
+      
+    val to_string : t -> string
     
-    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
-    @param std_params Optional standard parameters.
-    *)
-  val stop :
-    ?base_url:string ->
-    ?std_params:GapiService.StandardParameters.t ->
-    GapiCalendarV3Model.Channel.t ->
-    GapiConversation.Session.t ->
-    unit * GapiConversation.Session.t
-  
-  
-end
-
-module ColorsResource :
-sig
-  
-  (** Returns the color definitions for calendars and events.
+    val of_string : string -> t
     
-    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
-    @param etag Optional ETag.
-    @param std_params Optional standard parameters.
-    *)
-  val get :
-    ?base_url:string ->
-    ?etag:string ->
-    ?std_params:GapiService.StandardParameters.t ->
-    GapiConversation.Session.t ->
-    GapiCalendarV3Model.Colors.t * GapiConversation.Session.t
-  
-  
-end
-
-module EventsResource :
-sig
+  end
   
   module OrderBy :
   sig
@@ -449,135 +605,192 @@ sig
     
   end
   
-  (** Deletes an event.
+  (** Returns an event.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
+    @param etag Optional ETag.
     @param std_params Optional standard parameters.
-    @param sendNotifications Whether to send notifications about the deletion of the event. Optional. The default is False.
+    @param custom_headers Optional HTTP custom headers.
+    @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar.
+    @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
+    @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     @param eventId Event identifier.
     *)
-  val delete :
+  val get :
     ?base_url:string ->
+    ?etag:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    ?sendNotifications:bool ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?timeZone:string ->
+    ?maxAttendees:int ->
+    ?alwaysIncludeEmail:bool ->
     calendarId:string ->
     eventId:string ->
     GapiConversation.Session.t ->
-    unit * GapiConversation.Session.t
+    GapiCalendarV3Model.Event.t * GapiConversation.Session.t
   
-  (** Returns an event.
+  (** Returns instances of the specified recurring event.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
-    @param etag Optional ETag.
     @param std_params Optional standard parameters.
-    @param alwaysIncludeEmail Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.
-    @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
+    @param custom_headers Optional HTTP custom headers.
     @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar.
+    @param timeMin Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset.
+    @param timeMax Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset.
+    @param pageToken Token specifying which result page to return. Optional.
+    @param maxResults Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
+    @param originalStart The original start time of the instance in the result. Optional.
+    @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
+    @param showDeleted Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False.
+    @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
-    @param eventId Event identifier.
+    @param eventId Recurring event identifier.
     *)
-  val get :
+  val instances :
     ?base_url:string ->
-    ?etag:string ->
     ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?timeZone:string ->
+    ?timeMin:GapiDate.t ->
+    ?timeMax:GapiDate.t ->
+    ?pageToken:string ->
+    ?maxResults:int ->
+    ?originalStart:string ->
     ?alwaysIncludeEmail:bool ->
+    ?showDeleted:bool ->
     ?maxAttendees:int ->
-    ?timeZone:string ->
     calendarId:string ->
     eventId:string ->
     GapiConversation.Session.t ->
-    GapiCalendarV3Model.Event.t * GapiConversation.Session.t
+    GapiCalendarV3Model.Events.t * GapiConversation.Session.t
   
-  (** Imports an event. This operation is used to add a private copy of an existing event to a calendar.
+  (** Creates an event based on a simple text string.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
-    @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False.
+    @param custom_headers Optional HTTP custom headers.
+    @param sendNotifications Deprecated. Please use sendUpdates instead.
+
+Whether to send notifications about the creation of the event. Note that some emails might still be sent even if you set the value to false. The default is false.
+    @param sendUpdates Guests who should receive notifications about the creation of the new event.
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
+    @param text The text describing the event to be created.
     *)
-  val import :
+  val quickAdd :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    ?conferenceDataVersion:int ->
-    ?supportsAttachments:bool ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?sendNotifications:bool ->
+    ?sendUpdates:SendUpdates.t ->
     calendarId:string ->
-    GapiCalendarV3Model.Event.t ->
+    text:string ->
     GapiConversation.Session.t ->
     GapiCalendarV3Model.Event.t * GapiConversation.Session.t
   
-  (** Creates an event.
+  (** Returns events on the specified calendar.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
+    @param custom_headers Optional HTTP custom headers.
+    @param maxResults Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
+    @param q Free text search terms to find events that match these terms in any field, except for extended properties. Optional.
+    @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar.
+    @param sharedExtendedProperty Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.
+    @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
+There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.
+
+These are: 
+- iCalUID 
+- orderBy 
+- privateExtendedProperty 
+- q 
+- sharedExtendedProperty 
+- timeMin 
+- timeMax 
+- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
+Learn more about incremental synchronization.
+Optional. The default is to return all entries.
+    @param updatedMin Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.
     @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
-    @param sendNotifications Whether to send notifications about the creation of the new event. Optional. The default is False.
-    @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False.
+    @param privateExtendedProperty Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.
+    @param singleEvents Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.
+    @param showDeleted Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.
+    @param orderBy The order of the events returned in the result. Optional. The default is an unspecified, stable order.
+    @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
+    @param showHiddenInvitations Whether to include hidden invitations in the result. Optional. The default is False.
+    @param pageToken Token specifying which result page to return. Optional.
+    @param timeMin Lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax.
+    @param timeMax Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.
+    @param iCalUID Specifies event ID in the iCalendar format to be included in the response. Optional.
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     *)
-  val insert :
+  val list :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    ?conferenceDataVersion:int ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?maxResults:int ->
+    ?q:string ->
+    ?timeZone:string ->
+    ?sharedExtendedProperty:string list ->
+    ?syncToken:string ->
+    ?updatedMin:GapiDate.t ->
     ?maxAttendees:int ->
-    ?sendNotifications:bool ->
-    ?supportsAttachments:bool ->
+    ?privateExtendedProperty:string list ->
+    ?singleEvents:bool ->
+    ?showDeleted:bool ->
+    ?orderBy:OrderBy.t ->
+    ?alwaysIncludeEmail:bool ->
+    ?showHiddenInvitations:bool ->
+    ?pageToken:string ->
+    ?timeMin:GapiDate.t ->
+    ?timeMax:GapiDate.t ->
+    ?iCalUID:string ->
     calendarId:string ->
-    GapiCalendarV3Model.Event.t ->
     GapiConversation.Session.t ->
-    GapiCalendarV3Model.Event.t * GapiConversation.Session.t
+    GapiCalendarV3Model.Events.t * GapiConversation.Session.t
   
-  (** Returns instances of the specified recurring event.
+  (** Deletes an event.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param alwaysIncludeEmail Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.
-    @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
-    @param maxResults Maximum number of events returned on one result page. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
-    @param originalStart The original start time of the instance in the result. Optional.
-    @param pageToken Token specifying which result page to return. Optional.
-    @param showDeleted Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events will still be included if singleEvents is False. Optional. The default is False.
-    @param timeMax Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset.
-    @param timeMin Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset.
-    @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar.
+    @param custom_headers Optional HTTP custom headers.
+    @param sendNotifications Deprecated. Please use sendUpdates instead.
+
+Whether to send notifications about the deletion of the event. Note that some emails might still be sent even if you set the value to false. The default is false.
+    @param sendUpdates Guests who should receive notifications about the deletion of the event.
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
-    @param eventId Recurring event identifier.
+    @param eventId Event identifier.
     *)
-  val instances :
+  val delete :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    ?alwaysIncludeEmail:bool ->
-    ?maxAttendees:int ->
-    ?maxResults:int ->
-    ?originalStart:string ->
-    ?pageToken:string ->
-    ?showDeleted:bool ->
-    ?timeMax:GapiDate.t ->
-    ?timeMin:GapiDate.t ->
-    ?timeZone:string ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?sendNotifications:bool ->
+    ?sendUpdates:SendUpdates.t ->
     calendarId:string ->
     eventId:string ->
     GapiConversation.Session.t ->
-    GapiCalendarV3Model.Events.t * GapiConversation.Session.t
+    unit * GapiConversation.Session.t
   
-  (** Returns events on the specified calendar.
+  (** Watch for changes to Events resources.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
+    @param custom_headers Optional HTTP custom headers.
     @param maxResults Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
-    @param alwaysIncludeEmail Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.
+    @param timeMax Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMin is set, timeMax must be greater than timeMin.
+    @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar.
     @param iCalUID Specifies event ID in the iCalendar format to be included in the response. Optional.
-    @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
-    @param orderBy The order of the events returned in the result. Optional. The default is an unspecified, stable order.
-    @param pageToken Token specifying which result page to return. Optional.
     @param privateExtendedProperty Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.
+    @param orderBy The order of the events returned in the result. Optional. The default is an unspecified, stable order.
+    @param singleEvents Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.
+    @param showDeleted Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.
     @param q Free text search terms to find events that match these terms in any field, except for extended properties. Optional.
     @param sharedExtendedProperty Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.
-    @param showDeleted Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.
-    @param showHiddenInvitations Whether to include hidden invitations in the result. Optional. The default is False.
-    @param singleEvents Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.
+    @param updatedMin Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.
+    @param timeMin Lower bound (exclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, for example, 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but are ignored. If timeMax is set, timeMin must be smaller than timeMax.
+    @param pageToken Token specifying which result page to return. Optional.
     @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
 There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.
 
@@ -592,52 +805,62 @@ These are:
 - updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
 Learn more about incremental synchronization.
 Optional. The default is to return all entries.
-    @param timeMax Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored. If timeMin is set, timeMax must be greater than timeMin.
-    @param timeMin Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored. If timeMax is set, timeMin must be smaller than timeMax.
-    @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar.
-    @param updatedMin Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.
+    @param showHiddenInvitations Whether to include hidden invitations in the result. Optional. The default is False.
+    @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
+    @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     *)
-  val list :
+  val watch :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
     ?maxResults:int ->
-    ?alwaysIncludeEmail:bool ->
+    ?timeMax:GapiDate.t ->
+    ?timeZone:string ->
     ?iCalUID:string ->
-    ?maxAttendees:int ->
-    ?orderBy:OrderBy.t ->
-    ?pageToken:string ->
     ?privateExtendedProperty:string list ->
+    ?orderBy:OrderBy.t ->
+    ?singleEvents:bool ->
+    ?showDeleted:bool ->
     ?q:string ->
     ?sharedExtendedProperty:string list ->
-    ?showDeleted:bool ->
-    ?showHiddenInvitations:bool ->
-    ?singleEvents:bool ->
-    ?syncToken:string ->
-    ?timeMax:GapiDate.t ->
-    ?timeMin:GapiDate.t ->
-    ?timeZone:string ->
     ?updatedMin:GapiDate.t ->
+    ?timeMin:GapiDate.t ->
+    ?pageToken:string ->
+    ?syncToken:string ->
+    ?showHiddenInvitations:bool ->
+    ?maxAttendees:int ->
+    ?alwaysIncludeEmail:bool ->
     calendarId:string ->
+    GapiCalendarV3Model.Channel.t ->
     GapiConversation.Session.t ->
-    GapiCalendarV3Model.Events.t * GapiConversation.Session.t
+    GapiCalendarV3Model.Channel.t * GapiConversation.Session.t
   
-  (** Moves an event to another calendar, i.e. changes an event's organizer.
+  (** Creates an event.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param sendNotifications Whether to send notifications about the change of the event's organizer. Optional. The default is False.
-    @param calendarId Calendar identifier of the source calendar where the event currently is on.
-    @param eventId Event identifier.
-    @param destination Calendar identifier of the target calendar where the event is to be moved to.
+    @param custom_headers Optional HTTP custom headers.
+    @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
+    @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
+    @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False.
+    @param sendNotifications Deprecated. Please use sendUpdates instead.
+
+Whether to send notifications about the creation of the new event. Note that some emails might still be sent even if you set the value to false. The default is false.
+    @param sendUpdates Whether to send notifications about the creation of the new event. Note that some emails might still be sent. The default is false.
+    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     *)
-  val move :
+  val insert :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?conferenceDataVersion:int ->
+    ?maxAttendees:int ->
+    ?supportsAttachments:bool ->
     ?sendNotifications:bool ->
+    ?sendUpdates:SendUpdates.t ->
     calendarId:string ->
-    eventId:string ->
-    destination:string ->
+    GapiCalendarV3Model.Event.t ->
     GapiConversation.Session.t ->
     GapiCalendarV3Model.Event.t * GapiConversation.Session.t
   
@@ -645,42 +868,56 @@ Optional. The default is to return all entries.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param alwaysIncludeEmail Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.
+    @param custom_headers Optional HTTP custom headers.
+    @param sendNotifications Deprecated. Please use sendUpdates instead.
+
+Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false.
     @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
     @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
-    @param sendNotifications Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False.
+    @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
     @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False.
+    @param sendUpdates Guests who should receive notifications about the event update (for example, title changes, etc.).
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     @param eventId Event identifier.
     *)
   val patch :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    ?alwaysIncludeEmail:bool ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?sendNotifications:bool ->
     ?conferenceDataVersion:int ->
     ?maxAttendees:int ->
-    ?sendNotifications:bool ->
+    ?alwaysIncludeEmail:bool ->
     ?supportsAttachments:bool ->
+    ?sendUpdates:SendUpdates.t ->
     calendarId:string ->
     eventId:string ->
     GapiCalendarV3Model.Event.t ->
     GapiConversation.Session.t ->
     GapiCalendarV3Model.Event.t * GapiConversation.Session.t
   
-  (** Creates an event based on a simple text string.
+  (** Moves an event to another calendar, i.e. changes an event's organizer.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param sendNotifications Whether to send notifications about the creation of the event. Optional. The default is False.
-    @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
-    @param text The text describing the event to be created.
+    @param custom_headers Optional HTTP custom headers.
+    @param sendNotifications Deprecated. Please use sendUpdates instead.
+
+Whether to send notifications about the change of the event's organizer. Note that some emails might still be sent even if you set the value to false. The default is false.
+    @param sendUpdates Guests who should receive notifications about the change of the event's organizer.
+    @param calendarId Calendar identifier of the source calendar where the event currently is on.
+    @param eventId Event identifier.
+    @param destination Calendar identifier of the target calendar where the event is to be moved to.
     *)
-  val quickAdd :
+  val move :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
+    ?custom_headers:GapiCore.Header.t list ->
     ?sendNotifications:bool ->
+    ?sendUpdates:SendUpdates.t ->
     calendarId:string ->
-    text:string ->
+    eventId:string ->
+    destination:string ->
     GapiConversation.Session.t ->
     GapiCalendarV3Model.Event.t * GapiConversation.Session.t
   
@@ -688,168 +925,53 @@ Optional. The default is to return all entries.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param alwaysIncludeEmail Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.
+    @param custom_headers Optional HTTP custom headers.
     @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
-    @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
-    @param sendNotifications Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False.
+    @param sendNotifications Deprecated. Please use sendUpdates instead.
+
+Whether to send notifications about the event update (for example, description changes, etc.). Note that some emails might still be sent even if you set the value to false. The default is false.
     @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False.
+    @param sendUpdates Guests who should receive notifications about the event update (for example, title changes, etc.).
+    @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
+    @param alwaysIncludeEmail Deprecated and ignored. A value will always be returned in the email field for the organizer, creator and attendees, even if no real email address is available (i.e. a generated, non-working value will be provided).
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     @param eventId Event identifier.
     *)
   val update :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    ?alwaysIncludeEmail:bool ->
+    ?custom_headers:GapiCore.Header.t list ->
     ?conferenceDataVersion:int ->
-    ?maxAttendees:int ->
     ?sendNotifications:bool ->
     ?supportsAttachments:bool ->
+    ?sendUpdates:SendUpdates.t ->
+    ?maxAttendees:int ->
+    ?alwaysIncludeEmail:bool ->
     calendarId:string ->
     eventId:string ->
     GapiCalendarV3Model.Event.t ->
     GapiConversation.Session.t ->
     GapiCalendarV3Model.Event.t * GapiConversation.Session.t
   
-  (** Watch for changes to Events resources.
+  (** Imports an event. This operation is used to add a private copy of an existing event to a calendar.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
     @param std_params Optional standard parameters.
-    @param maxResults Maximum number of events returned on one result page. The number of events in the resulting page may be less than this value, or none at all, even if there are more events matching the query. Incomplete pages can be detected by a non-empty nextPageToken field in the response. By default the value is 250 events. The page size can never be larger than 2500 events. Optional.
-    @param alwaysIncludeEmail Whether to always include a value in the email field for the organizer, creator and attendees, even if no real email is available (i.e. a generated, non-working value will be provided). The use of this option is discouraged and should only be used by clients which cannot handle the absence of an email address value in the mentioned places. Optional. The default is False.
-    @param iCalUID Specifies event ID in the iCalendar format to be included in the response. Optional.
-    @param maxAttendees The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.
-    @param orderBy The order of the events returned in the result. Optional. The default is an unspecified, stable order.
-    @param pageToken Token specifying which result page to return. Optional.
-    @param privateExtendedProperty Extended properties constraint specified as propertyName=value. Matches only private properties. This parameter might be repeated multiple times to return events that match all given constraints.
-    @param q Free text search terms to find events that match these terms in any field, except for extended properties. Optional.
-    @param sharedExtendedProperty Extended properties constraint specified as propertyName=value. Matches only shared properties. This parameter might be repeated multiple times to return events that match all given constraints.
-    @param showDeleted Whether to include deleted events (with status equals "cancelled") in the result. Cancelled instances of recurring events (but not the underlying recurring event) will still be included if showDeleted and singleEvents are both False. If showDeleted and singleEvents are both True, only single instances of deleted events (but not the underlying recurring events) are returned. Optional. The default is False.
-    @param showHiddenInvitations Whether to include hidden invitations in the result. Optional. The default is False.
-    @param singleEvents Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.
-    @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then. All events deleted since the previous list request will always be in the result set and it is not allowed to set showDeleted to False.
-There are several query parameters that cannot be specified together with nextSyncToken to ensure consistency of the client state.
-
-These are: 
-- iCalUID 
-- orderBy 
-- privateExtendedProperty 
-- q 
-- sharedExtendedProperty 
-- timeMin 
-- timeMax 
-- updatedMin If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
-Learn more about incremental synchronization.
-Optional. The default is to return all entries.
-    @param timeMax Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored. If timeMin is set, timeMax must be greater than timeMin.
-    @param timeMin Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time. Must be an RFC3339 timestamp with mandatory time zone offset, e.g., 2011-06-03T10:00:00-07:00, 2011-06-03T10:00:00Z. Milliseconds may be provided but will be ignored. If timeMax is set, timeMin must be smaller than timeMax.
-    @param timeZone Time zone used in the response. Optional. The default is the time zone of the calendar.
-    @param updatedMin Lower bound for an event's last modification time (as a RFC3339 timestamp) to filter by. When specified, entries deleted since this time will always be included regardless of showDeleted. Optional. The default is not to filter by last modification time.
+    @param custom_headers Optional HTTP custom headers.
+    @param supportsAttachments Whether API client performing operation supports event attachments. Optional. The default is False.
+    @param conferenceDataVersion Version number of conference data supported by the API client. Version 0 assumes no conference data support and ignores conference data in the event's body. Version 1 enables support for copying of ConferenceData as well as for creating new conferences using the createRequest field of conferenceData. The default is 0.
     @param calendarId Calendar identifier. To retrieve calendar IDs call the calendarList.list method. If you want to access the primary calendar of the currently logged in user, use the "primary" keyword.
     *)
-  val watch :
+  val import :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    ?maxResults:int ->
-    ?alwaysIncludeEmail:bool ->
-    ?iCalUID:string ->
-    ?maxAttendees:int ->
-    ?orderBy:OrderBy.t ->
-    ?pageToken:string ->
-    ?privateExtendedProperty:string list ->
-    ?q:string ->
-    ?sharedExtendedProperty:string list ->
-    ?showDeleted:bool ->
-    ?showHiddenInvitations:bool ->
-    ?singleEvents:bool ->
-    ?syncToken:string ->
-    ?timeMax:GapiDate.t ->
-    ?timeMin:GapiDate.t ->
-    ?timeZone:string ->
-    ?updatedMin:GapiDate.t ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?supportsAttachments:bool ->
+    ?conferenceDataVersion:int ->
     calendarId:string ->
-    GapiCalendarV3Model.Channel.t ->
-    GapiConversation.Session.t ->
-    GapiCalendarV3Model.Channel.t * GapiConversation.Session.t
-  
-  
-end
-
-module FreebusyResource :
-sig
-  
-  (** Returns free/busy information for a set of calendars.
-    
-    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
-    @param std_params Optional standard parameters.
-    *)
-  val query :
-    ?base_url:string ->
-    ?std_params:GapiService.StandardParameters.t ->
-    GapiCalendarV3Model.FreeBusyRequest.t ->
-    GapiConversation.Session.t ->
-    GapiCalendarV3Model.FreeBusyResponse.t * GapiConversation.Session.t
-  
-  
-end
-
-module SettingsResource :
-sig
-  
-  (** Returns a single user setting.
-    
-    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
-    @param etag Optional ETag.
-    @param std_params Optional standard parameters.
-    @param setting The id of the user setting.
-    *)
-  val get :
-    ?base_url:string ->
-    ?etag:string ->
-    ?std_params:GapiService.StandardParameters.t ->
-    setting:string ->
-    GapiConversation.Session.t ->
-    GapiCalendarV3Model.Setting.t * GapiConversation.Session.t
-  
-  (** Returns all user settings for the authenticated user.
-    
-    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
-    @param std_params Optional standard parameters.
-    @param maxResults Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
-    @param pageToken Token specifying which result page to return. Optional.
-    @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.
-If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
-Learn more about incremental synchronization.
-Optional. The default is to return all entries.
-    *)
-  val list :
-    ?base_url:string ->
-    ?std_params:GapiService.StandardParameters.t ->
-    ?maxResults:int ->
-    ?pageToken:string ->
-    ?syncToken:string ->
-    GapiConversation.Session.t ->
-    GapiCalendarV3Model.Settings.t * GapiConversation.Session.t
-  
-  (** Watch for changes to Settings resources.
-    
-    @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/calendar/v3/"]).
-    @param std_params Optional standard parameters.
-    @param maxResults Maximum number of entries returned on one result page. By default the value is 100 entries. The page size can never be larger than 250 entries. Optional.
-    @param pageToken Token specifying which result page to return. Optional.
-    @param syncToken Token obtained from the nextSyncToken field returned on the last page of results from the previous list request. It makes the result of this list request contain only entries that have changed since then.
-If the syncToken expires, the server will respond with a 410 GONE response code and the client should clear its storage and perform a full synchronization without any syncToken.
-Learn more about incremental synchronization.
-Optional. The default is to return all entries.
-    *)
-  val watch :
-    ?base_url:string ->
-    ?std_params:GapiService.StandardParameters.t ->
-    ?maxResults:int ->
-    ?pageToken:string ->
-    ?syncToken:string ->
-    GapiCalendarV3Model.Channel.t ->
+    GapiCalendarV3Model.Event.t ->
     GapiConversation.Session.t ->
-    GapiCalendarV3Model.Channel.t * GapiConversation.Session.t
+    GapiCalendarV3Model.Event.t * GapiConversation.Session.t
   
   
 end
diff --git a/src/gapi/gapiCore.ml b/src/gapi/gapiCore.ml
index 1f7221f4..c0bf2fe0 100644
--- a/src/gapi/gapiCore.ml
+++ b/src/gapi/gapiCore.ml
@@ -1,4 +1,4 @@
-let library_version = "0.4.2"
+let library_version = "0.4.3"
 
 module AnnotatedTree = struct
   type ('a, 'b) t = Leaf of 'a * 'b | Node of 'a * ('a, 'b) t list
@@ -105,7 +105,7 @@ module Header = struct
     if String.contains full_header ':' then
       let key, v = GapiUtils.divide_string full_header ':' in
       let value = GapiUtils.strip_string v in
-      let lowercase_key = String.lowercase key in
+      let lowercase_key = String.lowercase key [@warning "-3"] in
       match lowercase_key with
       | "content-type" -> ContentType value
       | "location" -> Location value
diff --git a/src/gapi/gapiDiscoveryV1Model.ml b/src/gapi/gapiDiscoveryV1Model.ml
index c8846a3f..1f6b0528 100644
--- a/src/gapi/gapiDiscoveryV1Model.ml
+++ b/src/gapi/gapiDiscoveryV1Model.ml
@@ -1,7 +1,57 @@
-(* Warning! This file is generated. Modify at your own risk. *)
+(* Warning! This file is generated. Modify at your own risk.
+        *)
 
 module JsonSchema =
 struct
+  module Annotations =
+  struct
+    type t = {
+      required : string list;
+      
+    }
+    
+    let required = {
+      GapiLens.get = (fun x -> x.required);
+      GapiLens.set = (fun v x -> { x with required = v });
+    }
+    
+    let empty = {
+      required = [];
+      
+    }
+    
+    let rec render_content x = 
+       [
+        GapiJson.render_array "required" (GapiJson.render_string_value "") x.required;
+        
+      ]
+    and render x = 
+      GapiJson.render_object "" (render_content x)
+    
+    let rec parse x = function
+      | GapiCore.AnnotatedTree.Node
+          ({ GapiJson.name = "required"; data_type = GapiJson.Array },
+          cs) ->
+        GapiJson.parse_collection
+          (fun x' -> function
+            | GapiCore.AnnotatedTree.Leaf
+                ({ GapiJson.name = ""; data_type = GapiJson.Scalar },
+                `String v) ->
+              v
+            | e ->
+              GapiJson.unexpected "GapiDiscoveryV1Model.Annotations.parse.parse_collection" e x')
+          ""
+          (fun v -> { x with required = v })
+          cs
+      | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = ""; data_type = GapiJson.Object },
+        cs) ->
+        GapiJson.parse_children parse empty (fun x -> x) cs
+      | e ->
+        GapiJson.unexpected "GapiDiscoveryV1Model.Annotations.parse" e x
+    
+  end
+  
   module Variant =
   struct
     module Map =
@@ -55,40 +105,36 @@ struct
     end
     
     type t = {
-      discriminant : string;
       map : Map.t list;
+      discriminant : string;
       
     }
     
-    let discriminant = {
-      GapiLens.get = (fun x -> x.discriminant);
-      GapiLens.set = (fun v x -> { x with discriminant = v });
-    }
     let map = {
       GapiLens.get = (fun x -> x.map);
       GapiLens.set = (fun v x -> { x with map = v });
     }
+    let discriminant = {
+      GapiLens.get = (fun x -> x.discriminant);
+      GapiLens.set = (fun v x -> { x with discriminant = v });
+    }
     
     let empty = {
-      discriminant = "";
       map = [];
+      discriminant = "";
       
     }
     
     let rec render_content x = 
        [
-        GapiJson.render_string_value "discriminant" x.discriminant;
         GapiJson.render_array "map" Map.render x.map;
+        GapiJson.render_string_value "discriminant" x.discriminant;
         
       ]
     and render x = 
       GapiJson.render_object "" (render_content x)
     
     let rec parse x = function
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "discriminant"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with discriminant = v }
       | GapiCore.AnnotatedTree.Node
           ({ GapiJson.name = "map"; data_type = GapiJson.Array },
           cs) ->
@@ -103,6 +149,10 @@ struct
           Map.empty
           (fun v -> { x with map = v })
           cs
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "discriminant"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with discriminant = v }
       | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = ""; data_type = GapiJson.Object },
         cs) ->
@@ -112,240 +162,195 @@ struct
     
   end
   
-  module Annotations =
-  struct
-    type t = {
-      required : string list;
-      
-    }
-    
-    let required = {
-      GapiLens.get = (fun x -> x.required);
-      GapiLens.set = (fun v x -> { x with required = v });
-    }
-    
-    let empty = {
-      required = [];
-      
-    }
-    
-    let rec render_content x = 
-       [
-        GapiJson.render_array "required" (GapiJson.render_string_value "") x.required;
-        
-      ]
-    and render x = 
-      GapiJson.render_object "" (render_content x)
-    
-    let rec parse x = function
-      | GapiCore.AnnotatedTree.Node
-          ({ GapiJson.name = "required"; data_type = GapiJson.Array },
-          cs) ->
-        GapiJson.parse_collection
-          (fun x' -> function
-            | GapiCore.AnnotatedTree.Leaf
-                ({ GapiJson.name = ""; data_type = GapiJson.Scalar },
-                `String v) ->
-              v
-            | e ->
-              GapiJson.unexpected "GapiDiscoveryV1Model.Annotations.parse.parse_collection" e x')
-          ""
-          (fun v -> { x with required = v })
-          cs
-      | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = ""; data_type = GapiJson.Object },
-        cs) ->
-        GapiJson.parse_children parse empty (fun x -> x) cs
-      | e ->
-        GapiJson.unexpected "GapiDiscoveryV1Model.Annotations.parse" e x
-    
-  end
-  
   type t = {
+    items : t option;
+    repeated : bool;
+    variant : Variant.t;
+    pattern : string;
+    maximum : string;
+    location : string;
+    enum : string list;
     _ref : string;
-    additionalProperties : t option;
+    _type : string;
     annotations : Annotations.t;
+    required : bool;
     default : string;
+    minimum : string;
     description : string;
-    enum : string list;
     enumDescriptions : string list;
-    format : string;
+    readOnly : bool;
     id : string;
-    items : t option;
-    location : string;
-    maximum : string;
-    minimum : string;
-    pattern : string;
+    format : string;
+    additionalProperties : t option;
     properties : (string * t) list;
-    readOnly : bool;
-    repeated : bool;
-    required : bool;
-    _type : string;
-    variant : Variant.t;
     
   }
   
+  let items = {
+    GapiLens.get = (fun x -> x.items);
+    GapiLens.set = (fun v x -> { x with items = v });
+  }
+  let repeated = {
+    GapiLens.get = (fun x -> x.repeated);
+    GapiLens.set = (fun v x -> { x with repeated = v });
+  }
+  let variant = {
+    GapiLens.get = (fun x -> x.variant);
+    GapiLens.set = (fun v x -> { x with variant = v });
+  }
+  let pattern = {
+    GapiLens.get = (fun x -> x.pattern);
+    GapiLens.set = (fun v x -> { x with pattern = v });
+  }
+  let maximum = {
+    GapiLens.get = (fun x -> x.maximum);
+    GapiLens.set = (fun v x -> { x with maximum = v });
+  }
+  let location = {
+    GapiLens.get = (fun x -> x.location);
+    GapiLens.set = (fun v x -> { x with location = v });
+  }
+  let enum = {
+    GapiLens.get = (fun x -> x.enum);
+    GapiLens.set = (fun v x -> { x with enum = v });
+  }
   let _ref = {
     GapiLens.get = (fun x -> x._ref);
     GapiLens.set = (fun v x -> { x with _ref = v });
   }
-  let additionalProperties = {
-    GapiLens.get = (fun x -> x.additionalProperties);
-    GapiLens.set = (fun v x -> { x with additionalProperties = v });
+  let _type = {
+    GapiLens.get = (fun x -> x._type);
+    GapiLens.set = (fun v x -> { x with _type = v });
   }
   let annotations = {
     GapiLens.get = (fun x -> x.annotations);
     GapiLens.set = (fun v x -> { x with annotations = v });
   }
+  let required = {
+    GapiLens.get = (fun x -> x.required);
+    GapiLens.set = (fun v x -> { x with required = v });
+  }
   let default = {
     GapiLens.get = (fun x -> x.default);
     GapiLens.set = (fun v x -> { x with default = v });
   }
+  let minimum = {
+    GapiLens.get = (fun x -> x.minimum);
+    GapiLens.set = (fun v x -> { x with minimum = v });
+  }
   let description = {
     GapiLens.get = (fun x -> x.description);
     GapiLens.set = (fun v x -> { x with description = v });
   }
-  let enum = {
-    GapiLens.get = (fun x -> x.enum);
-    GapiLens.set = (fun v x -> { x with enum = v });
-  }
   let enumDescriptions = {
     GapiLens.get = (fun x -> x.enumDescriptions);
     GapiLens.set = (fun v x -> { x with enumDescriptions = v });
   }
-  let format = {
-    GapiLens.get = (fun x -> x.format);
-    GapiLens.set = (fun v x -> { x with format = v });
+  let readOnly = {
+    GapiLens.get = (fun x -> x.readOnly);
+    GapiLens.set = (fun v x -> { x with readOnly = v });
   }
   let id = {
     GapiLens.get = (fun x -> x.id);
     GapiLens.set = (fun v x -> { x with id = v });
   }
-  let items = {
-    GapiLens.get = (fun x -> x.items);
-    GapiLens.set = (fun v x -> { x with items = v });
-  }
-  let location = {
-    GapiLens.get = (fun x -> x.location);
-    GapiLens.set = (fun v x -> { x with location = v });
-  }
-  let maximum = {
-    GapiLens.get = (fun x -> x.maximum);
-    GapiLens.set = (fun v x -> { x with maximum = v });
-  }
-  let minimum = {
-    GapiLens.get = (fun x -> x.minimum);
-    GapiLens.set = (fun v x -> { x with minimum = v });
+  let format = {
+    GapiLens.get = (fun x -> x.format);
+    GapiLens.set = (fun v x -> { x with format = v });
   }
-  let pattern = {
-    GapiLens.get = (fun x -> x.pattern);
-    GapiLens.set = (fun v x -> { x with pattern = v });
+  let additionalProperties = {
+    GapiLens.get = (fun x -> x.additionalProperties);
+    GapiLens.set = (fun v x -> { x with additionalProperties = v });
   }
   let properties = {
     GapiLens.get = (fun x -> x.properties);
     GapiLens.set = (fun v x -> { x with properties = v });
   }
-  let readOnly = {
-    GapiLens.get = (fun x -> x.readOnly);
-    GapiLens.set = (fun v x -> { x with readOnly = v });
-  }
-  let repeated = {
-    GapiLens.get = (fun x -> x.repeated);
-    GapiLens.set = (fun v x -> { x with repeated = v });
-  }
-  let required = {
-    GapiLens.get = (fun x -> x.required);
-    GapiLens.set = (fun v x -> { x with required = v });
-  }
-  let _type = {
-    GapiLens.get = (fun x -> x._type);
-    GapiLens.set = (fun v x -> { x with _type = v });
-  }
-  let variant = {
-    GapiLens.get = (fun x -> x.variant);
-    GapiLens.set = (fun v x -> { x with variant = v });
-  }
   
   let empty = {
+    items = None;
+    repeated = false;
+    variant = Variant.empty;
+    pattern = "";
+    maximum = "";
+    location = "";
+    enum = [];
     _ref = "";
-    additionalProperties = None;
+    _type = "";
     annotations = Annotations.empty;
+    required = false;
     default = "";
+    minimum = "";
     description = "";
-    enum = [];
     enumDescriptions = [];
-    format = "";
+    readOnly = false;
     id = "";
-    items = None;
-    location = "";
-    maximum = "";
-    minimum = "";
-    pattern = "";
+    format = "";
+    additionalProperties = None;
     properties = [];
-    readOnly = false;
-    repeated = false;
-    required = false;
-    _type = "";
-    variant = Variant.empty;
     
   }
   
   let rec render_content x = 
      [
+      GapiUtils.option_map_default (fun v -> GapiJson.render_object "items" (render_content v)) [] x.items;
+      GapiJson.render_bool_value "repeated" x.repeated;
+      (fun v -> GapiJson.render_object "variant" (Variant.render_content v)) x.variant;
+      GapiJson.render_string_value "pattern" x.pattern;
+      GapiJson.render_string_value "maximum" x.maximum;
+      GapiJson.render_string_value "location" x.location;
+      GapiJson.render_array "enum" (GapiJson.render_string_value "") x.enum;
       GapiJson.render_string_value "$ref" x._ref;
-      GapiUtils.option_map_default (fun v -> GapiJson.render_object "additionalProperties" (render_content v)) [] x.additionalProperties;
+      GapiJson.render_string_value "type" x._type;
       (fun v -> GapiJson.render_object "annotations" (Annotations.render_content v)) x.annotations;
+      GapiJson.render_bool_value "required" x.required;
       GapiJson.render_string_value "default" x.default;
+      GapiJson.render_string_value "minimum" x.minimum;
       GapiJson.render_string_value "description" x.description;
-      GapiJson.render_array "enum" (GapiJson.render_string_value "") x.enum;
       GapiJson.render_array "enumDescriptions" (GapiJson.render_string_value "") x.enumDescriptions;
-      GapiJson.render_string_value "format" x.format;
+      GapiJson.render_bool_value "readOnly" x.readOnly;
       GapiJson.render_string_value "id" x.id;
-      GapiUtils.option_map_default (fun v -> GapiJson.render_object "items" (render_content v)) [] x.items;
-      GapiJson.render_string_value "location" x.location;
-      GapiJson.render_string_value "maximum" x.maximum;
-      GapiJson.render_string_value "minimum" x.minimum;
-      GapiJson.render_string_value "pattern" x.pattern;
+      GapiJson.render_string_value "format" x.format;
+      GapiUtils.option_map_default (fun v -> GapiJson.render_object "additionalProperties" (render_content v)) [] x.additionalProperties;
       GapiJson.render_collection "properties" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (render_content v)) v) x.properties;
-      GapiJson.render_bool_value "readOnly" x.readOnly;
-      GapiJson.render_bool_value "repeated" x.repeated;
-      GapiJson.render_bool_value "required" x.required;
-      GapiJson.render_string_value "type" x._type;
-      (fun v -> GapiJson.render_object "variant" (Variant.render_content v)) x.variant;
       
     ]
   and render x = 
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "$ref"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with _ref = v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "additionalProperties"; data_type = GapiJson.Object },
+        ({ GapiJson.name = "items"; data_type = GapiJson.Object },
         cs) ->
       GapiJson.parse_children
         parse
         empty
-        (fun v -> { x with additionalProperties = Some v })
+        (fun v -> { x with items = Some v })
         cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "repeated"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with repeated = v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "annotations"; data_type = GapiJson.Object },
+        ({ GapiJson.name = "variant"; data_type = GapiJson.Object },
         cs) ->
       GapiJson.parse_children
-        Annotations.parse
-        Annotations.empty
-        (fun v -> { x with annotations = v })
+        Variant.parse
+        Variant.empty
+        (fun v -> { x with variant = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "default"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "pattern"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with default = v }
+      { x with pattern = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "maximum"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with description = v }
+      { x with maximum = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "location"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with location = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "enum"; data_type = GapiJson.Array },
         cs) ->
@@ -360,6 +365,38 @@ struct
         ""
         (fun v -> { x with enum = v })
         cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "$ref"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with _ref = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "type"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with _type = v }
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "annotations"; data_type = GapiJson.Object },
+        cs) ->
+      GapiJson.parse_children
+        Annotations.parse
+        Annotations.empty
+        (fun v -> { x with annotations = v })
+        cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "required"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with required = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "default"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with default = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "minimum"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with minimum = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with description = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "enumDescriptions"; data_type = GapiJson.Array },
         cs) ->
@@ -375,37 +412,25 @@ struct
         (fun v -> { x with enumDescriptions = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "format"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with format = v }
+        ({ GapiJson.name = "readOnly"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with readOnly = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with id = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "format"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with format = v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "items"; data_type = GapiJson.Object },
+        ({ GapiJson.name = "additionalProperties"; data_type = GapiJson.Object },
         cs) ->
       GapiJson.parse_children
         parse
         empty
-        (fun v -> { x with items = Some v })
+        (fun v -> { x with additionalProperties = Some v })
         cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "location"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with location = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "maximum"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with maximum = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "minimum"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with minimum = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "pattern"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with pattern = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "properties"; data_type = GapiJson.Object },
         cs) ->
@@ -420,30 +445,6 @@ struct
         ("", empty)
         (fun v -> { x with properties = v })
         cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "readOnly"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with readOnly = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "repeated"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with repeated = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "required"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with required = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "type"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with _type = v }
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "variant"; data_type = GapiJson.Object },
-        cs) ->
-      GapiJson.parse_children
-        Variant.parse
-        Variant.empty
-        (fun v -> { x with variant = v })
-        cs
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
@@ -512,100 +513,100 @@ struct
     end
     
     type t = {
-      description : string;
-      discoveryLink : string;
-      discoveryRestUrl : string;
-      documentationLink : string;
-      icons : Icons.t;
+      title : string;
       id : string;
-      kind : string;
       labels : string list;
+      description : string;
+      icons : Icons.t;
       name : string;
+      kind : string;
+      documentationLink : string;
+      discoveryLink : string;
       preferred : bool;
-      title : string;
       version : string;
+      discoveryRestUrl : string;
       
     }
     
-    let description = {
-      GapiLens.get = (fun x -> x.description);
-      GapiLens.set = (fun v x -> { x with description = v });
+    let title = {
+      GapiLens.get = (fun x -> x.title);
+      GapiLens.set = (fun v x -> { x with title = v });
     }
-    let discoveryLink = {
-      GapiLens.get = (fun x -> x.discoveryLink);
-      GapiLens.set = (fun v x -> { x with discoveryLink = v });
+    let id = {
+      GapiLens.get = (fun x -> x.id);
+      GapiLens.set = (fun v x -> { x with id = v });
     }
-    let discoveryRestUrl = {
-      GapiLens.get = (fun x -> x.discoveryRestUrl);
-      GapiLens.set = (fun v x -> { x with discoveryRestUrl = v });
+    let labels = {
+      GapiLens.get = (fun x -> x.labels);
+      GapiLens.set = (fun v x -> { x with labels = v });
     }
-    let documentationLink = {
-      GapiLens.get = (fun x -> x.documentationLink);
-      GapiLens.set = (fun v x -> { x with documentationLink = v });
+    let description = {
+      GapiLens.get = (fun x -> x.description);
+      GapiLens.set = (fun v x -> { x with description = v });
     }
     let icons = {
       GapiLens.get = (fun x -> x.icons);
       GapiLens.set = (fun v x -> { x with icons = v });
     }
-    let id = {
-      GapiLens.get = (fun x -> x.id);
-      GapiLens.set = (fun v x -> { x with id = v });
+    let name = {
+      GapiLens.get = (fun x -> x.name);
+      GapiLens.set = (fun v x -> { x with name = v });
     }
     let kind = {
       GapiLens.get = (fun x -> x.kind);
       GapiLens.set = (fun v x -> { x with kind = v });
     }
-    let labels = {
-      GapiLens.get = (fun x -> x.labels);
-      GapiLens.set = (fun v x -> { x with labels = v });
+    let documentationLink = {
+      GapiLens.get = (fun x -> x.documentationLink);
+      GapiLens.set = (fun v x -> { x with documentationLink = v });
     }
-    let name = {
-      GapiLens.get = (fun x -> x.name);
-      GapiLens.set = (fun v x -> { x with name = v });
+    let discoveryLink = {
+      GapiLens.get = (fun x -> x.discoveryLink);
+      GapiLens.set = (fun v x -> { x with discoveryLink = v });
     }
     let preferred = {
       GapiLens.get = (fun x -> x.preferred);
       GapiLens.set = (fun v x -> { x with preferred = v });
     }
-    let title = {
-      GapiLens.get = (fun x -> x.title);
-      GapiLens.set = (fun v x -> { x with title = v });
-    }
     let version = {
       GapiLens.get = (fun x -> x.version);
       GapiLens.set = (fun v x -> { x with version = v });
     }
+    let discoveryRestUrl = {
+      GapiLens.get = (fun x -> x.discoveryRestUrl);
+      GapiLens.set = (fun v x -> { x with discoveryRestUrl = v });
+    }
     
     let empty = {
-      description = "";
-      discoveryLink = "";
-      discoveryRestUrl = "";
-      documentationLink = "";
-      icons = Icons.empty;
+      title = "";
       id = "";
-      kind = "";
       labels = [];
+      description = "";
+      icons = Icons.empty;
       name = "";
+      kind = "";
+      documentationLink = "";
+      discoveryLink = "";
       preferred = false;
-      title = "";
       version = "";
+      discoveryRestUrl = "";
       
     }
     
     let rec render_content x = 
        [
-        GapiJson.render_string_value "description" x.description;
-        GapiJson.render_string_value "discoveryLink" x.discoveryLink;
-        GapiJson.render_string_value "discoveryRestUrl" x.discoveryRestUrl;
-        GapiJson.render_string_value "documentationLink" x.documentationLink;
-        (fun v -> GapiJson.render_object "icons" (Icons.render_content v)) x.icons;
+        GapiJson.render_string_value "title" x.title;
         GapiJson.render_string_value "id" x.id;
-        GapiJson.render_string_value "kind" x.kind;
         GapiJson.render_array "labels" (GapiJson.render_string_value "") x.labels;
+        GapiJson.render_string_value "description" x.description;
+        (fun v -> GapiJson.render_object "icons" (Icons.render_content v)) x.icons;
         GapiJson.render_string_value "name" x.name;
+        GapiJson.render_string_value "kind" x.kind;
+        GapiJson.render_string_value "documentationLink" x.documentationLink;
+        GapiJson.render_string_value "discoveryLink" x.discoveryLink;
         GapiJson.render_bool_value "preferred" x.preferred;
-        GapiJson.render_string_value "title" x.title;
         GapiJson.render_string_value "version" x.version;
+        GapiJson.render_string_value "discoveryRestUrl" x.discoveryRestUrl;
         
       ]
     and render x = 
@@ -613,37 +614,13 @@ struct
     
     let rec parse x = function
       | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
+          ({ GapiJson.name = "title"; data_type = GapiJson.Scalar },
           `String v) ->
-        { x with description = v }
+        { x with title = v }
       | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "discoveryLink"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with discoveryLink = v }
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "discoveryRestUrl"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with discoveryRestUrl = v }
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "documentationLink"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with documentationLink = v }
-      | GapiCore.AnnotatedTree.Node
-          ({ GapiJson.name = "icons"; data_type = GapiJson.Object },
-          cs) ->
-        GapiJson.parse_children
-          Icons.parse
-          Icons.empty
-          (fun v -> { x with icons = v })
-          cs
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
+          ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
           `String v) ->
         { x with id = v }
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with kind = v }
       | GapiCore.AnnotatedTree.Node
           ({ GapiJson.name = "labels"; data_type = GapiJson.Array },
           cs) ->
@@ -658,22 +635,46 @@ struct
           ""
           (fun v -> { x with labels = v })
           cs
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with description = v }
+      | GapiCore.AnnotatedTree.Node
+          ({ GapiJson.name = "icons"; data_type = GapiJson.Object },
+          cs) ->
+        GapiJson.parse_children
+          Icons.parse
+          Icons.empty
+          (fun v -> { x with icons = v })
+          cs
       | GapiCore.AnnotatedTree.Leaf
           ({ GapiJson.name = "name"; data_type = GapiJson.Scalar },
           `String v) ->
         { x with name = v }
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with kind = v }
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "documentationLink"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with documentationLink = v }
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "discoveryLink"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with discoveryLink = v }
       | GapiCore.AnnotatedTree.Leaf
           ({ GapiJson.name = "preferred"; data_type = GapiJson.Scalar },
           `Bool v) ->
         { x with preferred = v }
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "title"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with title = v }
       | GapiCore.AnnotatedTree.Leaf
           ({ GapiJson.name = "version"; data_type = GapiJson.Scalar },
           `String v) ->
         { x with version = v }
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "discoveryRestUrl"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with discoveryRestUrl = v }
       | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = ""; data_type = GapiJson.Object },
         cs) ->
@@ -684,12 +685,16 @@ struct
   end
   
   type t = {
+    kind : string;
     discoveryVersion : string;
     items : Items.t list;
-    kind : string;
     
   }
   
+  let kind = {
+    GapiLens.get = (fun x -> x.kind);
+    GapiLens.set = (fun v x -> { x with kind = v });
+  }
   let discoveryVersion = {
     GapiLens.get = (fun x -> x.discoveryVersion);
     GapiLens.set = (fun v x -> { x with discoveryVersion = v });
@@ -698,29 +703,29 @@ struct
     GapiLens.get = (fun x -> x.items);
     GapiLens.set = (fun v x -> { x with items = v });
   }
-  let kind = {
-    GapiLens.get = (fun x -> x.kind);
-    GapiLens.set = (fun v x -> { x with kind = v });
-  }
   
   let empty = {
+    kind = "";
     discoveryVersion = "";
     items = [];
-    kind = "";
     
   }
   
   let rec render_content x = 
      [
+      GapiJson.render_string_value "kind" x.kind;
       GapiJson.render_string_value "discoveryVersion" x.discoveryVersion;
       GapiJson.render_array "items" Items.render x.items;
-      GapiJson.render_string_value "kind" x.kind;
       
     ]
   and render x = 
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with kind = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "discoveryVersion"; data_type = GapiJson.Scalar },
         `String v) ->
@@ -739,10 +744,6 @@ struct
         Items.empty
         (fun v -> { x with items = v })
         cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with kind = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
@@ -758,100 +759,11 @@ end
 
 module RestMethod =
 struct
-  module Response =
-  struct
-    type t = {
-      _ref : string;
-      
-    }
-    
-    let _ref = {
-      GapiLens.get = (fun x -> x._ref);
-      GapiLens.set = (fun v x -> { x with _ref = v });
-    }
-    
-    let empty = {
-      _ref = "";
-      
-    }
-    
-    let rec render_content x = 
-       [
-        GapiJson.render_string_value "$ref" x._ref;
-        
-      ]
-    and render x = 
-      GapiJson.render_object "" (render_content x)
-    
-    let rec parse x = function
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "$ref"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with _ref = v }
-      | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = ""; data_type = GapiJson.Object },
-        cs) ->
-        GapiJson.parse_children parse empty (fun x -> x) cs
-      | e ->
-        GapiJson.unexpected "GapiDiscoveryV1Model.Response.parse" e x
-    
-  end
-  
-  module Request =
-  struct
-    type t = {
-      _ref : string;
-      parameterName : string;
-      
-    }
-    
-    let _ref = {
-      GapiLens.get = (fun x -> x._ref);
-      GapiLens.set = (fun v x -> { x with _ref = v });
-    }
-    let parameterName = {
-      GapiLens.get = (fun x -> x.parameterName);
-      GapiLens.set = (fun v x -> { x with parameterName = v });
-    }
-    
-    let empty = {
-      _ref = "";
-      parameterName = "";
-      
-    }
-    
-    let rec render_content x = 
-       [
-        GapiJson.render_string_value "$ref" x._ref;
-        GapiJson.render_string_value "parameterName" x.parameterName;
-        
-      ]
-    and render x = 
-      GapiJson.render_object "" (render_content x)
-    
-    let rec parse x = function
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "$ref"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with _ref = v }
-      | GapiCore.AnnotatedTree.Leaf
-          ({ GapiJson.name = "parameterName"; data_type = GapiJson.Scalar },
-          `String v) ->
-        { x with parameterName = v }
-      | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = ""; data_type = GapiJson.Object },
-        cs) ->
-        GapiJson.parse_children parse empty (fun x -> x) cs
-      | e ->
-        GapiJson.unexpected "GapiDiscoveryV1Model.Request.parse" e x
-    
-  end
-  
   module MediaUpload =
   struct
     module Protocols =
     struct
-      module Simple =
+      module Resumable =
       struct
         type t = {
           multipart : bool;
@@ -897,99 +809,91 @@ struct
             cs) ->
             GapiJson.parse_children parse empty (fun x -> x) cs
           | e ->
-            GapiJson.unexpected "GapiDiscoveryV1Model.Simple.parse" e x
+            GapiJson.unexpected "GapiDiscoveryV1Model.Resumable.parse" e x
         
       end
       
-      module Resumable =
+      module Simple =
       struct
         type t = {
-          multipart : bool;
           path : string;
+          multipart : bool;
           
         }
         
-        let multipart = {
-          GapiLens.get = (fun x -> x.multipart);
-          GapiLens.set = (fun v x -> { x with multipart = v });
-        }
         let path = {
           GapiLens.get = (fun x -> x.path);
           GapiLens.set = (fun v x -> { x with path = v });
         }
+        let multipart = {
+          GapiLens.get = (fun x -> x.multipart);
+          GapiLens.set = (fun v x -> { x with multipart = v });
+        }
         
         let empty = {
-          multipart = false;
           path = "";
+          multipart = false;
           
         }
         
         let rec render_content x = 
            [
-            GapiJson.render_bool_value "multipart" x.multipart;
             GapiJson.render_string_value "path" x.path;
+            GapiJson.render_bool_value "multipart" x.multipart;
             
           ]
         and render x = 
           GapiJson.render_object "" (render_content x)
         
         let rec parse x = function
-          | GapiCore.AnnotatedTree.Leaf
-              ({ GapiJson.name = "multipart"; data_type = GapiJson.Scalar },
-              `Bool v) ->
-            { x with multipart = v }
           | GapiCore.AnnotatedTree.Leaf
               ({ GapiJson.name = "path"; data_type = GapiJson.Scalar },
               `String v) ->
             { x with path = v }
+          | GapiCore.AnnotatedTree.Leaf
+              ({ GapiJson.name = "multipart"; data_type = GapiJson.Scalar },
+              `Bool v) ->
+            { x with multipart = v }
           | GapiCore.AnnotatedTree.Node
             ({ GapiJson.name = ""; data_type = GapiJson.Object },
             cs) ->
             GapiJson.parse_children parse empty (fun x -> x) cs
           | e ->
-            GapiJson.unexpected "GapiDiscoveryV1Model.Resumable.parse" e x
+            GapiJson.unexpected "GapiDiscoveryV1Model.Simple.parse" e x
         
       end
       
       type t = {
-        resumable : Resumable.t;
         simple : Simple.t;
+        resumable : Resumable.t;
         
       }
       
-      let resumable = {
-        GapiLens.get = (fun x -> x.resumable);
-        GapiLens.set = (fun v x -> { x with resumable = v });
-      }
       let simple = {
         GapiLens.get = (fun x -> x.simple);
         GapiLens.set = (fun v x -> { x with simple = v });
       }
+      let resumable = {
+        GapiLens.get = (fun x -> x.resumable);
+        GapiLens.set = (fun v x -> { x with resumable = v });
+      }
       
       let empty = {
-        resumable = Resumable.empty;
         simple = Simple.empty;
+        resumable = Resumable.empty;
         
       }
       
       let rec render_content x = 
          [
-          (fun v -> GapiJson.render_object "resumable" (Resumable.render_content v)) x.resumable;
           (fun v -> GapiJson.render_object "simple" (Simple.render_content v)) x.simple;
+          (fun v -> GapiJson.render_object "resumable" (Resumable.render_content v)) x.resumable;
           
         ]
       and render x = 
         GapiJson.render_object "" (render_content x)
       
       let rec parse x = function
-        | GapiCore.AnnotatedTree.Node
-            ({ GapiJson.name = "resumable"; data_type = GapiJson.Object },
-            cs) ->
-          GapiJson.parse_children
-            Resumable.parse
-            Resumable.empty
-            (fun v -> { x with resumable = v })
-            cs
         | GapiCore.AnnotatedTree.Node
             ({ GapiJson.name = "simple"; data_type = GapiJson.Object },
             cs) ->
@@ -998,6 +902,14 @@ struct
             Simple.empty
             (fun v -> { x with simple = v })
             cs
+        | GapiCore.AnnotatedTree.Node
+            ({ GapiJson.name = "resumable"; data_type = GapiJson.Object },
+            cs) ->
+          GapiJson.parse_children
+            Resumable.parse
+            Resumable.empty
+            (fun v -> { x with resumable = v })
+            cs
         | GapiCore.AnnotatedTree.Node
           ({ GapiJson.name = ""; data_type = GapiJson.Object },
           cs) ->
@@ -1008,12 +920,16 @@ struct
     end
     
     type t = {
+      protocols : Protocols.t;
       accept : string list;
       maxSize : string;
-      protocols : Protocols.t;
       
     }
     
+    let protocols = {
+      GapiLens.get = (fun x -> x.protocols);
+      GapiLens.set = (fun v x -> { x with protocols = v });
+    }
     let accept = {
       GapiLens.get = (fun x -> x.accept);
       GapiLens.set = (fun v x -> { x with accept = v });
@@ -1022,29 +938,33 @@ struct
       GapiLens.get = (fun x -> x.maxSize);
       GapiLens.set = (fun v x -> { x with maxSize = v });
     }
-    let protocols = {
-      GapiLens.get = (fun x -> x.protocols);
-      GapiLens.set = (fun v x -> { x with protocols = v });
-    }
     
     let empty = {
+      protocols = Protocols.empty;
       accept = [];
       maxSize = "";
-      protocols = Protocols.empty;
       
     }
     
     let rec render_content x = 
        [
+        (fun v -> GapiJson.render_object "protocols" (Protocols.render_content v)) x.protocols;
         GapiJson.render_array "accept" (GapiJson.render_string_value "") x.accept;
         GapiJson.render_string_value "maxSize" x.maxSize;
-        (fun v -> GapiJson.render_object "protocols" (Protocols.render_content v)) x.protocols;
         
       ]
     and render x = 
       GapiJson.render_object "" (render_content x)
     
     let rec parse x = function
+      | GapiCore.AnnotatedTree.Node
+          ({ GapiJson.name = "protocols"; data_type = GapiJson.Object },
+          cs) ->
+        GapiJson.parse_children
+          Protocols.parse
+          Protocols.empty
+          (fun v -> { x with protocols = v })
+          cs
       | GapiCore.AnnotatedTree.Node
           ({ GapiJson.name = "accept"; data_type = GapiJson.Array },
           cs) ->
@@ -1063,14 +983,6 @@ struct
           ({ GapiJson.name = "maxSize"; data_type = GapiJson.Scalar },
           `String v) ->
         { x with maxSize = v }
-      | GapiCore.AnnotatedTree.Node
-          ({ GapiJson.name = "protocols"; data_type = GapiJson.Object },
-          cs) ->
-        GapiJson.parse_children
-          Protocols.parse
-          Protocols.empty
-          (fun v -> { x with protocols = v })
-          cs
       | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = ""; data_type = GapiJson.Object },
         cs) ->
@@ -1080,80 +992,174 @@ struct
     
   end
   
-  type t = {
-    description : string;
+  module Request =
+  struct
+    type t = {
+      parameterName : string;
+      _ref : string;
+      
+    }
+    
+    let parameterName = {
+      GapiLens.get = (fun x -> x.parameterName);
+      GapiLens.set = (fun v x -> { x with parameterName = v });
+    }
+    let _ref = {
+      GapiLens.get = (fun x -> x._ref);
+      GapiLens.set = (fun v x -> { x with _ref = v });
+    }
+    
+    let empty = {
+      parameterName = "";
+      _ref = "";
+      
+    }
+    
+    let rec render_content x = 
+       [
+        GapiJson.render_string_value "parameterName" x.parameterName;
+        GapiJson.render_string_value "$ref" x._ref;
+        
+      ]
+    and render x = 
+      GapiJson.render_object "" (render_content x)
+    
+    let rec parse x = function
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "parameterName"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with parameterName = v }
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "$ref"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with _ref = v }
+      | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = ""; data_type = GapiJson.Object },
+        cs) ->
+        GapiJson.parse_children parse empty (fun x -> x) cs
+      | e ->
+        GapiJson.unexpected "GapiDiscoveryV1Model.Request.parse" e x
+    
+  end
+  
+  module Response =
+  struct
+    type t = {
+      _ref : string;
+      
+    }
+    
+    let _ref = {
+      GapiLens.get = (fun x -> x._ref);
+      GapiLens.set = (fun v x -> { x with _ref = v });
+    }
+    
+    let empty = {
+      _ref = "";
+      
+    }
+    
+    let rec render_content x = 
+       [
+        GapiJson.render_string_value "$ref" x._ref;
+        
+      ]
+    and render x = 
+      GapiJson.render_object "" (render_content x)
+    
+    let rec parse x = function
+      | GapiCore.AnnotatedTree.Leaf
+          ({ GapiJson.name = "$ref"; data_type = GapiJson.Scalar },
+          `String v) ->
+        { x with _ref = v }
+      | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = ""; data_type = GapiJson.Object },
+        cs) ->
+        GapiJson.parse_children parse empty (fun x -> x) cs
+      | e ->
+        GapiJson.unexpected "GapiDiscoveryV1Model.Response.parse" e x
+    
+  end
+  
+  type t = {
     etagRequired : bool;
-    httpMethod : string;
+    description : string;
+    response : Response.t;
     id : string;
-    mediaUpload : MediaUpload.t;
-    parameterOrder : string list;
     parameters : (string * JsonSchema.t) list;
-    path : string;
-    request : Request.t;
-    response : Response.t;
-    scopes : string list;
+    supportsSubscription : bool;
+    parameterOrder : string list;
+    flatPath : string;
     supportsMediaDownload : bool;
+    httpMethod : string;
+    request : Request.t;
+    path : string;
     supportsMediaUpload : bool;
-    supportsSubscription : bool;
+    scopes : string list;
+    mediaUpload : MediaUpload.t;
     useMediaDownloadService : bool;
     
   }
   
-  let description = {
-    GapiLens.get = (fun x -> x.description);
-    GapiLens.set = (fun v x -> { x with description = v });
-  }
   let etagRequired = {
     GapiLens.get = (fun x -> x.etagRequired);
     GapiLens.set = (fun v x -> { x with etagRequired = v });
   }
-  let httpMethod = {
-    GapiLens.get = (fun x -> x.httpMethod);
-    GapiLens.set = (fun v x -> { x with httpMethod = v });
+  let description = {
+    GapiLens.get = (fun x -> x.description);
+    GapiLens.set = (fun v x -> { x with description = v });
+  }
+  let response = {
+    GapiLens.get = (fun x -> x.response);
+    GapiLens.set = (fun v x -> { x with response = v });
   }
   let id = {
     GapiLens.get = (fun x -> x.id);
     GapiLens.set = (fun v x -> { x with id = v });
   }
-  let mediaUpload = {
-    GapiLens.get = (fun x -> x.mediaUpload);
-    GapiLens.set = (fun v x -> { x with mediaUpload = v });
+  let parameters = {
+    GapiLens.get = (fun x -> x.parameters);
+    GapiLens.set = (fun v x -> { x with parameters = v });
+  }
+  let supportsSubscription = {
+    GapiLens.get = (fun x -> x.supportsSubscription);
+    GapiLens.set = (fun v x -> { x with supportsSubscription = v });
   }
   let parameterOrder = {
     GapiLens.get = (fun x -> x.parameterOrder);
     GapiLens.set = (fun v x -> { x with parameterOrder = v });
   }
-  let parameters = {
-    GapiLens.get = (fun x -> x.parameters);
-    GapiLens.set = (fun v x -> { x with parameters = v });
+  let flatPath = {
+    GapiLens.get = (fun x -> x.flatPath);
+    GapiLens.set = (fun v x -> { x with flatPath = v });
   }
-  let path = {
-    GapiLens.get = (fun x -> x.path);
-    GapiLens.set = (fun v x -> { x with path = v });
+  let supportsMediaDownload = {
+    GapiLens.get = (fun x -> x.supportsMediaDownload);
+    GapiLens.set = (fun v x -> { x with supportsMediaDownload = v });
+  }
+  let httpMethod = {
+    GapiLens.get = (fun x -> x.httpMethod);
+    GapiLens.set = (fun v x -> { x with httpMethod = v });
   }
   let request = {
     GapiLens.get = (fun x -> x.request);
     GapiLens.set = (fun v x -> { x with request = v });
   }
-  let response = {
-    GapiLens.get = (fun x -> x.response);
-    GapiLens.set = (fun v x -> { x with response = v });
-  }
-  let scopes = {
-    GapiLens.get = (fun x -> x.scopes);
-    GapiLens.set = (fun v x -> { x with scopes = v });
-  }
-  let supportsMediaDownload = {
-    GapiLens.get = (fun x -> x.supportsMediaDownload);
-    GapiLens.set = (fun v x -> { x with supportsMediaDownload = v });
+  let path = {
+    GapiLens.get = (fun x -> x.path);
+    GapiLens.set = (fun v x -> { x with path = v });
   }
   let supportsMediaUpload = {
     GapiLens.get = (fun x -> x.supportsMediaUpload);
     GapiLens.set = (fun v x -> { x with supportsMediaUpload = v });
   }
-  let supportsSubscription = {
-    GapiLens.get = (fun x -> x.supportsSubscription);
-    GapiLens.set = (fun v x -> { x with supportsSubscription = v });
+  let scopes = {
+    GapiLens.get = (fun x -> x.scopes);
+    GapiLens.set = (fun v x -> { x with scopes = v });
+  }
+  let mediaUpload = {
+    GapiLens.get = (fun x -> x.mediaUpload);
+    GapiLens.set = (fun v x -> { x with mediaUpload = v });
   }
   let useMediaDownloadService = {
     GapiLens.get = (fun x -> x.useMediaDownloadService);
@@ -1161,40 +1167,42 @@ struct
   }
   
   let empty = {
-    description = "";
     etagRequired = false;
-    httpMethod = "";
+    description = "";
+    response = Response.empty;
     id = "";
-    mediaUpload = MediaUpload.empty;
-    parameterOrder = [];
     parameters = [];
-    path = "";
-    request = Request.empty;
-    response = Response.empty;
-    scopes = [];
+    supportsSubscription = false;
+    parameterOrder = [];
+    flatPath = "";
     supportsMediaDownload = false;
+    httpMethod = "";
+    request = Request.empty;
+    path = "";
     supportsMediaUpload = false;
-    supportsSubscription = false;
+    scopes = [];
+    mediaUpload = MediaUpload.empty;
     useMediaDownloadService = false;
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_string_value "description" x.description;
       GapiJson.render_bool_value "etagRequired" x.etagRequired;
-      GapiJson.render_string_value "httpMethod" x.httpMethod;
+      GapiJson.render_string_value "description" x.description;
+      (fun v -> GapiJson.render_object "response" (Response.render_content v)) x.response;
       GapiJson.render_string_value "id" x.id;
-      (fun v -> GapiJson.render_object "mediaUpload" (MediaUpload.render_content v)) x.mediaUpload;
-      GapiJson.render_array "parameterOrder" (GapiJson.render_string_value "") x.parameterOrder;
       GapiJson.render_collection "parameters" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (JsonSchema.render_content v)) v) x.parameters;
-      GapiJson.render_string_value "path" x.path;
-      (fun v -> GapiJson.render_object "request" (Request.render_content v)) x.request;
-      (fun v -> GapiJson.render_object "response" (Response.render_content v)) x.response;
-      GapiJson.render_array "scopes" (GapiJson.render_string_value "") x.scopes;
+      GapiJson.render_bool_value "supportsSubscription" x.supportsSubscription;
+      GapiJson.render_array "parameterOrder" (GapiJson.render_string_value "") x.parameterOrder;
+      GapiJson.render_string_value "flatPath" x.flatPath;
       GapiJson.render_bool_value "supportsMediaDownload" x.supportsMediaDownload;
+      GapiJson.render_string_value "httpMethod" x.httpMethod;
+      (fun v -> GapiJson.render_object "request" (Request.render_content v)) x.request;
+      GapiJson.render_string_value "path" x.path;
       GapiJson.render_bool_value "supportsMediaUpload" x.supportsMediaUpload;
-      GapiJson.render_bool_value "supportsSubscription" x.supportsSubscription;
+      GapiJson.render_array "scopes" (GapiJson.render_string_value "") x.scopes;
+      (fun v -> GapiJson.render_object "mediaUpload" (MediaUpload.render_content v)) x.mediaUpload;
       GapiJson.render_bool_value "useMediaDownloadService" x.useMediaDownloadService;
       
     ]
@@ -1202,44 +1210,26 @@ struct
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with description = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "etagRequired"; data_type = GapiJson.Scalar },
         `Bool v) ->
       { x with etagRequired = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "httpMethod"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with httpMethod = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with id = v }
+      { x with description = v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "mediaUpload"; data_type = GapiJson.Object },
+        ({ GapiJson.name = "response"; data_type = GapiJson.Object },
         cs) ->
       GapiJson.parse_children
-        MediaUpload.parse
-        MediaUpload.empty
-        (fun v -> { x with mediaUpload = v })
-        cs
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "parameterOrder"; data_type = GapiJson.Array },
-        cs) ->
-      GapiJson.parse_collection
-        (fun x' -> function
-          | GapiCore.AnnotatedTree.Leaf
-              ({ GapiJson.name = ""; data_type = GapiJson.Scalar },
-              `String v) ->
-            v
-          | e ->
-            GapiJson.unexpected "GapiDiscoveryV1Model.RestMethod.parse.parse_collection" e x')
-        ""
-        (fun v -> { x with parameterOrder = v })
+        Response.parse
+        Response.empty
+        (fun v -> { x with response = v })
         cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with id = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "parameters"; data_type = GapiJson.Object },
         cs) ->
@@ -1259,9 +1249,35 @@ struct
         (fun v -> { x with parameters = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "path"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "supportsSubscription"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with supportsSubscription = v }
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "parameterOrder"; data_type = GapiJson.Array },
+        cs) ->
+      GapiJson.parse_collection
+        (fun x' -> function
+          | GapiCore.AnnotatedTree.Leaf
+              ({ GapiJson.name = ""; data_type = GapiJson.Scalar },
+              `String v) ->
+            v
+          | e ->
+            GapiJson.unexpected "GapiDiscoveryV1Model.RestMethod.parse.parse_collection" e x')
+        ""
+        (fun v -> { x with parameterOrder = v })
+        cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "flatPath"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with path = v }
+      { x with flatPath = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "supportsMediaDownload"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with supportsMediaDownload = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "httpMethod"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with httpMethod = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "request"; data_type = GapiJson.Object },
         cs) ->
@@ -1270,14 +1286,14 @@ struct
         Request.empty
         (fun v -> { x with request = v })
         cs
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "response"; data_type = GapiJson.Object },
-        cs) ->
-      GapiJson.parse_children
-        Response.parse
-        Response.empty
-        (fun v -> { x with response = v })
-        cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "path"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with path = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "supportsMediaUpload"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with supportsMediaUpload = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "scopes"; data_type = GapiJson.Array },
         cs) ->
@@ -1292,18 +1308,14 @@ struct
         ""
         (fun v -> { x with scopes = v })
         cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "supportsMediaDownload"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with supportsMediaDownload = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "supportsMediaUpload"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with supportsMediaUpload = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "supportsSubscription"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with supportsSubscription = v }
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "mediaUpload"; data_type = GapiJson.Object },
+        cs) ->
+      GapiJson.parse_children
+        MediaUpload.parse
+        MediaUpload.empty
+        (fun v -> { x with mediaUpload = v })
+        cs
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "useMediaDownloadService"; data_type = GapiJson.Scalar },
         `Bool v) ->
@@ -1324,36 +1336,50 @@ end
 module RestResource =
 struct
   type t = {
-    methods : (string * RestMethod.t) list;
     resources : (string * t) list;
+    methods : (string * RestMethod.t) list;
     
   }
   
-  let methods = {
-    GapiLens.get = (fun x -> x.methods);
-    GapiLens.set = (fun v x -> { x with methods = v });
-  }
   let resources = {
     GapiLens.get = (fun x -> x.resources);
     GapiLens.set = (fun v x -> { x with resources = v });
   }
+  let methods = {
+    GapiLens.get = (fun x -> x.methods);
+    GapiLens.set = (fun v x -> { x with methods = v });
+  }
   
   let empty = {
-    methods = [];
     resources = [];
+    methods = [];
     
   }
   
   let rec render_content x = 
      [
-      GapiJson.render_collection "methods" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (RestMethod.render_content v)) v) x.methods;
       GapiJson.render_collection "resources" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (render_content v)) v) x.resources;
+      GapiJson.render_collection "methods" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (RestMethod.render_content v)) v) x.methods;
       
     ]
   and render x = 
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "resources"; data_type = GapiJson.Object },
+        cs) ->
+      GapiJson.parse_collection
+        (fun x' -> function
+          | GapiCore.AnnotatedTree.Node
+              ({ GapiJson.name = n; data_type = GapiJson.Object },
+              cs) ->
+            GapiJson.parse_children parse empty (fun v -> (n, v)) cs
+          | e ->
+            GapiJson.unexpected "GapiDiscoveryV1Model.RestResource.parse.parse_dictionary" e x')
+        ("", empty)
+        (fun v -> { x with resources = v })
+        cs
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "methods"; data_type = GapiJson.Object },
         cs) ->
@@ -1372,20 +1398,6 @@ struct
         ("", RestMethod.empty)
         (fun v -> { x with methods = v })
         cs
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "resources"; data_type = GapiJson.Object },
-        cs) ->
-      GapiJson.parse_collection
-        (fun x' -> function
-          | GapiCore.AnnotatedTree.Node
-              ({ GapiJson.name = n; data_type = GapiJson.Object },
-              cs) ->
-            GapiJson.parse_children parse empty (fun v -> (n, v)) cs
-          | e ->
-            GapiJson.unexpected "GapiDiscoveryV1Model.RestResource.parse.parse_dictionary" e x')
-        ("", empty)
-        (fun v -> { x with resources = v })
-        cs
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
@@ -1587,232 +1599,236 @@ struct
   end
   
   type t = {
+    ownerName : string;
     auth : Auth.t;
-    basePath : string;
-    baseUrl : string;
-    batchPath : string;
-    canonicalName : string;
-    description : string;
-    discoveryVersion : string;
+    revision : string;
     documentationLink : string;
+    methods : (string * RestMethod.t) list;
+    packagePath : string;
     etag : string;
+    name : string;
+    resources : (string * RestResource.t) list;
+    discoveryVersion : string;
+    basePath : string;
+    icons : Icons.t;
     exponentialBackoffDefault : bool;
+    schemas : (string * JsonSchema.t) list;
+    description : string;
+    version_module : bool;
+    rootUrl : string;
+    labels : string list;
+    version : string;
     features : string list;
-    icons : Icons.t;
-    id : string;
     kind : string;
-    labels : string list;
-    methods : (string * RestMethod.t) list;
-    name : string;
-    ownerDomain : string;
-    ownerName : string;
-    packagePath : string;
+    title : string;
+    baseUrl : string;
     parameters : (string * JsonSchema.t) list;
+    batchPath : string;
+    id : string;
     protocol : string;
-    resources : (string * RestResource.t) list;
-    revision : string;
-    rootUrl : string;
-    schemas : (string * JsonSchema.t) list;
+    ownerDomain : string;
+    canonicalName : string;
     servicePath : string;
-    title : string;
-    version : string;
-    version_module : bool;
     
   }
   
+  let ownerName = {
+    GapiLens.get = (fun x -> x.ownerName);
+    GapiLens.set = (fun v x -> { x with ownerName = v });
+  }
   let auth = {
     GapiLens.get = (fun x -> x.auth);
     GapiLens.set = (fun v x -> { x with auth = v });
   }
-  let basePath = {
-    GapiLens.get = (fun x -> x.basePath);
-    GapiLens.set = (fun v x -> { x with basePath = v });
+  let revision = {
+    GapiLens.get = (fun x -> x.revision);
+    GapiLens.set = (fun v x -> { x with revision = v });
   }
-  let baseUrl = {
-    GapiLens.get = (fun x -> x.baseUrl);
-    GapiLens.set = (fun v x -> { x with baseUrl = v });
+  let documentationLink = {
+    GapiLens.get = (fun x -> x.documentationLink);
+    GapiLens.set = (fun v x -> { x with documentationLink = v });
   }
-  let batchPath = {
-    GapiLens.get = (fun x -> x.batchPath);
-    GapiLens.set = (fun v x -> { x with batchPath = v });
+  let methods = {
+    GapiLens.get = (fun x -> x.methods);
+    GapiLens.set = (fun v x -> { x with methods = v });
   }
-  let canonicalName = {
-    GapiLens.get = (fun x -> x.canonicalName);
-    GapiLens.set = (fun v x -> { x with canonicalName = v });
+  let packagePath = {
+    GapiLens.get = (fun x -> x.packagePath);
+    GapiLens.set = (fun v x -> { x with packagePath = v });
   }
-  let description = {
-    GapiLens.get = (fun x -> x.description);
-    GapiLens.set = (fun v x -> { x with description = v });
+  let etag = {
+    GapiLens.get = (fun x -> x.etag);
+    GapiLens.set = (fun v x -> { x with etag = v });
+  }
+  let name = {
+    GapiLens.get = (fun x -> x.name);
+    GapiLens.set = (fun v x -> { x with name = v });
+  }
+  let resources = {
+    GapiLens.get = (fun x -> x.resources);
+    GapiLens.set = (fun v x -> { x with resources = v });
   }
   let discoveryVersion = {
     GapiLens.get = (fun x -> x.discoveryVersion);
     GapiLens.set = (fun v x -> { x with discoveryVersion = v });
   }
-  let documentationLink = {
-    GapiLens.get = (fun x -> x.documentationLink);
-    GapiLens.set = (fun v x -> { x with documentationLink = v });
+  let basePath = {
+    GapiLens.get = (fun x -> x.basePath);
+    GapiLens.set = (fun v x -> { x with basePath = v });
   }
-  let etag = {
-    GapiLens.get = (fun x -> x.etag);
-    GapiLens.set = (fun v x -> { x with etag = v });
+  let icons = {
+    GapiLens.get = (fun x -> x.icons);
+    GapiLens.set = (fun v x -> { x with icons = v });
   }
   let exponentialBackoffDefault = {
     GapiLens.get = (fun x -> x.exponentialBackoffDefault);
     GapiLens.set = (fun v x -> { x with exponentialBackoffDefault = v });
   }
-  let features = {
-    GapiLens.get = (fun x -> x.features);
-    GapiLens.set = (fun v x -> { x with features = v });
+  let schemas = {
+    GapiLens.get = (fun x -> x.schemas);
+    GapiLens.set = (fun v x -> { x with schemas = v });
   }
-  let icons = {
-    GapiLens.get = (fun x -> x.icons);
-    GapiLens.set = (fun v x -> { x with icons = v });
+  let description = {
+    GapiLens.get = (fun x -> x.description);
+    GapiLens.set = (fun v x -> { x with description = v });
   }
-  let id = {
-    GapiLens.get = (fun x -> x.id);
-    GapiLens.set = (fun v x -> { x with id = v });
+  let version_module = {
+    GapiLens.get = (fun x -> x.version_module);
+    GapiLens.set = (fun v x -> { x with version_module = v });
   }
-  let kind = {
-    GapiLens.get = (fun x -> x.kind);
-    GapiLens.set = (fun v x -> { x with kind = v });
+  let rootUrl = {
+    GapiLens.get = (fun x -> x.rootUrl);
+    GapiLens.set = (fun v x -> { x with rootUrl = v });
   }
   let labels = {
     GapiLens.get = (fun x -> x.labels);
     GapiLens.set = (fun v x -> { x with labels = v });
   }
-  let methods = {
-    GapiLens.get = (fun x -> x.methods);
-    GapiLens.set = (fun v x -> { x with methods = v });
+  let version = {
+    GapiLens.get = (fun x -> x.version);
+    GapiLens.set = (fun v x -> { x with version = v });
   }
-  let name = {
-    GapiLens.get = (fun x -> x.name);
-    GapiLens.set = (fun v x -> { x with name = v });
+  let features = {
+    GapiLens.get = (fun x -> x.features);
+    GapiLens.set = (fun v x -> { x with features = v });
   }
-  let ownerDomain = {
-    GapiLens.get = (fun x -> x.ownerDomain);
-    GapiLens.set = (fun v x -> { x with ownerDomain = v });
+  let kind = {
+    GapiLens.get = (fun x -> x.kind);
+    GapiLens.set = (fun v x -> { x with kind = v });
   }
-  let ownerName = {
-    GapiLens.get = (fun x -> x.ownerName);
-    GapiLens.set = (fun v x -> { x with ownerName = v });
+  let title = {
+    GapiLens.get = (fun x -> x.title);
+    GapiLens.set = (fun v x -> { x with title = v });
   }
-  let packagePath = {
-    GapiLens.get = (fun x -> x.packagePath);
-    GapiLens.set = (fun v x -> { x with packagePath = v });
+  let baseUrl = {
+    GapiLens.get = (fun x -> x.baseUrl);
+    GapiLens.set = (fun v x -> { x with baseUrl = v });
   }
   let parameters = {
     GapiLens.get = (fun x -> x.parameters);
     GapiLens.set = (fun v x -> { x with parameters = v });
   }
+  let batchPath = {
+    GapiLens.get = (fun x -> x.batchPath);
+    GapiLens.set = (fun v x -> { x with batchPath = v });
+  }
+  let id = {
+    GapiLens.get = (fun x -> x.id);
+    GapiLens.set = (fun v x -> { x with id = v });
+  }
   let protocol = {
     GapiLens.get = (fun x -> x.protocol);
     GapiLens.set = (fun v x -> { x with protocol = v });
   }
-  let resources = {
-    GapiLens.get = (fun x -> x.resources);
-    GapiLens.set = (fun v x -> { x with resources = v });
-  }
-  let revision = {
-    GapiLens.get = (fun x -> x.revision);
-    GapiLens.set = (fun v x -> { x with revision = v });
-  }
-  let rootUrl = {
-    GapiLens.get = (fun x -> x.rootUrl);
-    GapiLens.set = (fun v x -> { x with rootUrl = v });
+  let ownerDomain = {
+    GapiLens.get = (fun x -> x.ownerDomain);
+    GapiLens.set = (fun v x -> { x with ownerDomain = v });
   }
-  let schemas = {
-    GapiLens.get = (fun x -> x.schemas);
-    GapiLens.set = (fun v x -> { x with schemas = v });
+  let canonicalName = {
+    GapiLens.get = (fun x -> x.canonicalName);
+    GapiLens.set = (fun v x -> { x with canonicalName = v });
   }
   let servicePath = {
     GapiLens.get = (fun x -> x.servicePath);
     GapiLens.set = (fun v x -> { x with servicePath = v });
   }
-  let title = {
-    GapiLens.get = (fun x -> x.title);
-    GapiLens.set = (fun v x -> { x with title = v });
-  }
-  let version = {
-    GapiLens.get = (fun x -> x.version);
-    GapiLens.set = (fun v x -> { x with version = v });
-  }
-  let version_module = {
-    GapiLens.get = (fun x -> x.version_module);
-    GapiLens.set = (fun v x -> { x with version_module = v });
-  }
   
   let empty = {
+    ownerName = "";
     auth = Auth.empty;
-    basePath = "";
-    baseUrl = "";
-    batchPath = "";
-    canonicalName = "";
-    description = "";
-    discoveryVersion = "";
+    revision = "";
     documentationLink = "";
+    methods = [];
+    packagePath = "";
     etag = "";
+    name = "";
+    resources = [];
+    discoveryVersion = "";
+    basePath = "";
+    icons = Icons.empty;
     exponentialBackoffDefault = false;
+    schemas = [];
+    description = "";
+    version_module = false;
+    rootUrl = "";
+    labels = [];
+    version = "";
     features = [];
-    icons = Icons.empty;
-    id = "";
     kind = "";
-    labels = [];
-    methods = [];
-    name = "";
-    ownerDomain = "";
-    ownerName = "";
-    packagePath = "";
+    title = "";
+    baseUrl = "";
     parameters = [];
+    batchPath = "";
+    id = "";
     protocol = "";
-    resources = [];
-    revision = "";
-    rootUrl = "";
-    schemas = [];
+    ownerDomain = "";
+    canonicalName = "";
     servicePath = "";
-    title = "";
-    version = "";
-    version_module = false;
     
   }
   
   let rec render_content x = 
-     [
-      (fun v -> GapiJson.render_object "auth" (Auth.render_content v)) x.auth;
-      GapiJson.render_string_value "basePath" x.basePath;
-      GapiJson.render_string_value "baseUrl" x.baseUrl;
-      GapiJson.render_string_value "batchPath" x.batchPath;
-      GapiJson.render_string_value "canonicalName" x.canonicalName;
-      GapiJson.render_string_value "description" x.description;
-      GapiJson.render_string_value "discoveryVersion" x.discoveryVersion;
+     [
+      GapiJson.render_string_value "ownerName" x.ownerName;
+      (fun v -> GapiJson.render_object "auth" (Auth.render_content v)) x.auth;
+      GapiJson.render_string_value "revision" x.revision;
       GapiJson.render_string_value "documentationLink" x.documentationLink;
+      GapiJson.render_collection "methods" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (RestMethod.render_content v)) v) x.methods;
+      GapiJson.render_string_value "packagePath" x.packagePath;
       GapiJson.render_string_value "etag" x.etag;
+      GapiJson.render_string_value "name" x.name;
+      GapiJson.render_collection "resources" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (RestResource.render_content v)) v) x.resources;
+      GapiJson.render_string_value "discoveryVersion" x.discoveryVersion;
+      GapiJson.render_string_value "basePath" x.basePath;
+      (fun v -> GapiJson.render_object "icons" (Icons.render_content v)) x.icons;
       GapiJson.render_bool_value "exponentialBackoffDefault" x.exponentialBackoffDefault;
+      GapiJson.render_collection "schemas" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (JsonSchema.render_content v)) v) x.schemas;
+      GapiJson.render_string_value "description" x.description;
+      GapiJson.render_bool_value "version_module" x.version_module;
+      GapiJson.render_string_value "rootUrl" x.rootUrl;
+      GapiJson.render_array "labels" (GapiJson.render_string_value "") x.labels;
+      GapiJson.render_string_value "version" x.version;
       GapiJson.render_array "features" (GapiJson.render_string_value "") x.features;
-      (fun v -> GapiJson.render_object "icons" (Icons.render_content v)) x.icons;
-      GapiJson.render_string_value "id" x.id;
       GapiJson.render_string_value "kind" x.kind;
-      GapiJson.render_array "labels" (GapiJson.render_string_value "") x.labels;
-      GapiJson.render_collection "methods" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (RestMethod.render_content v)) v) x.methods;
-      GapiJson.render_string_value "name" x.name;
-      GapiJson.render_string_value "ownerDomain" x.ownerDomain;
-      GapiJson.render_string_value "ownerName" x.ownerName;
-      GapiJson.render_string_value "packagePath" x.packagePath;
+      GapiJson.render_string_value "title" x.title;
+      GapiJson.render_string_value "baseUrl" x.baseUrl;
       GapiJson.render_collection "parameters" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (JsonSchema.render_content v)) v) x.parameters;
+      GapiJson.render_string_value "batchPath" x.batchPath;
+      GapiJson.render_string_value "id" x.id;
       GapiJson.render_string_value "protocol" x.protocol;
-      GapiJson.render_collection "resources" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (RestResource.render_content v)) v) x.resources;
-      GapiJson.render_string_value "revision" x.revision;
-      GapiJson.render_string_value "rootUrl" x.rootUrl;
-      GapiJson.render_collection "schemas" GapiJson.Object (fun (id, v) -> (fun v -> GapiJson.render_object id (JsonSchema.render_content v)) v) x.schemas;
+      GapiJson.render_string_value "ownerDomain" x.ownerDomain;
+      GapiJson.render_string_value "canonicalName" x.canonicalName;
       GapiJson.render_string_value "servicePath" x.servicePath;
-      GapiJson.render_string_value "title" x.title;
-      GapiJson.render_string_value "version" x.version;
-      GapiJson.render_bool_value "version_module" x.version_module;
       
     ]
   and render x = 
     GapiJson.render_object "" (render_content x)
   
   let rec parse x = function
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "ownerName"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with ownerName = v }
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "auth"; data_type = GapiJson.Object },
         cs) ->
@@ -1822,85 +1838,13 @@ struct
         (fun v -> { x with auth = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "basePath"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with basePath = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "baseUrl"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with baseUrl = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "batchPath"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with batchPath = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "canonicalName"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with canonicalName = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with description = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "discoveryVersion"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "revision"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with discoveryVersion = v }
+      { x with revision = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "documentationLink"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with documentationLink = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with etag = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "exponentialBackoffDefault"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with exponentialBackoffDefault = v }
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "features"; data_type = GapiJson.Array },
-        cs) ->
-      GapiJson.parse_collection
-        (fun x' -> function
-          | GapiCore.AnnotatedTree.Leaf
-              ({ GapiJson.name = ""; data_type = GapiJson.Scalar },
-              `String v) ->
-            v
-          | e ->
-            GapiJson.unexpected "GapiDiscoveryV1Model.RestDescription.parse.parse_collection" e x')
-        ""
-        (fun v -> { x with features = v })
-        cs
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "icons"; data_type = GapiJson.Object },
-        cs) ->
-      GapiJson.parse_children
-        Icons.parse
-        Icons.empty
-        (fun v -> { x with icons = v })
-        cs
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with id = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with kind = v }
-    | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "labels"; data_type = GapiJson.Array },
-        cs) ->
-      GapiJson.parse_collection
-        (fun x' -> function
-          | GapiCore.AnnotatedTree.Leaf
-              ({ GapiJson.name = ""; data_type = GapiJson.Scalar },
-              `String v) ->
-            v
-          | e ->
-            GapiJson.unexpected "GapiDiscoveryV1Model.RestDescription.parse.parse_collection" e x')
-        ""
-        (fun v -> { x with labels = v })
-        cs
     | GapiCore.AnnotatedTree.Node
         ({ GapiJson.name = "methods"; data_type = GapiJson.Object },
         cs) ->
@@ -1920,23 +1864,19 @@ struct
         (fun v -> { x with methods = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "name"; data_type = GapiJson.Scalar },
-        `String v) ->
-      { x with name = v }
-    | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "ownerDomain"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "packagePath"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with ownerDomain = v }
+      { x with packagePath = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "ownerName"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "etag"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with ownerName = v }
+      { x with etag = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "packagePath"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "name"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with packagePath = v }
+      { x with name = v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "parameters"; data_type = GapiJson.Object },
+        ({ GapiJson.name = "resources"; data_type = GapiJson.Object },
         cs) ->
       GapiJson.parse_collection
         (fun x' -> function
@@ -1944,21 +1884,37 @@ struct
               ({ GapiJson.name = n; data_type = GapiJson.Object },
               cs) ->
             GapiJson.parse_children
-              JsonSchema.parse
-              JsonSchema.empty
+              RestResource.parse
+              RestResource.empty
               (fun v -> (n, v))
               cs
           | e ->
             GapiJson.unexpected "GapiDiscoveryV1Model.RestDescription.parse.parse_dictionary" e x')
-        ("", JsonSchema.empty)
-        (fun v -> { x with parameters = v })
+        ("", RestResource.empty)
+        (fun v -> { x with resources = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "protocol"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "discoveryVersion"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with protocol = v }
+      { x with discoveryVersion = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "basePath"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with basePath = v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "resources"; data_type = GapiJson.Object },
+        ({ GapiJson.name = "icons"; data_type = GapiJson.Object },
+        cs) ->
+      GapiJson.parse_children
+        Icons.parse
+        Icons.empty
+        (fun v -> { x with icons = v })
+        cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "exponentialBackoffDefault"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with exponentialBackoffDefault = v }
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "schemas"; data_type = GapiJson.Object },
         cs) ->
       GapiJson.parse_collection
         (fun x' -> function
@@ -1966,25 +1922,73 @@ struct
               ({ GapiJson.name = n; data_type = GapiJson.Object },
               cs) ->
             GapiJson.parse_children
-              RestResource.parse
-              RestResource.empty
+              JsonSchema.parse
+              JsonSchema.empty
               (fun v -> (n, v))
               cs
           | e ->
             GapiJson.unexpected "GapiDiscoveryV1Model.RestDescription.parse.parse_dictionary" e x')
-        ("", RestResource.empty)
-        (fun v -> { x with resources = v })
+        ("", JsonSchema.empty)
+        (fun v -> { x with schemas = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "revision"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "description"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with revision = v }
+      { x with description = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "version_module"; data_type = GapiJson.Scalar },
+        `Bool v) ->
+      { x with version_module = v }
     | GapiCore.AnnotatedTree.Leaf
         ({ GapiJson.name = "rootUrl"; data_type = GapiJson.Scalar },
         `String v) ->
       { x with rootUrl = v }
     | GapiCore.AnnotatedTree.Node
-        ({ GapiJson.name = "schemas"; data_type = GapiJson.Object },
+        ({ GapiJson.name = "labels"; data_type = GapiJson.Array },
+        cs) ->
+      GapiJson.parse_collection
+        (fun x' -> function
+          | GapiCore.AnnotatedTree.Leaf
+              ({ GapiJson.name = ""; data_type = GapiJson.Scalar },
+              `String v) ->
+            v
+          | e ->
+            GapiJson.unexpected "GapiDiscoveryV1Model.RestDescription.parse.parse_collection" e x')
+        ""
+        (fun v -> { x with labels = v })
+        cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "version"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with version = v }
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "features"; data_type = GapiJson.Array },
+        cs) ->
+      GapiJson.parse_collection
+        (fun x' -> function
+          | GapiCore.AnnotatedTree.Leaf
+              ({ GapiJson.name = ""; data_type = GapiJson.Scalar },
+              `String v) ->
+            v
+          | e ->
+            GapiJson.unexpected "GapiDiscoveryV1Model.RestDescription.parse.parse_collection" e x')
+        ""
+        (fun v -> { x with features = v })
+        cs
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "kind"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with kind = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "title"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with title = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "baseUrl"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with baseUrl = v }
+    | GapiCore.AnnotatedTree.Node
+        ({ GapiJson.name = "parameters"; data_type = GapiJson.Object },
         cs) ->
       GapiJson.parse_collection
         (fun x' -> function
@@ -1999,24 +2003,32 @@ struct
           | e ->
             GapiJson.unexpected "GapiDiscoveryV1Model.RestDescription.parse.parse_dictionary" e x')
         ("", JsonSchema.empty)
-        (fun v -> { x with schemas = v })
+        (fun v -> { x with parameters = v })
         cs
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "servicePath"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "batchPath"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with servicePath = v }
+      { x with batchPath = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "title"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "id"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with title = v }
+      { x with id = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "version"; data_type = GapiJson.Scalar },
+        ({ GapiJson.name = "protocol"; data_type = GapiJson.Scalar },
         `String v) ->
-      { x with version = v }
+      { x with protocol = v }
     | GapiCore.AnnotatedTree.Leaf
-        ({ GapiJson.name = "version_module"; data_type = GapiJson.Scalar },
-        `Bool v) ->
-      { x with version_module = v }
+        ({ GapiJson.name = "ownerDomain"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with ownerDomain = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "canonicalName"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with canonicalName = v }
+    | GapiCore.AnnotatedTree.Leaf
+        ({ GapiJson.name = "servicePath"; data_type = GapiJson.Scalar },
+        `String v) ->
+      { x with servicePath = v }
     | GapiCore.AnnotatedTree.Node
       ({ GapiJson.name = ""; data_type = GapiJson.Object },
       cs) ->
diff --git a/src/gapi/gapiDiscoveryV1Model.mli b/src/gapi/gapiDiscoveryV1Model.mli
index 629b4df7..ec60b718 100644
--- a/src/gapi/gapiDiscoveryV1Model.mli
+++ b/src/gapi/gapiDiscoveryV1Model.mli
@@ -1,6 +1,7 @@
-(* Warning! This file is generated. Modify at your own risk. *)
+(* Warning! This file is generated. Modify at your own risk.
+        *)
 
-(** Data definition for APIs Discovery Service (v1).
+(** Data definition for API Discovery Service (v1).
   
   For more information about this data model, see the
   {{:https://developers.google.com/discovery/}API Documentation}.
@@ -8,6 +9,24 @@
 
 module JsonSchema :
 sig
+  module Annotations :
+  sig
+    type t = {
+      required : string list;
+      (** A list of methods for which this property is required on requests. *)
+      
+    }
+    
+    val required : (t, string list) GapiLens.t
+    
+    val empty : t
+    
+    val render : t -> GapiJson.json_data_model list
+    
+    val parse : t -> GapiJson.json_data_model -> t
+    
+  end
+  
   module Variant :
   sig
     module Map :
@@ -32,33 +51,15 @@ sig
     end
     
     type t = {
-      discriminant : string;
-      (** The name of the type discriminant property. *)
       map : Map.t list;
       (** The map of discriminant value to schema to use for parsing.. *)
+      discriminant : string;
+      (** The name of the type discriminant property. *)
       
     }
     
-    val discriminant : (t, string) GapiLens.t
     val map : (t, Map.t list) GapiLens.t
-    
-    val empty : t
-    
-    val render : t -> GapiJson.json_data_model list
-    
-    val parse : t -> GapiJson.json_data_model -> t
-    
-  end
-  
-  module Annotations :
-  sig
-    type t = {
-      required : string list;
-      (** A list of methods for which this property is required on requests. *)
-      
-    }
-    
-    val required : (t, string list) GapiLens.t
+    val discriminant : (t, string) GapiLens.t
     
     val empty : t
     
@@ -69,69 +70,69 @@ sig
   end
   
   type t = {
+    items : t option;
+    (** If this is a schema for an array, this property is the schema for each element in the array. *)
+    repeated : bool;
+    (** Whether this parameter may appear multiple times. *)
+    variant : Variant.t;
+    (** In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of descriminant values to schema names. *)
+    pattern : string;
+    (** The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html *)
+    maximum : string;
+    (** The maximum value of this parameter. *)
+    location : string;
+    (** Whether this parameter goes in the query or the path for REST requests. *)
+    enum : string list;
+    (** Values this parameter may take (if it is an enum). *)
     _ref : string;
     (** A reference to another schema. The value of this property is the "id" of another schema. *)
-    additionalProperties : t option;
-    (** If this is a schema for an object, this property is the schema for any additional properties with dynamic keys on this object. *)
+    _type : string;
+    (** The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1 *)
     annotations : Annotations.t;
     (** Additional information about this property. *)
+    required : bool;
+    (** Whether the parameter is required. *)
     default : string;
     (** The default value of this property (if one exists). *)
+    minimum : string;
+    (** The minimum value of this parameter. *)
     description : string;
     (** A description of this object. *)
-    enum : string list;
-    (** Values this parameter may take (if it is an enum). *)
     enumDescriptions : string list;
     (** The descriptions for the enums. Each position maps to the corresponding value in the "enum" array. *)
-    format : string;
-    (** An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23 *)
+    readOnly : bool;
+    (** The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service. *)
     id : string;
     (** Unique identifier for this schema. *)
-    items : t option;
-    (** If this is a schema for an array, this property is the schema for each element in the array. *)
-    location : string;
-    (** Whether this parameter goes in the query or the path for REST requests. *)
-    maximum : string;
-    (** The maximum value of this parameter. *)
-    minimum : string;
-    (** The minimum value of this parameter. *)
-    pattern : string;
-    (** The regular expression this parameter must conform to. Uses Java 6 regex format: http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html *)
+    format : string;
+    (** An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23 *)
+    additionalProperties : t option;
+    (** If this is a schema for an object, this property is the schema for any additional properties with dynamic keys on this object. *)
     properties : (string * t) list;
     (** If this is a schema for an object, list the schema for each property of this object. *)
-    readOnly : bool;
-    (** The value is read-only, generated by the service. The value cannot be modified by the client. If the value is included in a POST, PUT, or PATCH request, it is ignored by the service. *)
-    repeated : bool;
-    (** Whether this parameter may appear multiple times. *)
-    required : bool;
-    (** Whether the parameter is required. *)
-    _type : string;
-    (** The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1 *)
-    variant : Variant.t;
-    (** In a variant data type, the value of one property is used to determine how to interpret the entire entity. Its value must exist in a map of descriminant values to schema names. *)
     
   }
   
+  val items : (t, t option) GapiLens.t
+  val repeated : (t, bool) GapiLens.t
+  val variant : (t, Variant.t) GapiLens.t
+  val pattern : (t, string) GapiLens.t
+  val maximum : (t, string) GapiLens.t
+  val location : (t, string) GapiLens.t
+  val enum : (t, string list) GapiLens.t
   val _ref : (t, string) GapiLens.t
-  val additionalProperties : (t, t option) GapiLens.t
+  val _type : (t, string) GapiLens.t
   val annotations : (t, Annotations.t) GapiLens.t
+  val required : (t, bool) GapiLens.t
   val default : (t, string) GapiLens.t
+  val minimum : (t, string) GapiLens.t
   val description : (t, string) GapiLens.t
-  val enum : (t, string list) GapiLens.t
   val enumDescriptions : (t, string list) GapiLens.t
-  val format : (t, string) GapiLens.t
+  val readOnly : (t, bool) GapiLens.t
   val id : (t, string) GapiLens.t
-  val items : (t, t option) GapiLens.t
-  val location : (t, string) GapiLens.t
-  val maximum : (t, string) GapiLens.t
-  val minimum : (t, string) GapiLens.t
-  val pattern : (t, string) GapiLens.t
+  val format : (t, string) GapiLens.t
+  val additionalProperties : (t, t option) GapiLens.t
   val properties : (t, (string * t) list) GapiLens.t
-  val readOnly : (t, bool) GapiLens.t
-  val repeated : (t, bool) GapiLens.t
-  val required : (t, bool) GapiLens.t
-  val _type : (t, string) GapiLens.t
-  val variant : (t, Variant.t) GapiLens.t
   
   val empty : t
   
@@ -171,45 +172,45 @@ sig
     end
     
     type t = {
-      description : string;
-      (** The description of this API. *)
-      discoveryLink : string;
-      (** A link to the discovery document. *)
-      discoveryRestUrl : string;
-      (** The URL for the discovery REST document. *)
-      documentationLink : string;
-      (** A link to human readable documentation for the API. *)
-      icons : Icons.t;
-      (** Links to 16x16 and 32x32 icons representing the API. *)
+      title : string;
+      (** The title of this API. *)
       id : string;
       (** The id of this API. *)
-      kind : string;
-      (** The kind for this response. *)
       labels : string list;
       (** Labels for the status of this API, such as labs or deprecated. *)
+      description : string;
+      (** The description of this API. *)
+      icons : Icons.t;
+      (** Links to 16x16 and 32x32 icons representing the API. *)
       name : string;
       (** The name of the API. *)
+      kind : string;
+      (** The kind for this response. *)
+      documentationLink : string;
+      (** A link to human readable documentation for the API. *)
+      discoveryLink : string;
+      (** A link to the discovery document. *)
       preferred : bool;
       (** True if this version is the preferred version to use. *)
-      title : string;
-      (** The title of this API. *)
       version : string;
       (** The version of the API. *)
+      discoveryRestUrl : string;
+      (** The URL for the discovery REST document. *)
       
     }
     
-    val description : (t, string) GapiLens.t
-    val discoveryLink : (t, string) GapiLens.t
-    val discoveryRestUrl : (t, string) GapiLens.t
-    val documentationLink : (t, string) GapiLens.t
-    val icons : (t, Icons.t) GapiLens.t
+    val title : (t, string) GapiLens.t
     val id : (t, string) GapiLens.t
-    val kind : (t, string) GapiLens.t
     val labels : (t, string list) GapiLens.t
+    val description : (t, string) GapiLens.t
+    val icons : (t, Icons.t) GapiLens.t
     val name : (t, string) GapiLens.t
+    val kind : (t, string) GapiLens.t
+    val documentationLink : (t, string) GapiLens.t
+    val discoveryLink : (t, string) GapiLens.t
     val preferred : (t, bool) GapiLens.t
-    val title : (t, string) GapiLens.t
     val version : (t, string) GapiLens.t
+    val discoveryRestUrl : (t, string) GapiLens.t
     
     val empty : t
     
@@ -220,18 +221,18 @@ sig
   end
   
   type t = {
+    kind : string;
+    (** The kind for this response. *)
     discoveryVersion : string;
     (** Indicate the version of the Discovery API used to generate this doc. *)
     items : Items.t list;
     (** The individual directory entries. One entry per api/version pair. *)
-    kind : string;
-    (** The kind for this response. *)
     
   }
   
+  val kind : (t, string) GapiLens.t
   val discoveryVersion : (t, string) GapiLens.t
   val items : (t, Items.t list) GapiLens.t
-  val kind : (t, string) GapiLens.t
   
   val empty : t
   
@@ -247,54 +248,15 @@ end
 
 module RestMethod :
 sig
-  module Response :
-  sig
-    type t = {
-      _ref : string;
-      (** Schema ID for the response schema. *)
-      
-    }
-    
-    val _ref : (t, string) GapiLens.t
-    
-    val empty : t
-    
-    val render : t -> GapiJson.json_data_model list
-    
-    val parse : t -> GapiJson.json_data_model -> t
-    
-  end
-  
-  module Request :
-  sig
-    type t = {
-      _ref : string;
-      (** Schema ID for the request schema. *)
-      parameterName : string;
-      (** parameter name. *)
-      
-    }
-    
-    val _ref : (t, string) GapiLens.t
-    val parameterName : (t, string) GapiLens.t
-    
-    val empty : t
-    
-    val render : t -> GapiJson.json_data_model list
-    
-    val parse : t -> GapiJson.json_data_model -> t
-    
-  end
-  
   module MediaUpload :
   sig
     module Protocols :
     sig
-      module Simple :
+      module Resumable :
       sig
         type t = {
           multipart : bool;
-          (** True if this endpoint supports upload multipart media. *)
+          (** True if this endpoint supports uploading multipart media. *)
           path : string;
           (** The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level. *)
           
@@ -311,18 +273,18 @@ sig
         
       end
       
-      module Resumable :
+      module Simple :
       sig
         type t = {
-          multipart : bool;
-          (** True if this endpoint supports uploading multipart media. *)
           path : string;
           (** The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level. *)
+          multipart : bool;
+          (** True if this endpoint supports upload multipart media. *)
           
         }
         
-        val multipart : (t, bool) GapiLens.t
         val path : (t, string) GapiLens.t
+        val multipart : (t, bool) GapiLens.t
         
         val empty : t
         
@@ -333,15 +295,15 @@ sig
       end
       
       type t = {
-        resumable : Resumable.t;
-        (** Supports the Resumable Media Upload protocol. *)
         simple : Simple.t;
         (** Supports uploading as a single HTTP request. *)
+        resumable : Resumable.t;
+        (** Supports the Resumable Media Upload protocol. *)
         
       }
       
-      val resumable : (t, Resumable.t) GapiLens.t
       val simple : (t, Simple.t) GapiLens.t
+      val resumable : (t, Resumable.t) GapiLens.t
       
       val empty : t
       
@@ -352,18 +314,57 @@ sig
     end
     
     type t = {
+      protocols : Protocols.t;
+      (** Supported upload protocols. *)
       accept : string list;
       (** MIME Media Ranges for acceptable media uploads to this method. *)
       maxSize : string;
       (** Maximum size of a media upload, such as "1MB", "2GB" or "3TB". *)
-      protocols : Protocols.t;
-      (** Supported upload protocols. *)
       
     }
     
+    val protocols : (t, Protocols.t) GapiLens.t
     val accept : (t, string list) GapiLens.t
     val maxSize : (t, string) GapiLens.t
-    val protocols : (t, Protocols.t) GapiLens.t
+    
+    val empty : t
+    
+    val render : t -> GapiJson.json_data_model list
+    
+    val parse : t -> GapiJson.json_data_model -> t
+    
+  end
+  
+  module Request :
+  sig
+    type t = {
+      parameterName : string;
+      (** parameter name. *)
+      _ref : string;
+      (** Schema ID for the request schema. *)
+      
+    }
+    
+    val parameterName : (t, string) GapiLens.t
+    val _ref : (t, string) GapiLens.t
+    
+    val empty : t
+    
+    val render : t -> GapiJson.json_data_model list
+    
+    val parse : t -> GapiJson.json_data_model -> t
+    
+  end
+  
+  module Response :
+  sig
+    type t = {
+      _ref : string;
+      (** Schema ID for the response schema. *)
+      
+    }
+    
+    val _ref : (t, string) GapiLens.t
     
     val empty : t
     
@@ -374,53 +375,56 @@ sig
   end
   
   type t = {
-    description : string;
-    (** Description of this method. *)
     etagRequired : bool;
     (** Whether this method requires an ETag to be specified. The ETag is sent as an HTTP If-Match or If-None-Match header. *)
-    httpMethod : string;
-    (** HTTP method used by this method. *)
+    description : string;
+    (** Description of this method. *)
+    response : Response.t;
+    (** The schema for the response. *)
     id : string;
     (** A unique ID for this method. This property can be used to match methods between different versions of Discovery. *)
-    mediaUpload : MediaUpload.t;
-    (** Media upload parameters. *)
-    parameterOrder : string list;
-    (** Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the "most-significant" parameter appears first. *)
     parameters : (string * JsonSchema.t) list;
     (** Details for all parameters in this method. *)
-    path : string;
-    (** The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level. *)
-    request : Request.t;
-    (** The schema for the request. *)
-    response : Response.t;
-    (** The schema for the response. *)
-    scopes : string list;
-    (** OAuth 2.0 scopes applicable to this method. *)
+    supportsSubscription : bool;
+    (** Whether this method supports subscriptions. *)
+    parameterOrder : string list;
+    (** Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the "most-significant" parameter appears first. *)
+    flatPath : string;
+    (** The URI path of this REST method in (RFC 6570) format without level 2 features (\{+var\}). Supplementary to the path property. *)
     supportsMediaDownload : bool;
     (** Whether this method supports media downloads. *)
+    httpMethod : string;
+    (** HTTP method used by this method. *)
+    request : Request.t;
+    (** The schema for the request. *)
+    path : string;
+    (** The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level. *)
     supportsMediaUpload : bool;
     (** Whether this method supports media uploads. *)
-    supportsSubscription : bool;
-    (** Whether this method supports subscriptions. *)
+    scopes : string list;
+    (** OAuth 2.0 scopes applicable to this method. *)
+    mediaUpload : MediaUpload.t;
+    (** Media upload parameters. *)
     useMediaDownloadService : bool;
     (** Indicates that downloads from this method should use the download service URL (i.e. "/download"). Only applies if the method supports media download. *)
     
   }
   
-  val description : (t, string) GapiLens.t
   val etagRequired : (t, bool) GapiLens.t
-  val httpMethod : (t, string) GapiLens.t
+  val description : (t, string) GapiLens.t
+  val response : (t, Response.t) GapiLens.t
   val id : (t, string) GapiLens.t
-  val mediaUpload : (t, MediaUpload.t) GapiLens.t
-  val parameterOrder : (t, string list) GapiLens.t
   val parameters : (t, (string * JsonSchema.t) list) GapiLens.t
-  val path : (t, string) GapiLens.t
-  val request : (t, Request.t) GapiLens.t
-  val response : (t, Response.t) GapiLens.t
-  val scopes : (t, string list) GapiLens.t
+  val supportsSubscription : (t, bool) GapiLens.t
+  val parameterOrder : (t, string list) GapiLens.t
+  val flatPath : (t, string) GapiLens.t
   val supportsMediaDownload : (t, bool) GapiLens.t
+  val httpMethod : (t, string) GapiLens.t
+  val request : (t, Request.t) GapiLens.t
+  val path : (t, string) GapiLens.t
   val supportsMediaUpload : (t, bool) GapiLens.t
-  val supportsSubscription : (t, bool) GapiLens.t
+  val scopes : (t, string list) GapiLens.t
+  val mediaUpload : (t, MediaUpload.t) GapiLens.t
   val useMediaDownloadService : (t, bool) GapiLens.t
   
   val empty : t
@@ -438,15 +442,15 @@ end
 module RestResource :
 sig
   type t = {
-    methods : (string * RestMethod.t) list;
-    (** Methods on this resource. *)
     resources : (string * t) list;
     (** Sub-resources on this resource. *)
+    methods : (string * RestMethod.t) list;
+    (** Methods on this resource. *)
     
   }
   
-  val methods : (t, (string * RestMethod.t) list) GapiLens.t
   val resources : (t, (string * t) list) GapiLens.t
+  val methods : (t, (string * RestMethod.t) list) GapiLens.t
   
   val empty : t
   
@@ -538,99 +542,99 @@ sig
   end
   
   type t = {
+    ownerName : string;
+    (** The name of the owner of this API. See ownerDomain. *)
     auth : Auth.t;
     (** Authentication information. *)
-    basePath : string;
-    (** \[DEPRECATED\] The base path for REST requests. *)
-    baseUrl : string;
-    (** \[DEPRECATED\] The base URL for REST requests. *)
-    batchPath : string;
-    (** The path for REST batch requests. *)
-    canonicalName : string;
-    (** Indicates how the API name should be capitalized and split into various parts. Useful for generating pretty class names. *)
-    description : string;
-    (** The description of this API. *)
-    discoveryVersion : string;
-    (** Indicate the version of the Discovery API used to generate this doc. *)
+    revision : string;
+    (** The version of this API. *)
     documentationLink : string;
     (** A link to human readable documentation for the API. *)
+    methods : (string * RestMethod.t) list;
+    (** API-level methods for this API. *)
+    packagePath : string;
+    (** The package of the owner of this API. See ownerDomain. *)
     etag : string;
     (** The ETag for this response. *)
+    name : string;
+    (** The name of this API. *)
+    resources : (string * RestResource.t) list;
+    (** The resources in this API. *)
+    discoveryVersion : string;
+    (** Indicate the version of the Discovery API used to generate this doc. *)
+    basePath : string;
+    (** \[DEPRECATED\] The base path for REST requests. *)
+    icons : Icons.t;
+    (** Links to 16x16 and 32x32 icons representing the API. *)
     exponentialBackoffDefault : bool;
     (** Enable exponential backoff for suitable methods in the generated clients. *)
+    schemas : (string * JsonSchema.t) list;
+    (** The schemas for this API. *)
+    description : string;
+    (** The description of this API. *)
+    version_module : bool;
+    (**  *)
+    rootUrl : string;
+    (** The root URL under which all API services live. *)
+    labels : string list;
+    (** Labels for the status of this API, such as labs or deprecated. *)
+    version : string;
+    (** The version of this API. *)
     features : string list;
     (** A list of supported features for this API. *)
-    icons : Icons.t;
-    (** Links to 16x16 and 32x32 icons representing the API. *)
-    id : string;
-    (** The ID of this API. *)
     kind : string;
     (** The kind for this response. *)
-    labels : string list;
-    (** Labels for the status of this API, such as labs or deprecated. *)
-    methods : (string * RestMethod.t) list;
-    (** API-level methods for this API. *)
-    name : string;
-    (** The name of this API. *)
-    ownerDomain : string;
-    (** The domain of the owner of this API. Together with the ownerName and a packagePath values, this can be used to generate a library for this API which would have a unique fully qualified name. *)
-    ownerName : string;
-    (** The name of the owner of this API. See ownerDomain. *)
-    packagePath : string;
-    (** The package of the owner of this API. See ownerDomain. *)
+    title : string;
+    (** The title of this API. *)
+    baseUrl : string;
+    (** \[DEPRECATED\] The base URL for REST requests. *)
     parameters : (string * JsonSchema.t) list;
     (** Common parameters that apply across all apis. *)
+    batchPath : string;
+    (** The path for REST batch requests. *)
+    id : string;
+    (** The ID of this API. *)
     protocol : string;
     (** The protocol described by this document. *)
-    resources : (string * RestResource.t) list;
-    (** The resources in this API. *)
-    revision : string;
-    (** The version of this API. *)
-    rootUrl : string;
-    (** The root URL under which all API services live. *)
-    schemas : (string * JsonSchema.t) list;
-    (** The schemas for this API. *)
+    ownerDomain : string;
+    (** The domain of the owner of this API. Together with the ownerName and a packagePath values, this can be used to generate a library for this API which would have a unique fully qualified name. *)
+    canonicalName : string;
+    (** Indicates how the API name should be capitalized and split into various parts. Useful for generating pretty class names. *)
     servicePath : string;
     (** The base path for all REST requests. *)
-    title : string;
-    (** The title of this API. *)
-    version : string;
-    (** The version of this API. *)
-    version_module : bool;
-    (**  *)
     
   }
   
+  val ownerName : (t, string) GapiLens.t
   val auth : (t, Auth.t) GapiLens.t
-  val basePath : (t, string) GapiLens.t
-  val baseUrl : (t, string) GapiLens.t
-  val batchPath : (t, string) GapiLens.t
-  val canonicalName : (t, string) GapiLens.t
-  val description : (t, string) GapiLens.t
-  val discoveryVersion : (t, string) GapiLens.t
+  val revision : (t, string) GapiLens.t
   val documentationLink : (t, string) GapiLens.t
+  val methods : (t, (string * RestMethod.t) list) GapiLens.t
+  val packagePath : (t, string) GapiLens.t
   val etag : (t, string) GapiLens.t
+  val name : (t, string) GapiLens.t
+  val resources : (t, (string * RestResource.t) list) GapiLens.t
+  val discoveryVersion : (t, string) GapiLens.t
+  val basePath : (t, string) GapiLens.t
+  val icons : (t, Icons.t) GapiLens.t
   val exponentialBackoffDefault : (t, bool) GapiLens.t
+  val schemas : (t, (string * JsonSchema.t) list) GapiLens.t
+  val description : (t, string) GapiLens.t
+  val version_module : (t, bool) GapiLens.t
+  val rootUrl : (t, string) GapiLens.t
+  val labels : (t, string list) GapiLens.t
+  val version : (t, string) GapiLens.t
   val features : (t, string list) GapiLens.t
-  val icons : (t, Icons.t) GapiLens.t
-  val id : (t, string) GapiLens.t
   val kind : (t, string) GapiLens.t
-  val labels : (t, string list) GapiLens.t
-  val methods : (t, (string * RestMethod.t) list) GapiLens.t
-  val name : (t, string) GapiLens.t
-  val ownerDomain : (t, string) GapiLens.t
-  val ownerName : (t, string) GapiLens.t
-  val packagePath : (t, string) GapiLens.t
+  val title : (t, string) GapiLens.t
+  val baseUrl : (t, string) GapiLens.t
   val parameters : (t, (string * JsonSchema.t) list) GapiLens.t
+  val batchPath : (t, string) GapiLens.t
+  val id : (t, string) GapiLens.t
   val protocol : (t, string) GapiLens.t
-  val resources : (t, (string * RestResource.t) list) GapiLens.t
-  val revision : (t, string) GapiLens.t
-  val rootUrl : (t, string) GapiLens.t
-  val schemas : (t, (string * JsonSchema.t) list) GapiLens.t
+  val ownerDomain : (t, string) GapiLens.t
+  val canonicalName : (t, string) GapiLens.t
   val servicePath : (t, string) GapiLens.t
-  val title : (t, string) GapiLens.t
-  val version : (t, string) GapiLens.t
-  val version_module : (t, bool) GapiLens.t
   
   val empty : t
   
diff --git a/src/gapi/gapiDiscoveryV1Service.ml b/src/gapi/gapiDiscoveryV1Service.ml
index 257982b9..f6c0ee42 100644
--- a/src/gapi/gapiDiscoveryV1Service.ml
+++ b/src/gapi/gapiDiscoveryV1Service.ml
@@ -1,4 +1,5 @@
-(* Warning! This file is generated. Modify at your own risk. *)
+(* Warning! This file is generated. Modify at your own risk.
+        *)
 
 open GapiUtils.Infix
 open GapiDiscoveryV1Model
@@ -67,9 +68,25 @@ struct
     
   end
   
+  let list
+        ?(base_url = "https://www.googleapis.com/discovery/v1/")
+        ?std_params
+        ?custom_headers
+        ?(preferred = false)
+        ?name
+        session =
+    let full_url = GapiUtils.add_path_to_url ["apis"] base_url in
+    let params = ApisParameters.merge_parameters
+      ?standard_parameters:std_params ~preferred ?name () in
+    let query_parameters = GapiOption.map ApisParameters.to_key_value_list
+      params in
+    GapiService.get ?query_parameters ?custom_headers full_url
+      (GapiJson.parse_json_response DirectoryList.of_data_model) session 
+    
   let getRest
         ?(base_url = "https://www.googleapis.com/discovery/v1/")
         ?std_params
+        ?custom_headers
         ~api
         ~version
         session =
@@ -77,25 +94,11 @@ struct
       ((fun x -> x) version); "rest"] base_url in
     let params = ApisParameters.merge_parameters
       ?standard_parameters:std_params () in
-    let query_parameters = GapiOption.map ApisParameters.to_key_value_list params
-      in
-    GapiService.get ?query_parameters full_url
+    let query_parameters = GapiOption.map ApisParameters.to_key_value_list
+      params in
+    GapiService.get ?query_parameters ?custom_headers full_url
       (GapiJson.parse_json_response RestDescription.of_data_model) session 
     
-  let list
-        ?(base_url = "https://www.googleapis.com/discovery/v1/")
-        ?std_params
-        ?(preferred = false)
-        ?name
-        session =
-    let full_url = GapiUtils.add_path_to_url ["apis"] base_url in
-    let params = ApisParameters.merge_parameters
-      ?standard_parameters:std_params ?name ~preferred () in
-    let query_parameters = GapiOption.map ApisParameters.to_key_value_list params
-      in
-    GapiService.get ?query_parameters full_url
-      (GapiJson.parse_json_response DirectoryList.of_data_model) session 
-    
   
 end
 
diff --git a/src/gapi/gapiDiscoveryV1Service.mli b/src/gapi/gapiDiscoveryV1Service.mli
index 6df4adfb..5d25e647 100644
--- a/src/gapi/gapiDiscoveryV1Service.mli
+++ b/src/gapi/gapiDiscoveryV1Service.mli
@@ -1,6 +1,7 @@
-(* Warning! This file is generated. Modify at your own risk. *)
+(* Warning! This file is generated. Modify at your own risk.
+        *)
 
-(** Service definition for APIs Discovery Service (v1).
+(** Service definition for API Discovery Service (v1).
   
   Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API..
   
@@ -11,35 +12,39 @@
 module ApisResource :
 sig
   
-  (** Retrieve the description of a particular version of an api.
+  (** Retrieve the list of APIs supported at this endpoint.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/discovery/v1/"]).
     @param std_params Optional standard parameters.
-    @param api The name of the API.
-    @param version The version of the API.
+    @param custom_headers Optional HTTP custom headers.
+    @param preferred Return only the preferred version of an API.
+    @param name Only include APIs with the given name.
     *)
-  val getRest :
+  val list :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    api:string ->
-    version:string ->
+    ?custom_headers:GapiCore.Header.t list ->
+    ?preferred:bool ->
+    ?name:string ->
     GapiConversation.Session.t ->
-    GapiDiscoveryV1Model.RestDescription.t * GapiConversation.Session.t
+    GapiDiscoveryV1Model.DirectoryList.t * GapiConversation.Session.t
   
-  (** Retrieve the list of APIs supported at this endpoint.
+  (** Retrieve the description of a particular version of an api.
     
     @param base_url Service endpoint base URL (defaults to ["https://www.googleapis.com/discovery/v1/"]).
     @param std_params Optional standard parameters.
-    @param preferred Return only the preferred version of an API.
-    @param name Only include APIs with the given name.
+    @param custom_headers Optional HTTP custom headers.
+    @param api The name of the API.
+    @param version The version of the API.
     *)
-  val list :
+  val getRest :
     ?base_url:string ->
     ?std_params:GapiService.StandardParameters.t ->
-    ?preferred:bool ->
-    ?name:string ->
+    ?custom_headers:GapiCore.Header.t list ->
+    api:string ->
+    version:string ->
     GapiConversation.Session.t ->
-    GapiDiscoveryV1Model.DirectoryList.t * GapiConversation.Session.t
+    GapiDiscoveryV1Model.RestDescription.t * GapiConversation.Session.t
   
   
 end
diff --git a/src/gapi/gapiJson.ml b/src/gapi/gapiJson.ml
index 84cf539d..08f862b5 100644
--- a/src/gapi/gapiJson.ml
+++ b/src/gapi/gapiJson.ml
@@ -14,7 +14,7 @@ type json_metadata = { name : string; data_type : json_data_type }
 let metadata_description { name = n; data_type = dt } =
   Printf.sprintf "name=%s data_type=%s" n (json_data_type_to_string dt)
 
-type json_data_model = (json_metadata, Yojson.Safe.json) AnnotatedTree.t
+type json_data_model = (json_metadata, Yojson.Safe.t) AnnotatedTree.t
 
 let unexpected r e x =
   ( match e with
diff --git a/src/gapi/gapiJson.mli b/src/gapi/gapiJson.mli
index 313478d4..1253c150 100644
--- a/src/gapi/gapiJson.mli
+++ b/src/gapi/gapiJson.mli
@@ -10,12 +10,12 @@ type json_metadata = { name : string; data_type : json_data_type }
 val metadata_description : json_metadata -> string
 
 type json_data_model =
-  (json_metadata, Yojson.Safe.json) GapiCore.AnnotatedTree.t
+  (json_metadata, Yojson.Safe.t) GapiCore.AnnotatedTree.t
 
 val unexpected : string -> json_data_model -> 'a -> 'a
 
 val render_value :
-  string -> Yojson.Safe.json -> Yojson.Safe.json -> json_data_model list
+  string -> Yojson.Safe.t -> Yojson.Safe.t -> json_data_model list
 
 val render_string_value :
   ?default:string -> string -> string -> json_data_model list
@@ -78,9 +78,9 @@ val parse_string_element : string -> json_data_model -> string
 val parse_dictionary_entry :
   string * string -> json_data_model -> string * string
 
-val json_to_data_model : Yojson.Safe.json -> json_data_model
+val json_to_data_model : Yojson.Safe.t -> json_data_model
 
-val data_model_to_json : json_data_model -> Yojson.Safe.json
+val data_model_to_json : json_data_model -> Yojson.Safe.t
 
 val parse_json_response :
   (json_data_model -> 'a) -> GapiPipe.OcamlnetPipe.t -> 'a
diff --git a/src/gapi/gapiMediaResource.ml b/src/gapi/gapiMediaResource.ml
index 0ae8368f..46466444 100644
--- a/src/gapi/gapiMediaResource.ml
+++ b/src/gapi/gapiMediaResource.ml
@@ -147,7 +147,7 @@ let get_resource_length = function
 
 let get_content_type filename =
   let extension =
-    try GapiUtils.string_after_char '.' filename |> String.lowercase
+    try GapiUtils.string_after_char '.' filename |> String.lowercase [@warning "-3"]
     with Not_found -> ""
   in
   match extension with
diff --git a/src/gapi/gapiServiceAccountCredentials.mli b/src/gapi/gapiServiceAccountCredentials.mli
index ca1085a3..16cb8c50 100644
--- a/src/gapi/gapiServiceAccountCredentials.mli
+++ b/src/gapi/gapiServiceAccountCredentials.mli
@@ -33,7 +33,7 @@ val client_x509_cert_url : (t, string) GapiLens.t
 
 val to_data_model : t -> GapiJson.json_data_model
 
-val to_json : t -> Yojson.Safe.json
+val to_json : t -> Yojson.Safe.t
 
 val parse_json : string -> t
 
diff --git a/src/test/dune b/src/test/dune
index 5d955f42..ef45f0ce 100644
--- a/src/test/dune
+++ b/src/test/dune
@@ -1,7 +1,7 @@
 (executable
  (name testSuite)
  (flags (:standard -w -3-6-23-27-32-33-50))
- (libraries threads oUnit gapi-ocaml))
+ (libraries threads ounit2 gapi-ocaml))
 
 (alias
  (name runtest)
diff --git a/src/test/testSuite.ml b/src/test/testSuite.ml
index 7851661e..150781f7 100644
--- a/src/test/testSuite.ml
+++ b/src/test/testSuite.ml
@@ -76,11 +76,11 @@ let build_suite_from_list test_list =
 
 let _ =
   let test_list = ref (core_tests @ model_tests) in
-  let ounit_specs =
+  let ounit2_specs =
     [
-      ("-verbose", Arg.Unit (fun _ -> ()), "See oUnit doc");
-      ("-only-test", Arg.String (fun _ -> ()), "See oUnit doc");
-      ("-list-test", Arg.String (fun _ -> ()), "See oUnit doc");
+      ("-verbose", Arg.Unit (fun _ -> ()), "See ounit2 doc");
+      ("-only-test", Arg.String (fun _ -> ()), "See ounit2 doc");
+      ("-list-test", Arg.String (fun _ -> ()), "See ounit2 doc");
     ]
   in
   let arg_specs =
@@ -100,9 +100,9 @@ let _ =
       ]
   in
   let _ =
-    Arg.parse (arg_specs @ ounit_specs)
+    Arg.parse (arg_specs @ ounit2_specs)
       (fun _ -> ())
-      ("Usage: " ^ Sys.argv.(0) ^ " [-service svc] [-all] [oUnit arguments]")
+      ("Usage: " ^ Sys.argv.(0) ^ " [-service svc] [-all] [ounit2 arguments]")
   in
   let _ =
     (* Reset argument counter, to let OUnit reparse arguments *)
diff --git a/src/test/test_data/test_calendar_acl.json b/src/test/test_data/test_calendar_acl.json
index 557966d4..087918c6 100644
--- a/src/test/test_data/test_calendar_acl.json
+++ b/src/test/test_data/test_calendar_acl.json
@@ -1,25 +1,24 @@
 {
-  "etag": "etag",
+  "kind": "calendar#acl",
   "items": [
     {
-      "id": "rule1Id",
       "kind": "calendar#aclRule",
+      "id": "rule1Id",
       "role": "owner",
       "scope": {
-        "type": "user",
-        "value": "userEmail"
+        "value": "userEmail",
+        "type": "user"
       }
     },
     {
-      "id": "rule2Id",
       "kind": "calendar#aclRule",
+      "id": "rule2Id",
       "role": "reader",
       "scope": {
-        "type": "domain",
-        "value": "domainName"
+        "value": "domainName",
+        "type": "domain"
       }
     }
   ],
-  "kind": "calendar#acl"
+  "etag": "etag"
 }
-
diff --git a/src/test/test_data/test_calendar_colors.json b/src/test/test_data/test_calendar_colors.json
index 7ef994a3..051ef870 100644
--- a/src/test/test_data/test_calendar_colors.json
+++ b/src/test/test_data/test_calendar_colors.json
@@ -1,4 +1,5 @@
 {
+  "updated": "2011-09-21T00:00:00.000Z",
   "calendar": {
     "1": {
       "background": "#ac725e",
@@ -97,6 +98,7 @@
       "foreground": "#1d1d1d"
     }
   },
+  "kind": "calendar#colors",
   "event": {
     "1": {
       "background": "#a4bdfc",
@@ -130,8 +132,5 @@
       "background": "#e1e1e1",
       "foreground": "#1d1d1d"
     }
-  },
-  "kind": "calendar#colors",
-  "updated": "2011-09-21T00:00:00.000Z"
+  }
 }
-
diff --git a/src/test/test_data/test_calendar_event_list.json b/src/test/test_data/test_calendar_event_list.json
index da6e0e36..a4489e89 100644
--- a/src/test/test_data/test_calendar_event_list.json
+++ b/src/test/test_data/test_calendar_event_list.json
@@ -1,15 +1,31 @@
 {
-  "accessRole": "owner",
+  "timeZone": "America/Los_Angeles",
   "defaultReminders": [
     {
       "method": "popup",
       "minutes": 10
     }
   ],
-  "description": "calendarDescription",
-  "etag": "eventsListEtag",
+  "summary": "calendarSummary",
+  "kind": "calendar#events",
   "items": [
     {
+      "location": "Somewhere",
+      "reminders": {
+        "useDefault": true
+      },
+      "htmlLink": "https://www.google.com/calendar/event?eid=eventEid",
+      "updated": "2011-07-11T20:35:20.000Z",
+      "guestsCanInviteOthers": true,
+      "iCalUID": "eventUID",
+      "guestsCanSeeOtherGuests": true,
+      "status": "confirmed",
+      "organizer": {
+        "email": "organizerEmail",
+        "displayName": "organizerDisplayName"
+      },
+      "id": "hnsq57lde03gpv5a4kup057ja0",
+      "kind": "calendar#event",
       "attendees": [
         {
           "displayName": "attendeeDisplayName",
@@ -27,37 +43,20 @@
       "creator": {
         "email": "userEmail"
       },
-      "end": {
-        "dateTime": "2011-06-03T10:25:00.000-07:00",
-        "timeZone": "America/Los_Angeles"
-      },
-      "guestsCanInviteOthers": true,
-      "guestsCanSeeOtherGuests": true,
-      "htmlLink": "https://www.google.com/calendar/event?eid=eventEid",
-      "iCalUID": "eventUID",
-      "id": "hnsq57lde03gpv5a4kup057ja0",
-      "kind": "calendar#event",
-      "location": "Somewhere",
-      "organizer": {
-        "displayName": "organizerDisplayName",
-        "email": "organizerEmail"
-      },
-      "reminders": {
-        "useDefault": true
-      },
+      "summary": "Appointment",
       "start": {
-        "dateTime": "2011-06-03T10:00:00.000-07:00",
-        "timeZone": "America/Los_Angeles"
+        "timeZone": "America/Los_Angeles",
+        "dateTime": "2011-06-03T10:00:00.000-07:00"
       },
-      "status": "confirmed",
-      "summary": "Appointment",
-      "updated": "2011-07-11T20:35:20.000Z"
+      "end": {
+        "timeZone": "America/Los_Angeles",
+        "dateTime": "2011-06-03T10:25:00.000-07:00"
+      }
     }
   ],
-  "kind": "calendar#events",
+  "description": "calendarDescription",
   "nextPageToken": "nextPageToken",
-  "summary": "calendarSummary",
-  "timeZone": "America/Los_Angeles",
-  "updated": "2011-05-15T11:03:47.000Z"
+  "updated": "2011-05-15T11:03:47.000Z",
+  "etag": "eventsListEtag",
+  "accessRole": "owner"
 }
-
diff --git a/src/test/test_data/test_calendar_event_resource.json b/src/test/test_data/test_calendar_event_resource.json
index b5a503d2..40c67301 100644
--- a/src/test/test_data/test_calendar_event_resource.json
+++ b/src/test/test_data/test_calendar_event_resource.json
@@ -1,4 +1,20 @@
 {
+  "location": "Somewhere",
+  "reminders": {
+    "useDefault": true
+  },
+  "htmlLink": "https://www.google.com/calendar/event?eid=eventEid",
+  "updated": "2011-07-11T20:35:20.000Z",
+  "guestsCanInviteOthers": true,
+  "iCalUID": "eventUID",
+  "guestsCanSeeOtherGuests": true,
+  "status": "confirmed",
+  "organizer": {
+    "email": "organizerEmail",
+    "displayName": "organizerDisplayName"
+  },
+  "id": "hnsq57lde03gpv5a4kup057ja0",
+  "kind": "calendar#event",
   "attendees": [
     {
       "displayName": "attendeeDisplayName",
@@ -16,30 +32,13 @@
   "creator": {
     "email": "userEmail"
   },
-  "end": {
-    "dateTime": "2011-06-03T10:25:00.000-07:00",
-    "timeZone": "America/Los_Angeles"
-  },
-  "guestsCanInviteOthers": true,
-  "guestsCanSeeOtherGuests": true,
-  "htmlLink": "https://www.google.com/calendar/event?eid=eventEid",
-  "iCalUID": "eventUID",
-  "id": "hnsq57lde03gpv5a4kup057ja0",
-  "kind": "calendar#event",
-  "location": "Somewhere",
-  "organizer": {
-    "displayName": "organizerDisplayName",
-    "email": "organizerEmail"
-  },
-  "reminders": {
-    "useDefault": true
-  },
+  "summary": "Appointment",
   "start": {
-    "dateTime": "2011-06-03T10:00:00.000-07:00",
-    "timeZone": "America/Los_Angeles"
+    "timeZone": "America/Los_Angeles",
+    "dateTime": "2011-06-03T10:00:00.000-07:00"
   },
-  "status": "confirmed",
-  "summary": "Appointment",
-  "updated": "2011-07-11T20:35:20.000Z"
+  "end": {
+    "timeZone": "America/Los_Angeles",
+    "dateTime": "2011-06-03T10:25:00.000-07:00"
+  }
 }
-
diff --git a/src/test/test_data/test_calendar_list.json b/src/test/test_data/test_calendar_list.json
index 0e937a94..10f32207 100644
--- a/src/test/test_data/test_calendar_list.json
+++ b/src/test/test_data/test_calendar_list.json
@@ -1,17 +1,18 @@
 {
-  "etag": "calendarListEtag",
   "items": [
     {
+      "kind": "calendar#calendarListEntry",
       "accessRole": "reader",
-      "colorId": "1",
       "description": "Week numbers displayed weekly",
-      "id": "e_2_en#weeknum@group.v.calendar.google.com",
-      "kind": "calendar#calendarListEntry",
+      "timeZone": "America/Los_Angeles",
+      "colorId": "1",
       "summary": "Week Numbers",
-      "timeZone": "America/Los_Angeles"
+      "id": "e_2_en#weeknum@group.v.calendar.google.com"
     },
     {
+      "kind": "calendar#calendarListEntry",
       "accessRole": "owner",
+      "timeZone": "America/Los_Angeles",
       "colorId": "calendarListEntryColorId",
       "defaultReminders": [
         {
@@ -19,12 +20,11 @@
           "minutes": 10
         }
       ],
-      "id": "calendarListEntryId",
-      "kind": "calendar#calendarListEntry",
       "summary": "calendarListEntrySummary",
-      "timeZone": "America/Los_Angeles"
+      "id": "calendarListEntryId"
     }
   ],
+  "nextPageToken": "nextPageToken",
   "kind": "calendar#calendarList",
-  "nextPageToken": "nextPageToken"
+  "etag": "calendarListEtag"
 }
diff --git a/src/test/test_data/test_calendar_rest_service.json b/src/test/test_data/test_calendar_rest_service.json
index dad263e1..671e7ed8 100644
--- a/src/test/test_data/test_calendar_rest_service.json
+++ b/src/test/test_data/test_calendar_rest_service.json
@@ -11,111 +11,64 @@
       }
     }
   },
-  "basePath": "/calendar/v3/",
-  "description": "Lets you manipulate events and other calendar data.",
   "documentationLink": "http://code.google.com/apis/calendar/v3/using.html",
-  "icons": {
-    "x16": "http://www.google.com/images/icons/product/calendar-16.png",
-    "x32": "http://www.google.com/images/icons/product/calendar-32.png"
-  },
-  "id": "calendar:v3",
-  "kind": "discovery#restDescription",
-  "labels": [ "labs" ],
   "name": "calendar",
-  "parameters": {
-    "alt": {
-      "default": "json",
-      "description": "Data format for the response.",
-      "enum": [ "json" ],
-      "enumDescriptions": [
-        "Responses with Content-Type of application/json"
-      ],
-      "location": "query",
-      "type": "string"
-    },
-    "fields": {
-      "description":
-        "Selector specifying which fields to include in a partial response.",
-      "location": "query",
-      "type": "string"
-    },
-    "key": {
-      "description":
-        "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
-      "location": "query",
-      "type": "string"
-    },
-    "oauth_token": {
-      "description": "OAuth 2.0 token for the current user.",
-      "location": "query",
-      "type": "string"
-    },
-    "prettyPrint": {
-      "default": "true",
-      "description": "Returns response with indentations and line breaks.",
-      "location": "query",
-      "type": "boolean"
-    },
-    "quotaUser": {
-      "description":
-        "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.",
-      "location": "query",
-      "type": "string"
-    },
-    "userIp": {
-      "description":
-        "IP address of the site where the request originates. Use this if you want to enforce per-user limits.",
-      "location": "query",
-      "type": "string"
-    }
-  },
-  "protocol": "rest",
   "resources": {
     "acl": {
       "methods": {
         "delete": {
           "description": "Deletes an access control rule.",
-          "httpMethod": "DELETE",
           "id": "calendar.acl.delete",
-          "parameterOrder": [ "calendarId", "ruleId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             },
             "ruleId": {
-              "description": "ACL rule identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "ACL rule identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId",
+            "ruleId"
+          ],
+          "httpMethod": "DELETE",
           "path": "calendars/{calendarId}/acl/{ruleId}",
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "get": {
           "description": "Returns an access control rule.",
-          "httpMethod": "GET",
+          "response": {
+            "$ref": "AclRule"
+          },
           "id": "calendar.acl.get",
-          "parameterOrder": [ "calendarId", "ruleId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             },
             "ruleId": {
-              "description": "ACL rule identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "ACL rule identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId",
+            "ruleId"
+          ],
+          "httpMethod": "GET",
           "path": "calendars/{calendarId}/acl/{ruleId}",
-          "response": { "$ref": "AclRule" },
           "scopes": [
             "https://www.googleapis.com/auth/calendar",
             "https://www.googleapis.com/auth/calendar.readonly"
@@ -123,91 +76,119 @@
         },
         "insert": {
           "description": "Creates an access control rule.",
-          "httpMethod": "POST",
+          "response": {
+            "$ref": "AclRule"
+          },
           "id": "calendar.acl.insert",
-          "parameterOrder": [ "calendarId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId"
+          ],
+          "httpMethod": "POST",
+          "request": {
+            "$ref": "AclRule"
+          },
           "path": "calendars/{calendarId}/acl",
-          "request": { "$ref": "AclRule" },
-          "response": { "$ref": "AclRule" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "list": {
-          "description":
-            "Returns the rules in the access control list for the calendar.",
-          "httpMethod": "GET",
+          "description": "Returns the rules in the access control list for the calendar.",
+          "response": {
+            "$ref": "Acl"
+          },
           "id": "calendar.acl.list",
-          "parameterOrder": [ "calendarId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId"
+          ],
+          "httpMethod": "GET",
           "path": "calendars/{calendarId}/acl",
-          "response": { "$ref": "Acl" },
           "scopes": [
             "https://www.googleapis.com/auth/calendar",
             "https://www.googleapis.com/auth/calendar.readonly"
           ]
         },
         "patch": {
-          "description":
-            "Updates an access control rule. This method supports patch semantics.",
-          "httpMethod": "PATCH",
+          "description": "Updates an access control rule. This method supports patch semantics.",
+          "response": {
+            "$ref": "AclRule"
+          },
           "id": "calendar.acl.patch",
-          "parameterOrder": [ "calendarId", "ruleId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             },
             "ruleId": {
-              "description": "ACL rule identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "ACL rule identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId",
+            "ruleId"
+          ],
+          "httpMethod": "PATCH",
+          "request": {
+            "$ref": "AclRule"
+          },
           "path": "calendars/{calendarId}/acl/{ruleId}",
-          "request": { "$ref": "AclRule" },
-          "response": { "$ref": "AclRule" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "update": {
           "description": "Updates an access control rule.",
-          "httpMethod": "PUT",
+          "response": {
+            "$ref": "AclRule"
+          },
           "id": "calendar.acl.update",
-          "parameterOrder": [ "calendarId", "ruleId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             },
             "ruleId": {
-              "description": "ACL rule identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "ACL rule identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId",
+            "ruleId"
+          ],
+          "httpMethod": "PUT",
+          "request": {
+            "$ref": "AclRule"
+          },
           "path": "calendars/{calendarId}/acl/{ruleId}",
-          "request": { "$ref": "AclRule" },
-          "response": { "$ref": "AclRule" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         }
       }
     },
@@ -215,35 +196,43 @@
       "methods": {
         "delete": {
           "description": "Deletes an entry on the user's calendar list.",
-          "httpMethod": "DELETE",
           "id": "calendar.calendarList.delete",
-          "parameterOrder": [ "calendarId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId"
+          ],
+          "httpMethod": "DELETE",
           "path": "users/me/calendarList/{calendarId}",
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "get": {
           "description": "Returns an entry on the user's calendar list.",
-          "httpMethod": "GET",
+          "response": {
+            "$ref": "CalendarListEntry"
+          },
           "id": "calendar.calendarList.get",
-          "parameterOrder": [ "calendarId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId"
+          ],
+          "httpMethod": "GET",
           "path": "users/me/calendarList/{calendarId}",
-          "response": { "$ref": "CalendarListEntry" },
           "scopes": [
             "https://www.googleapis.com/auth/calendar",
             "https://www.googleapis.com/auth/calendar.readonly"
@@ -251,148 +240,183 @@
         },
         "insert": {
           "description": "Adds an entry to the user's calendar list.",
-          "httpMethod": "POST",
+          "response": {
+            "$ref": "CalendarListEntry"
+          },
           "id": "calendar.calendarList.insert",
+          "httpMethod": "POST",
+          "request": {
+            "$ref": "CalendarListEntry"
+          },
           "path": "users/me/calendarList",
-          "request": { "$ref": "CalendarListEntry" },
-          "response": { "$ref": "CalendarListEntry" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "list": {
           "description": "Returns entries on the user's calendar list.",
-          "httpMethod": "GET",
+          "response": {
+            "$ref": "CalendarList"
+          },
           "id": "calendar.calendarList.list",
           "parameters": {
             "maxResults": {
-              "description":
-                "Maximum number of entries returned on one result page. Optional.",
-              "format": "int32",
               "location": "query",
+              "type": "integer",
               "minimum": "1",
-              "type": "integer"
+              "description": "Maximum number of entries returned on one result page. Optional.",
+              "format": "int32"
             },
             "minAccessRole": {
-              "description":
-                "The minimum access role for the user in the returned entires. Optional. The default is no restriction.",
-              "enum": [ "freeBusyReader", "owner", "reader", "writer" ],
+              "location": "query",
+              "enum": [
+                "freeBusyReader",
+                "owner",
+                "reader",
+                "writer"
+              ],
+              "type": "string",
+              "description": "The minimum access role for the user in the returned entires. Optional. The default is no restriction.",
               "enumDescriptions": [
                 "The user can read free/busy information.",
                 "The user can read and modify events and access control lists.",
                 "The user can read events that are not private.",
                 "The user can read and modify events."
-              ],
-              "location": "query",
-              "type": "string"
+              ]
             },
             "pageToken": {
-              "description":
-                "Token specifying which result page to return. Optional.",
               "location": "query",
-              "type": "string"
+              "type": "string",
+              "description": "Token specifying which result page to return. Optional."
             },
             "showHidden": {
-              "description":
-                "Whether to show hidden entries. Optional. The default is False.",
               "location": "query",
-              "type": "boolean"
+              "type": "boolean",
+              "description": "Whether to show hidden entries. Optional. The default is False."
             }
           },
+          "httpMethod": "GET",
           "path": "users/me/calendarList",
-          "response": { "$ref": "CalendarList" },
           "scopes": [
             "https://www.googleapis.com/auth/calendar",
             "https://www.googleapis.com/auth/calendar.readonly"
           ]
         },
         "patch": {
-          "description":
-            "Updates an entry on the user's calendar list. This method supports patch semantics.",
-          "httpMethod": "PATCH",
+          "description": "Updates an entry on the user's calendar list. This method supports patch semantics.",
+          "response": {
+            "$ref": "CalendarListEntry"
+          },
           "id": "calendar.calendarList.patch",
-          "parameterOrder": [ "calendarId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId"
+          ],
+          "httpMethod": "PATCH",
+          "request": {
+            "$ref": "CalendarListEntry"
+          },
           "path": "users/me/calendarList/{calendarId}",
-          "request": { "$ref": "CalendarListEntry" },
-          "response": { "$ref": "CalendarListEntry" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "update": {
           "description": "Updates an entry on the user's calendar list.",
-          "httpMethod": "PUT",
+          "response": {
+            "$ref": "CalendarListEntry"
+          },
           "id": "calendar.calendarList.update",
-          "parameterOrder": [ "calendarId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId"
+          ],
+          "httpMethod": "PUT",
+          "request": {
+            "$ref": "CalendarListEntry"
+          },
           "path": "users/me/calendarList/{calendarId}",
-          "request": { "$ref": "CalendarListEntry" },
-          "response": { "$ref": "CalendarListEntry" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         }
       }
     },
     "calendars": {
       "methods": {
         "clear": {
-          "description":
-            "Clears a primary calendar. This operation deletes all data associated with the primary calendar of an account and cannot be undone.",
-          "httpMethod": "POST",
+          "description": "Clears a primary calendar. This operation deletes all data associated with the primary calendar of an account and cannot be undone.",
           "id": "calendar.calendars.clear",
-          "parameterOrder": [ "calendarId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId"
+          ],
+          "httpMethod": "POST",
           "path": "calendars/{calendarId}/clear",
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "delete": {
           "description": "Deletes a secondary calendar.",
-          "httpMethod": "DELETE",
           "id": "calendar.calendars.delete",
-          "parameterOrder": [ "calendarId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId"
+          ],
+          "httpMethod": "DELETE",
           "path": "calendars/{calendarId}",
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "get": {
           "description": "Returns metadata for a calendar.",
-          "httpMethod": "GET",
+          "response": {
+            "$ref": "Calendar"
+          },
           "id": "calendar.calendars.get",
-          "parameterOrder": [ "calendarId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId"
+          ],
+          "httpMethod": "GET",
           "path": "calendars/{calendarId}",
-          "response": { "$ref": "Calendar" },
           "scopes": [
             "https://www.googleapis.com/auth/calendar",
             "https://www.googleapis.com/auth/calendar.readonly"
@@ -400,61 +424,83 @@
         },
         "insert": {
           "description": "Creates a secondary calendar.",
-          "httpMethod": "POST",
+          "response": {
+            "$ref": "Calendar"
+          },
           "id": "calendar.calendars.insert",
+          "httpMethod": "POST",
+          "request": {
+            "$ref": "Calendar"
+          },
           "path": "calendars",
-          "request": { "$ref": "Calendar" },
-          "response": { "$ref": "Calendar" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "patch": {
-          "description":
-            "Updates metadata for a calendar. This method supports patch semantics.",
-          "httpMethod": "PATCH",
+          "description": "Updates metadata for a calendar. This method supports patch semantics.",
+          "response": {
+            "$ref": "Calendar"
+          },
           "id": "calendar.calendars.patch",
-          "parameterOrder": [ "calendarId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId"
+          ],
+          "httpMethod": "PATCH",
+          "request": {
+            "$ref": "Calendar"
+          },
           "path": "calendars/{calendarId}",
-          "request": { "$ref": "Calendar" },
-          "response": { "$ref": "Calendar" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "update": {
           "description": "Updates metadata for a calendar.",
-          "httpMethod": "PUT",
+          "response": {
+            "$ref": "Calendar"
+          },
           "id": "calendar.calendars.update",
-          "parameterOrder": [ "calendarId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId"
+          ],
+          "httpMethod": "PUT",
+          "request": {
+            "$ref": "Calendar"
+          },
           "path": "calendars/{calendarId}",
-          "request": { "$ref": "Calendar" },
-          "response": { "$ref": "Calendar" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         }
       }
     },
     "colors": {
       "methods": {
         "get": {
-          "description":
-            "Returns the color definitions for calendars and events.",
-          "httpMethod": "GET",
+          "description": "Returns the color definitions for calendars and events.",
+          "response": {
+            "$ref": "Colors"
+          },
           "id": "calendar.colors.get",
-          "path": "colors",
-          "response": { "$ref": "Colors" }
+          "httpMethod": "GET",
+          "path": "colors"
         }
       }
     },
@@ -462,67 +508,74 @@
       "methods": {
         "delete": {
           "description": "Deletes an event.",
-          "httpMethod": "DELETE",
           "id": "calendar.events.delete",
-          "parameterOrder": [ "calendarId", "eventId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             },
             "eventId": {
-              "description": "Event identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Event identifier."
             },
             "sendNotifications": {
-              "description":
-                "Whether to send notifications about the deletion of the event. Optional. The default is False.",
               "location": "query",
-              "type": "boolean"
+              "type": "boolean",
+              "description": "Whether to send notifications about the deletion of the event. Optional. The default is False."
             }
           },
+          "parameterOrder": [
+            "calendarId",
+            "eventId"
+          ],
+          "httpMethod": "DELETE",
           "path": "calendars/{calendarId}/events/{eventId}",
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "get": {
           "description": "Returns an event.",
-          "httpMethod": "GET",
+          "response": {
+            "$ref": "Event"
+          },
           "id": "calendar.events.get",
-          "parameterOrder": [ "calendarId", "eventId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             },
             "eventId": {
-              "description": "Event identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Event identifier."
             },
             "maxAttendees": {
-              "description":
-                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
-              "format": "int32",
               "location": "query",
+              "type": "integer",
               "minimum": "1",
-              "type": "integer"
+              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
+              "format": "int32"
             },
             "timeZone": {
-              "description":
-                "Time zone used in the response. Optional. The default is the time zone of the calendar.",
               "location": "query",
-              "type": "string"
+              "type": "string",
+              "description": "Time zone used in the response. Optional. The default is the time zone of the calendar."
             }
           },
+          "parameterOrder": [
+            "calendarId",
+            "eventId"
+          ],
+          "httpMethod": "GET",
           "path": "calendars/{calendarId}/events/{eventId}",
-          "response": { "$ref": "Event" },
           "scopes": [
             "https://www.googleapis.com/auth/calendar",
             "https://www.googleapis.com/auth/calendar.readonly"
@@ -530,108 +583,121 @@
         },
         "import": {
           "description": "Imports an event.",
-          "httpMethod": "POST",
+          "response": {
+            "$ref": "Event"
+          },
           "id": "calendar.events.import",
-          "parameterOrder": [ "calendarId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             }
           },
+          "parameterOrder": [
+            "calendarId"
+          ],
+          "httpMethod": "POST",
+          "request": {
+            "$ref": "Event"
+          },
           "path": "calendars/{calendarId}/events/import",
-          "request": { "$ref": "Event" },
-          "response": { "$ref": "Event" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "insert": {
           "description": "Creates an event.",
-          "httpMethod": "POST",
+          "response": {
+            "$ref": "Event"
+          },
           "id": "calendar.events.insert",
-          "parameterOrder": [ "calendarId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             },
             "sendNotifications": {
-              "description":
-                "Whether to send notifications about the creation of the new event. Optional. The default is False.",
               "location": "query",
-              "type": "boolean"
+              "type": "boolean",
+              "description": "Whether to send notifications about the creation of the new event. Optional. The default is False."
             }
           },
+          "parameterOrder": [
+            "calendarId"
+          ],
+          "httpMethod": "POST",
+          "request": {
+            "$ref": "Event"
+          },
           "path": "calendars/{calendarId}/events",
-          "request": { "$ref": "Event" },
-          "response": { "$ref": "Event" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "instances": {
-          "description":
-            "Returns instances of the specified recurring event.",
-          "httpMethod": "GET",
+          "description": "Returns instances of the specified recurring event.",
+          "response": {
+            "$ref": "Events"
+          },
           "id": "calendar.events.instances",
-          "parameterOrder": [ "calendarId", "eventId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             },
             "eventId": {
-              "description": "Recurring event identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Recurring event identifier."
             },
             "maxAttendees": {
-              "description":
-                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
-              "format": "int32",
               "location": "query",
+              "type": "integer",
               "minimum": "1",
-              "type": "integer"
+              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
+              "format": "int32"
             },
             "maxResults": {
-              "description":
-                "Maximum number of events returned on one result page. Optional.",
-              "format": "int32",
               "location": "query",
+              "type": "integer",
               "minimum": "1",
-              "type": "integer"
+              "description": "Maximum number of events returned on one result page. Optional.",
+              "format": "int32"
             },
             "originalStart": {
-              "description":
-                "The original start time of the instance in the result. Optional.",
               "location": "query",
-              "type": "string"
+              "type": "string",
+              "description": "The original start time of the instance in the result. Optional."
             },
             "pageToken": {
-              "description":
-                "Token specifying which result page to return. Optional.",
               "location": "query",
-              "type": "string"
+              "type": "string",
+              "description": "Token specifying which result page to return. Optional."
             },
             "showDeleted": {
-              "description":
-                "Whether to include deleted events (with 'eventStatus' equals 'cancelled') in the result. Optional. The default is False.",
               "location": "query",
-              "type": "boolean"
+              "type": "boolean",
+              "description": "Whether to include deleted events (with 'eventStatus' equals 'cancelled') in the result. Optional. The default is False."
             },
             "timeZone": {
-              "description":
-                "Time zone used in the response. Optional. The default is the time zone of the calendar.",
               "location": "query",
-              "type": "string"
+              "type": "string",
+              "description": "Time zone used in the response. Optional. The default is the time zone of the calendar."
             }
           },
+          "parameterOrder": [
+            "calendarId",
+            "eventId"
+          ],
+          "httpMethod": "GET",
           "path": "calendars/{calendarId}/events/{eventId}/instances",
-          "response": { "$ref": "Events" },
           "scopes": [
             "https://www.googleapis.com/auth/calendar",
             "https://www.googleapis.com/auth/calendar.readonly"
@@ -639,281 +705,308 @@
         },
         "list": {
           "description": "Returns events on the specified calendar.",
-          "httpMethod": "GET",
+          "response": {
+            "$ref": "Events"
+          },
           "id": "calendar.events.list",
-          "parameterOrder": [ "calendarId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             },
             "iCalUID": {
-              "description":
-                "Specifies iCalendar UID (iCalUID) of events to be included in the response. Optional.",
               "location": "query",
-              "type": "string"
+              "type": "string",
+              "description": "Specifies iCalendar UID (iCalUID) of events to be included in the response. Optional."
             },
             "maxAttendees": {
-              "description":
-                "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
-              "format": "int32",
               "location": "query",
+              "type": "integer",
               "minimum": "1",
-              "type": "integer"
+              "description": "The maximum number of attendees to include in the response. If there are more than the specified number of attendees, only the participant is returned. Optional.",
+              "format": "int32"
             },
             "maxResults": {
-              "description":
-                "Maximum number of events returned on one result page. Optional.",
-              "format": "int32",
               "location": "query",
+              "type": "integer",
               "minimum": "1",
-              "type": "integer"
+              "description": "Maximum number of events returned on one result page. Optional.",
+              "format": "int32"
             },
             "orderBy": {
-              "description":
-                "The order of the events returned in the result. Optional. The default is an unspecified, stable order.",
-              "enum": [ "startTime", "updated" ],
+              "location": "query",
+              "enum": [
+                "startTime",
+                "updated"
+              ],
+              "type": "string",
+              "description": "The order of the events returned in the result. Optional. The default is an unspecified, stable order.",
               "enumDescriptions": [
                 "Order by the start date/time (ascending). This is only available when querying single events (i.e. the parameter \"singleEvents\" is True)",
                 "Order by last modification time (ascending)."
-              ],
-              "location": "query",
-              "type": "string"
+              ]
             },
             "pageToken": {
-              "description":
-                "Token specifying which result page to return. Optional.",
               "location": "query",
-              "type": "string"
+              "type": "string",
+              "description": "Token specifying which result page to return. Optional."
             },
             "q": {
-              "description":
-                "Free text search terms to find events that match these terms in any field, except for extended properties. Optional.",
               "location": "query",
-              "type": "string"
+              "type": "string",
+              "description": "Free text search terms to find events that match these terms in any field, except for extended properties. Optional."
             },
             "showDeleted": {
-              "description":
-                "Whether to include deleted events (with 'eventStatus' equals 'cancelled') in the result. Optional. The default is False.",
               "location": "query",
-              "type": "boolean"
+              "type": "boolean",
+              "description": "Whether to include deleted events (with 'eventStatus' equals 'cancelled') in the result. Optional. The default is False."
             },
             "showHiddenInvitations": {
-              "description":
-                "Whether to include hidden invitations in the result. Optional. The default is False.",
               "location": "query",
-              "type": "boolean"
+              "type": "boolean",
+              "description": "Whether to include hidden invitations in the result. Optional. The default is False."
             },
             "singleEvents": {
-              "description":
-                "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False.",
               "location": "query",
-              "type": "boolean"
+              "type": "boolean",
+              "description": "Whether to expand recurring events into instances and only return single one-off events and instances of recurring events, but not the underlying recurring events themselves. Optional. The default is False."
             },
             "timeMax": {
-              "description":
-                "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time.",
               "location": "query",
-              "type": "string"
+              "type": "string",
+              "description": "Upper bound (exclusive) for an event's start time to filter by. Optional. The default is not to filter by start time."
             },
             "timeMin": {
-              "description":
-                "Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time.",
               "location": "query",
-              "type": "string"
+              "type": "string",
+              "description": "Lower bound (inclusive) for an event's end time to filter by. Optional. The default is not to filter by end time."
             },
             "timeZone": {
-              "description":
-                "Time zone used in the response. Optional. The default is the time zone of the calendar.",
               "location": "query",
-              "type": "string"
+              "type": "string",
+              "description": "Time zone used in the response. Optional. The default is the time zone of the calendar."
             },
             "updatedMin": {
-              "description":
-                "Lower bound for an event's last modification time (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by last modification time.",
               "location": "query",
-              "type": "string"
+              "type": "string",
+              "description": "Lower bound for an event's last modification time (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by last modification time."
             }
           },
+          "parameterOrder": [
+            "calendarId"
+          ],
+          "httpMethod": "GET",
           "path": "calendars/{calendarId}/events",
-          "response": { "$ref": "Events" },
           "scopes": [
             "https://www.googleapis.com/auth/calendar",
             "https://www.googleapis.com/auth/calendar.readonly"
           ]
         },
         "move": {
-          "description":
-            "Moves an event to another calendar, i.e. changes an event's organizer.",
-          "httpMethod": "POST",
+          "description": "Moves an event to another calendar, i.e. changes an event's organizer.",
+          "response": {
+            "$ref": "Event"
+          },
           "id": "calendar.events.move",
-          "parameterOrder": [ "calendarId", "eventId", "destination" ],
           "parameters": {
             "calendarId": {
-              "description":
-                "Calendar identifier of the source calendar where the event currently is on.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier of the source calendar where the event currently is on."
             },
             "destination": {
-              "description":
-                "Calendar identifier of the target calendar where the event is to be moved to.",
               "location": "query",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier of the target calendar where the event is to be moved to."
             },
             "eventId": {
-              "description": "Event identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Event identifier."
             },
             "sendNotifications": {
-              "description":
-                "Whether to send notifications about the change of the event's organizer. Optional. The default is False.",
               "location": "query",
-              "type": "boolean"
+              "type": "boolean",
+              "description": "Whether to send notifications about the change of the event's organizer. Optional. The default is False."
             }
           },
+          "parameterOrder": [
+            "calendarId",
+            "eventId",
+            "destination"
+          ],
+          "httpMethod": "POST",
           "path": "calendars/{calendarId}/events/{eventId}/move",
-          "response": { "$ref": "Event" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "patch": {
-          "description":
-            "Updates an event. This method supports patch semantics.",
-          "httpMethod": "PATCH",
+          "description": "Updates an event. This method supports patch semantics.",
+          "response": {
+            "$ref": "Event"
+          },
           "id": "calendar.events.patch",
-          "parameterOrder": [ "calendarId", "eventId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             },
             "eventId": {
-              "description": "Event identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Event identifier."
             },
             "sendNotifications": {
-              "description":
-                "Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False.",
               "location": "query",
-              "type": "boolean"
+              "type": "boolean",
+              "description": "Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False."
             }
           },
+          "parameterOrder": [
+            "calendarId",
+            "eventId"
+          ],
+          "httpMethod": "PATCH",
+          "request": {
+            "$ref": "Event"
+          },
           "path": "calendars/{calendarId}/events/{eventId}",
-          "request": { "$ref": "Event" },
-          "response": { "$ref": "Event" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "quickAdd": {
           "description": "Creates an event based on a simple text string.",
-          "httpMethod": "POST",
+          "response": {
+            "$ref": "Event"
+          },
           "id": "calendar.events.quickAdd",
-          "parameterOrder": [ "calendarId", "text" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             },
             "sendNotifications": {
-              "description":
-                "Whether to send notifications about the creation of the event. Optional. The default is False.",
               "location": "query",
-              "type": "boolean"
+              "type": "boolean",
+              "description": "Whether to send notifications about the creation of the event. Optional. The default is False."
             },
             "text": {
-              "description": "The text describing the event to be created.",
               "location": "query",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "The text describing the event to be created."
             }
           },
+          "parameterOrder": [
+            "calendarId",
+            "text"
+          ],
+          "httpMethod": "POST",
           "path": "calendars/{calendarId}/events/quickAdd",
-          "response": { "$ref": "Event" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "reset": {
-          "description":
-            "Resets a specialized instance of a recurring event to its original state.",
-          "httpMethod": "POST",
+          "description": "Resets a specialized instance of a recurring event to its original state.",
+          "response": {
+            "$ref": "Event"
+          },
           "id": "calendar.events.reset",
-          "parameterOrder": [ "calendarId", "eventId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             },
             "eventId": {
-              "description": "Event identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Event identifier."
             },
             "sendNotifications": {
-              "description":
-                "Whether to send notifications about the event update. Optional. The default is False.",
               "location": "query",
-              "type": "boolean"
+              "type": "boolean",
+              "description": "Whether to send notifications about the event update. Optional. The default is False."
             }
           },
+          "parameterOrder": [
+            "calendarId",
+            "eventId"
+          ],
+          "httpMethod": "POST",
           "path": "calendars/{calendarId}/events/{eventId}/reset",
-          "response": { "$ref": "Event" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         },
         "update": {
           "description": "Updates an event.",
-          "httpMethod": "PUT",
+          "response": {
+            "$ref": "Event"
+          },
           "id": "calendar.events.update",
-          "parameterOrder": [ "calendarId", "eventId" ],
           "parameters": {
             "calendarId": {
-              "description": "Calendar identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Calendar identifier."
             },
             "eventId": {
-              "description": "Event identifier.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Event identifier."
             },
             "sendNotifications": {
-              "description":
-                "Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False.",
               "location": "query",
-              "type": "boolean"
+              "type": "boolean",
+              "description": "Whether to send notifications about the event update (e.g. attendee's responses, title changes, etc.). Optional. The default is False."
             }
           },
+          "parameterOrder": [
+            "calendarId",
+            "eventId"
+          ],
+          "httpMethod": "PUT",
+          "request": {
+            "$ref": "Event"
+          },
           "path": "calendars/{calendarId}/events/{eventId}",
-          "request": { "$ref": "Event" },
-          "response": { "$ref": "Event" },
-          "scopes": [ "https://www.googleapis.com/auth/calendar" ]
+          "scopes": [
+            "https://www.googleapis.com/auth/calendar"
+          ]
         }
       }
     },
     "freebusy": {
       "methods": {
         "query": {
-          "description":
-            "Returns free/busy information for a set of calendars.",
-          "httpMethod": "POST",
+          "description": "Returns free/busy information for a set of calendars.",
+          "response": {
+            "$ref": "FreeBusyResponse"
+          },
           "id": "calendar.freebusy.query",
+          "httpMethod": "POST",
+          "request": {
+            "$ref": "FreeBusyRequest"
+          },
           "path": "freeBusy",
-          "request": { "$ref": "FreeBusyRequest" },
-          "response": { "$ref": "FreeBusyResponse" },
           "scopes": [
             "https://www.googleapis.com/auth/calendar",
             "https://www.googleapis.com/auth/calendar.readonly"
@@ -925,31 +1018,36 @@
       "methods": {
         "get": {
           "description": "Returns a single user setting.",
-          "httpMethod": "GET",
+          "response": {
+            "$ref": "Setting"
+          },
           "id": "calendar.settings.get",
-          "parameterOrder": [ "setting" ],
           "parameters": {
             "setting": {
-              "description": "Name of the user setting.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "Name of the user setting."
             }
           },
+          "parameterOrder": [
+            "setting"
+          ],
+          "httpMethod": "GET",
           "path": "users/me/settings/{setting}",
-          "response": { "$ref": "Setting" },
           "scopes": [
             "https://www.googleapis.com/auth/calendar",
             "https://www.googleapis.com/auth/calendar.readonly"
           ]
         },
         "list": {
-          "description":
-            "Returns all user settings for the authenticated user.",
-          "httpMethod": "GET",
+          "description": "Returns all user settings for the authenticated user.",
+          "response": {
+            "$ref": "Settings"
+          },
           "id": "calendar.settings.list",
+          "httpMethod": "GET",
           "path": "users/me/settings",
-          "response": { "$ref": "Settings" },
           "scopes": [
             "https://www.googleapis.com/auth/calendar",
             "https://www.googleapis.com/auth/calendar.readonly"
@@ -958,802 +1056,856 @@
       }
     }
   },
+  "basePath": "/calendar/v3/",
+  "icons": {
+    "x16": "http://www.google.com/images/icons/product/calendar-16.png",
+    "x32": "http://www.google.com/images/icons/product/calendar-32.png"
+  },
   "schemas": {
     "Acl": {
+      "type": "object",
       "id": "Acl",
       "properties": {
         "etag": {
-          "description": "ETag of the collection.",
-          "type": "string"
+          "type": "string",
+          "description": "ETag of the collection."
         },
         "items": {
-          "description": "List of rules on the access control list.",
-          "items": { "$ref": "AclRule" },
-          "type": "array"
+          "items": {
+            "$ref": "AclRule"
+          },
+          "type": "array",
+          "description": "List of rules on the access control list."
         },
         "kind": {
+          "type": "string",
           "default": "calendar#acl",
-          "description": "Type of the collection (\"calendar#acl\").",
-          "type": "string"
+          "description": "Type of the collection (\"calendar#acl\")."
         },
         "nextPageToken": {
-          "description":
-            "Token used to access the next page of this result. Omitted if no further results are available.",
-          "type": "string"
+          "type": "string",
+          "description": "Token used to access the next page of this result. Omitted if no further results are available."
         }
-      },
-      "type": "object"
+      }
     },
     "AclRule": {
+      "type": "object",
       "id": "AclRule",
       "properties": {
-        "etag": { "description": "ETag of the resource.", "type": "string" },
+        "etag": {
+          "type": "string",
+          "description": "ETag of the resource."
+        },
         "id": {
-          "description": "Identifier of the ACL rule.",
-          "type": "string"
+          "type": "string",
+          "description": "Identifier of the ACL rule."
         },
         "kind": {
+          "type": "string",
           "default": "calendar#aclRule",
-          "description": "Type of the resource (\"calendar#aclRule\").",
-          "type": "string"
+          "description": "Type of the resource (\"calendar#aclRule\")."
         },
         "role": {
-          "description":
-            "The role assigned to the scope. Possible values are: \n- \"none\" - Provides no access. \n- \"freeBusyReader\" - Provides read access to free/busy information. \n- \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. \n- \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. \n- \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.",
-          "type": "string"
+          "type": "string",
+          "description": "The role assigned to the scope. Possible values are: \n- \"none\" - Provides no access. \n- \"freeBusyReader\" - Provides read access to free/busy information. \n- \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. \n- \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. \n- \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs."
         },
         "scope": {
+          "type": "object",
           "description": "The scope of the rule.",
           "properties": {
             "type": {
-              "description":
-                "The type of the scope. Possible values are: \n- \"default\" - The public scope. This is the default value. \n- \"user\" - Limits the scope to a single user. \n- \"group\" - Limits the scope to a group. \n- \"domain\" - Limits the scope to a domain. Note: The permissions granted to the \"default\", or public, scope apply to any user, authenticated or not.",
-              "type": "string"
+              "type": "string",
+              "description": "The type of the scope. Possible values are: \n- \"default\" - The public scope. This is the default value. \n- \"user\" - Limits the scope to a single user. \n- \"group\" - Limits the scope to a group. \n- \"domain\" - Limits the scope to a domain. Note: The permissions granted to the \"default\", or public, scope apply to any user, authenticated or not."
             },
             "value": {
-              "description":
-                "The email address of a user or group, or the name of a domain, depending on the scope type. Omitted for type \"default\".",
-              "type": "string"
+              "type": "string",
+              "description": "The email address of a user or group, or the name of a domain, depending on the scope type. Omitted for type \"default\"."
             }
-          },
-          "type": "object"
+          }
         }
-      },
-      "type": "object"
+      }
     },
     "Calendar": {
+      "type": "object",
       "id": "Calendar",
       "properties": {
         "description": {
-          "description": "Description of the calendar. Optional.",
-          "type": "string"
+          "type": "string",
+          "description": "Description of the calendar. Optional."
+        },
+        "etag": {
+          "type": "string",
+          "description": "ETag of the resource."
         },
-        "etag": { "description": "ETag of the resource.", "type": "string" },
         "id": {
-          "description": "Identifier of the calendar.",
-          "type": "string"
+          "type": "string",
+          "description": "Identifier of the calendar."
         },
         "kind": {
+          "type": "string",
           "default": "calendar#calendar",
-          "description": "Type of the resource (\"calendar#calendar\").",
-          "type": "string"
+          "description": "Type of the resource (\"calendar#calendar\")."
         },
         "location": {
-          "description":
-            "Geographic location of the calendar as free-form text. Optional.",
-          "type": "string"
+          "type": "string",
+          "description": "Geographic location of the calendar as free-form text. Optional."
         },
         "summary": {
-          "description": "Title of the calendar.",
-          "type": "string"
+          "type": "string",
+          "description": "Title of the calendar."
         },
         "timeZone": {
-          "description": "The time zone of the calendar. Optional.",
-          "type": "string"
+          "type": "string",
+          "description": "The time zone of the calendar. Optional."
         }
-      },
-      "type": "object"
+      }
     },
     "CalendarList": {
+      "type": "object",
       "id": "CalendarList",
       "properties": {
         "etag": {
-          "description": "ETag of the collection.",
-          "type": "string"
+          "type": "string",
+          "description": "ETag of the collection."
         },
         "items": {
-          "description":
-            "Calendars that are present on the user's calendar list.",
-          "items": { "$ref": "CalendarListEntry" },
-          "type": "array"
+          "items": {
+            "$ref": "CalendarListEntry"
+          },
+          "type": "array",
+          "description": "Calendars that are present on the user's calendar list."
         },
         "kind": {
+          "type": "string",
           "default": "calendar#calendarList",
-          "description":
-            "Type of the collection (\"calendar#calendarList\").",
-          "type": "string"
+          "description": "Type of the collection (\"calendar#calendarList\")."
         },
         "nextPageToken": {
-          "description": "Token used to access the next page of this result.",
-          "type": "string"
+          "type": "string",
+          "description": "Token used to access the next page of this result."
         }
-      },
-      "type": "object"
+      }
     },
     "CalendarListEntry": {
+      "type": "object",
       "id": "CalendarListEntry",
       "properties": {
         "accessRole": {
-          "description":
-            "The effective access role that the authenticated user has on the calendar. Read-only. Possible values are: \n- \"freeBusyReader\" - Provides read access to free/busy information. \n- \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. \n- \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. \n- \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.",
-          "type": "string"
+          "type": "string",
+          "description": "The effective access role that the authenticated user has on the calendar. Read-only. Possible values are: \n- \"freeBusyReader\" - Provides read access to free/busy information. \n- \"reader\" - Provides read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. \n- \"writer\" - Provides read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. \n- \"owner\" - Provides ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs."
         },
         "colorId": {
-          "description":
-            "The color of the calendar. This is an ID referring to an entry in the \"calendar\" section of the colors definition (see the \"colors\" endpoint). Optional.",
-          "type": "string"
+          "type": "string",
+          "description": "The color of the calendar. This is an ID referring to an entry in the \"calendar\" section of the colors definition (see the \"colors\" endpoint). Optional."
         },
         "defaultReminders": {
-          "description":
-            "The default reminders that the authenticated user has for this calendar.",
-          "items": { "$ref": "EventReminder" },
-          "type": "array"
+          "items": {
+            "$ref": "EventReminder"
+          },
+          "type": "array",
+          "description": "The default reminders that the authenticated user has for this calendar."
         },
         "description": {
-          "description": "Description of the calendar. Optional. Read-only.",
-          "type": "string"
+          "type": "string",
+          "description": "Description of the calendar. Optional. Read-only."
+        },
+        "etag": {
+          "type": "string",
+          "description": "ETag of the resource."
         },
-        "etag": { "description": "ETag of the resource.", "type": "string" },
         "hidden": {
-          "description":
-            "Whether the calendar has been hidden from the list. Optional. The default is False.",
-          "type": "boolean"
+          "type": "boolean",
+          "description": "Whether the calendar has been hidden from the list. Optional. The default is False."
         },
         "id": {
-          "description": "Identifier of the calendar.",
-          "type": "string"
+          "type": "string",
+          "description": "Identifier of the calendar."
         },
         "kind": {
+          "type": "string",
           "default": "calendar#calendarListEntry",
-          "description":
-            "Type of the resource (\"calendar#calendarListEntry\").",
-          "type": "string"
+          "description": "Type of the resource (\"calendar#calendarListEntry\")."
         },
         "location": {
-          "description":
-            "Geographic location of the calendar as free-form text. Optional. Read-only.",
-          "type": "string"
+          "type": "string",
+          "description": "Geographic location of the calendar as free-form text. Optional. Read-only."
         },
         "selected": {
-          "description":
-            "Whether the calendar content shows up in the calendar UI. Optional. The default is True.",
-          "type": "boolean"
+          "type": "boolean",
+          "description": "Whether the calendar content shows up in the calendar UI. Optional. The default is True."
         },
         "summary": {
-          "description": "Title of the calendar. Read-only.",
-          "type": "string"
+          "type": "string",
+          "description": "Title of the calendar. Read-only."
         },
         "summaryOverride": {
-          "description":
-            "The summary that the authenticated user has set for this calendar. Optional.",
-          "type": "string"
+          "type": "string",
+          "description": "The summary that the authenticated user has set for this calendar. Optional."
         },
         "timeZone": {
-          "description":
-            "The time zone of the calendar. Optional. Read-only.",
-          "type": "string"
+          "type": "string",
+          "description": "The time zone of the calendar. Optional. Read-only."
         }
-      },
-      "type": "object"
+      }
     },
     "ColorDefinition": {
+      "type": "object",
       "id": "ColorDefinition",
       "properties": {
         "background": {
-          "description":
-            "The background color associated with this color definition.",
-          "type": "string"
+          "type": "string",
+          "description": "The background color associated with this color definition."
         },
         "foreground": {
-          "description":
-            "The foreground color that can be used to write on top of a background with 'background' color.",
-          "type": "string"
+          "type": "string",
+          "description": "The foreground color that can be used to write on top of a background with 'background' color."
         }
-      },
-      "type": "object"
+      }
     },
     "Colors": {
+      "type": "object",
       "id": "Colors",
       "properties": {
         "calendar": {
-          "additionalProperties": { "$ref": "ColorDefinition" },
-          "description":
-            "Palette of calendar colors, mapping from the color ID to its definition. An 'calendarListEntry' resource refers to one of these color IDs in its 'color' field. Read-only.",
-          "type": "object"
+          "type": "object",
+          "description": "Palette of calendar colors, mapping from the color ID to its definition. An 'calendarListEntry' resource refers to one of these color IDs in its 'color' field. Read-only.",
+          "additionalProperties": {
+            "$ref": "ColorDefinition"
+          }
         },
         "event": {
-          "additionalProperties": { "$ref": "ColorDefinition" },
-          "description":
-            "Palette of event colors, mapping from the color ID to its definition. An 'event' resource may refer to one of these color IDs in its 'color' field. Read-only.",
-          "type": "object"
+          "type": "object",
+          "description": "Palette of event colors, mapping from the color ID to its definition. An 'event' resource may refer to one of these color IDs in its 'color' field. Read-only.",
+          "additionalProperties": {
+            "$ref": "ColorDefinition"
+          }
         },
         "kind": {
+          "type": "string",
           "default": "calendar#colors",
-          "description": "Type of the resource (\"calendar#colors\").",
-          "type": "string"
+          "description": "Type of the resource (\"calendar#colors\")."
         },
         "updated": {
-          "description":
-            "Last modification time of the color palette (as a RFC 3339 timestamp). Read-only.",
-          "format": "date-time",
-          "type": "string"
+          "type": "string",
+          "description": "Last modification time of the color palette (as a RFC 3339 timestamp). Read-only.",
+          "format": "date-time"
         }
-      },
-      "type": "object"
+      }
     },
     "Error": {
+      "type": "object",
       "id": "Error",
       "properties": {
         "domain": {
-          "description": "Domain, or broad category, of the error.",
-          "type": "string"
+          "type": "string",
+          "description": "Domain, or broad category, of the error."
         },
         "reason": {
-          "description":
-            "Specific reason for the error. Some of the possible values are: \n- \"groupTooBig\" - The group of users requested is too large for a single query. \n- \"tooManyCalendarsRequested\" - The number of calendars requested is too large for a single query. \n- \"notFound\" - The requested resource was not found. \n- \"internalError\" - The API service has encountered an internal error. Additional error types may be added in the future, so clients should gracefully handle additional error statuses not included in this list.",
-          "type": "string"
+          "type": "string",
+          "description": "Specific reason for the error. Some of the possible values are: \n- \"groupTooBig\" - The group of users requested is too large for a single query. \n- \"tooManyCalendarsRequested\" - The number of calendars requested is too large for a single query. \n- \"notFound\" - The requested resource was not found. \n- \"internalError\" - The API service has encountered an internal error. Additional error types may be added in the future, so clients should gracefully handle additional error statuses not included in this list."
         }
-      },
-      "type": "object"
+      }
     },
     "Event": {
+      "type": "object",
       "id": "Event",
       "properties": {
         "anyoneCanAddSelf": {
-          "description":
-            "Whether anyone can invite themselves to the event. Optional. The default is False.",
-          "type": "boolean"
+          "type": "boolean",
+          "description": "Whether anyone can invite themselves to the event. Optional. The default is False."
         },
         "attendees": {
-          "description": "The attendees of the event.",
-          "items": { "$ref": "EventAttendee" },
-          "type": "array"
+          "items": {
+            "$ref": "EventAttendee"
+          },
+          "type": "array",
+          "description": "The attendees of the event."
         },
         "attendeesOmitted": {
-          "description":
-            "Whether attendees have been omitted from the event's representation. When retrieving an event, this is due to a restriction specified by the 'maxAttendee' query parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False.",
-          "type": "boolean"
+          "type": "boolean",
+          "description": "Whether attendees have been omitted from the event's representation. When retrieving an event, this is due to a restriction specified by the 'maxAttendee' query parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False."
         },
         "colorId": {
-          "description":
-            "The color of the event. This is an ID referring to an entry in the \"event\" section of the colors definition (see the \"colors\" endpoint). Optional.",
-          "type": "string"
+          "type": "string",
+          "description": "The color of the event. This is an ID referring to an entry in the \"event\" section of the colors definition (see the \"colors\" endpoint). Optional."
         },
         "created": {
-          "description":
-            "Creation time of the event (as a RFC 3339 timestamp). Read-only.",
-          "format": "date-time",
-          "type": "string"
+          "type": "string",
+          "description": "Creation time of the event (as a RFC 3339 timestamp). Read-only.",
+          "format": "date-time"
         },
         "creator": {
+          "type": "object",
           "description": "The creator of the event. Read-only.",
           "properties": {
             "displayName": {
-              "description": "The creator's name, if available.",
-              "type": "string"
+              "type": "string",
+              "description": "The creator's name, if available."
             },
             "email": {
-              "description": "The creator's email address, if available.",
-              "type": "string"
+              "type": "string",
+              "description": "The creator's email address, if available."
             }
-          },
-          "type": "object"
+          }
         },
         "description": {
-          "description": "Description of the event. Optional.",
-          "type": "string"
+          "type": "string",
+          "description": "Description of the event. Optional."
         },
         "end": {
           "$ref": "EventDateTime",
-          "description":
-            "The end time of the event. For a recurring event, this is the end time of the first instance."
+          "description": "The end time of the event. For a recurring event, this is the end time of the first instance."
+        },
+        "etag": {
+          "type": "string",
+          "description": "ETag of the resource."
         },
-        "etag": { "description": "ETag of the resource.", "type": "string" },
         "extendedProperties": {
+          "type": "object",
           "description": "Extended properties of the event.",
           "properties": {
             "private": {
-              "additionalProperties": { "type": "string" },
-              "description":
-                "Properties that are private to the copy of the event that appears on this calendar.",
-              "type": "object"
+              "type": "object",
+              "description": "Properties that are private to the copy of the event that appears on this calendar.",
+              "additionalProperties": {
+                "type": "string"
+              }
             },
             "shared": {
-              "additionalProperties": { "type": "string" },
-              "description":
-                "Properties that are shared between copies of the event on other attendees' calendars.",
-              "type": "object"
+              "type": "object",
+              "description": "Properties that are shared between copies of the event on other attendees' calendars.",
+              "additionalProperties": {
+                "type": "string"
+              }
             }
-          },
-          "type": "object"
+          }
         },
         "gadget": {
+          "type": "object",
           "description": "A gadget that extends this event.",
           "properties": {
             "display": {
-              "description":
-                "The gadget's display mode. Optional. Possible values are: \n- \"icon\" - The gadget displays next to the event's title in the calendar view. \n- \"chip\" - The gadget displays when the event is clicked.",
-              "type": "string"
+              "type": "string",
+              "description": "The gadget's display mode. Optional. Possible values are: \n- \"icon\" - The gadget displays next to the event's title in the calendar view. \n- \"chip\" - The gadget displays when the event is clicked."
             },
             "height": {
+              "type": "integer",
               "description": "The gadget's height in pixels. Optional.",
-              "format": "int32",
-              "type": "integer"
+              "format": "int32"
             },
             "iconLink": {
-              "description": "The gadget's icon URL.",
-              "type": "string"
+              "type": "string",
+              "description": "The gadget's icon URL."
+            },
+            "link": {
+              "type": "string",
+              "description": "The gadget's URL."
             },
-            "link": { "description": "The gadget's URL.", "type": "string" },
             "preferences": {
-              "additionalProperties": { "type": "string" },
+              "type": "object",
               "description": "Preferences.",
-              "type": "object"
+              "additionalProperties": {
+                "type": "string"
+              }
             },
             "title": {
-              "description": "The gadget's title.",
-              "type": "string"
+              "type": "string",
+              "description": "The gadget's title."
+            },
+            "type": {
+              "type": "string",
+              "description": "The gadget's type."
             },
-            "type": { "description": "The gadget's type.", "type": "string" },
             "width": {
+              "type": "integer",
               "description": "The gadget's width in pixels. Optional.",
-              "format": "int32",
-              "type": "integer"
+              "format": "int32"
             }
-          },
-          "type": "object"
+          }
         },
         "guestsCanInviteOthers": {
-          "description":
-            "Whether attendees other than the organizer can invite others to the event. Optional. The default is False.",
-          "type": "boolean"
+          "type": "boolean",
+          "description": "Whether attendees other than the organizer can invite others to the event. Optional. The default is False."
         },
         "guestsCanModify": {
-          "description":
-            "Whether attendees other than the organizer can modify the event. Optional. The default is False.",
-          "type": "boolean"
+          "type": "boolean",
+          "description": "Whether attendees other than the organizer can modify the event. Optional. The default is False."
         },
         "guestsCanSeeOtherGuests": {
-          "description":
-            "Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is False.",
-          "type": "boolean"
+          "type": "boolean",
+          "description": "Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is False."
         },
         "htmlLink": {
-          "description":
-            "An absolute link to this event in the Google Calendar Web UI. Read-only.",
-          "type": "string"
+          "type": "string",
+          "description": "An absolute link to this event in the Google Calendar Web UI. Read-only."
         },
         "iCalUID": {
-          "description": "Event ID in the iCalendar format.",
-          "type": "string"
+          "type": "string",
+          "description": "Event ID in the iCalendar format."
+        },
+        "id": {
+          "type": "string",
+          "description": "Identifier of the event."
         },
-        "id": { "description": "Identifier of the event.", "type": "string" },
         "kind": {
+          "type": "string",
           "default": "calendar#event",
-          "description": "Type of the resource (\"calendar#event\").",
-          "type": "string"
+          "description": "Type of the resource (\"calendar#event\")."
         },
         "location": {
-          "description":
-            "Geographic location of the event as free-form text. Optional.",
-          "type": "string"
+          "type": "string",
+          "description": "Geographic location of the event as free-form text. Optional."
         },
         "organizer": {
-          "description":
-            "The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in 'attendees' with the 'organizer' field set to True.",
+          "type": "object",
+          "description": "The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in 'attendees' with the 'organizer' field set to True.",
           "properties": {
             "displayName": {
-              "description": "The organizer's name, if available.",
-              "type": "string"
+              "type": "string",
+              "description": "The organizer's name, if available."
             },
             "email": {
-              "description": "The organizer's email address, if available.",
-              "type": "string"
+              "type": "string",
+              "description": "The organizer's email address, if available."
             }
-          },
-          "type": "object"
+          }
         },
         "originalStartTime": {
           "$ref": "EventDateTime",
-          "description":
-            "For an instance of a recurring event, this is the time at which this event would start according to the recurrence data in the recurring event identified by recurringEventId. Immutable."
+          "description": "For an instance of a recurring event, this is the time at which this event would start according to the recurrence data in the recurring event identified by recurringEventId. Immutable."
         },
         "privateCopy": {
-          "description":
-            "Whether this is a private event copy where changes are not shared with other copies on other calendars. Optional. Immutable.",
-          "type": "boolean"
+          "type": "boolean",
+          "description": "Whether this is a private event copy where changes are not shared with other copies on other calendars. Optional. Immutable."
         },
         "recurrence": {
-          "description":
-            "List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event. This field is omitted for single events or instances of recurring events.",
-          "items": { "type": "string" },
-          "type": "array"
+          "items": {
+            "type": "string"
+          },
+          "type": "array",
+          "description": "List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event. This field is omitted for single events or instances of recurring events."
         },
         "recurringEventId": {
-          "description":
-            "For an instance of a recurring event, this is the event ID of the recurring event itself. Immutable.",
-          "type": "string"
+          "type": "string",
+          "description": "For an instance of a recurring event, this is the event ID of the recurring event itself. Immutable."
         },
         "reminders": {
-          "description":
-            "Information about the event's reminders for the authenticated user.",
+          "type": "object",
+          "description": "Information about the event's reminders for the authenticated user.",
           "properties": {
             "overrides": {
-              "description":
-                "If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event.",
-              "items": { "$ref": "EventReminder" },
-              "type": "array"
+              "items": {
+                "$ref": "EventReminder"
+              },
+              "type": "array",
+              "description": "If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event."
             },
             "useDefault": {
-              "description":
-                "Whether the default reminders of the calendar apply to the event.",
-              "type": "boolean"
+              "type": "boolean",
+              "description": "Whether the default reminders of the calendar apply to the event."
             }
-          },
-          "type": "object"
+          }
         },
         "sequence": {
+          "type": "integer",
           "description": "Sequence number as per iCalendar.",
-          "format": "int32",
-          "type": "integer"
+          "format": "int32"
         },
         "start": {
           "$ref": "EventDateTime",
-          "description":
-            "The start time of the event. For a recurring event, this is the start time of the first instance."
+          "description": "The start time of the event. For a recurring event, this is the start time of the first instance."
         },
         "status": {
-          "description":
-            "Status of the event. Optional. Possible values are: \n- \"confirmed\" - The event is confirmed. This is the default status. \n- \"tentative\" - The event is tentatively confirmed. \n- \"cancelled\" - The event is cancelled.",
-          "type": "string"
+          "type": "string",
+          "description": "Status of the event. Optional. Possible values are: \n- \"confirmed\" - The event is confirmed. This is the default status. \n- \"tentative\" - The event is tentatively confirmed. \n- \"cancelled\" - The event is cancelled."
+        },
+        "summary": {
+          "type": "string",
+          "description": "Title of the event."
         },
-        "summary": { "description": "Title of the event.", "type": "string" },
         "transparency": {
-          "description":
-            "Whether the event blocks time on the calendar. Optional. Possible values are: \n- \"opaque\" - The event blocks time on the calendar. This is the default value. \n- \"transparent\" - The event does not block time on the calendar.",
-          "type": "string"
+          "type": "string",
+          "description": "Whether the event blocks time on the calendar. Optional. Possible values are: \n- \"opaque\" - The event blocks time on the calendar. This is the default value. \n- \"transparent\" - The event does not block time on the calendar."
         },
         "updated": {
-          "description":
-            "Last modification time of the event (as a RFC 3339 timestamp). Read-only.",
-          "format": "date-time",
-          "type": "string"
+          "type": "string",
+          "description": "Last modification time of the event (as a RFC 3339 timestamp). Read-only.",
+          "format": "date-time"
         },
         "visibility": {
-          "description":
-            "Visibility of the event. Optional. Possible values are: \n- \"default\" - Uses the default visibility for events on the calendar. This is the default value. \n- \"public\" - The event is public and event details are visible to all readers of the calendar. \n- \"private\" - The event is private and only event attendees may view event details. \n- \"confidential\" - The event is private. This value is provided for compatibility reasons.",
-          "type": "string"
+          "type": "string",
+          "description": "Visibility of the event. Optional. Possible values are: \n- \"default\" - Uses the default visibility for events on the calendar. This is the default value. \n- \"public\" - The event is public and event details are visible to all readers of the calendar. \n- \"private\" - The event is private and only event attendees may view event details. \n- \"confidential\" - The event is private. This value is provided for compatibility reasons."
         }
-      },
-      "type": "object"
+      }
     },
     "EventAttendee": {
+      "type": "object",
       "id": "EventAttendee",
       "properties": {
         "additionalGuests": {
-          "description":
-            "Number of additional guests. Optional. The default is 0.",
-          "format": "int32",
-          "type": "integer"
+          "type": "integer",
+          "description": "Number of additional guests. Optional. The default is 0.",
+          "format": "int32"
         },
         "comment": {
-          "description": "The attendee's response comment. Optional.",
-          "type": "string"
+          "type": "string",
+          "description": "The attendee's response comment. Optional."
         },
         "displayName": {
-          "description": "The attendee's name, if available. Optional.",
-          "type": "string"
+          "type": "string",
+          "description": "The attendee's name, if available. Optional."
         },
         "email": {
-          "description":
-            "The attendee's email address, if available. This field must be present when adding an attendee.",
-          "type": "string"
+          "type": "string",
+          "description": "The attendee's email address, if available. This field must be present when adding an attendee."
         },
         "optional": {
-          "description":
-            "Whether this is an optional attendee. Optional. The default is False.",
-          "type": "boolean"
+          "type": "boolean",
+          "description": "Whether this is an optional attendee. Optional. The default is False."
         },
         "organizer": {
-          "description":
-            "Whether the attendee is the organizer of the event. Read-only. The default is False.",
-          "type": "boolean"
+          "type": "boolean",
+          "description": "Whether the attendee is the organizer of the event. Read-only. The default is False."
         },
         "resource": {
-          "description":
-            "Whether the attendee is a resource. Read-only. The default is False.",
-          "type": "boolean"
+          "type": "boolean",
+          "description": "Whether the attendee is a resource. Read-only. The default is False."
         },
         "responseStatus": {
-          "description":
-            "The attendee's response status. Possible values are: \n- \"needsAction\" - The attendee has not responded to the invitation. \n- \"declined\" - The attendee has declined the invitation. \n- \"tentative\" - The attendee has tentatively accepted the invitation. \n- \"accepted\" - The attendee has accepted the invitation.",
-          "type": "string"
+          "type": "string",
+          "description": "The attendee's response status. Possible values are: \n- \"needsAction\" - The attendee has not responded to the invitation. \n- \"declined\" - The attendee has declined the invitation. \n- \"tentative\" - The attendee has tentatively accepted the invitation. \n- \"accepted\" - The attendee has accepted the invitation."
         },
         "self": {
-          "description":
-            "Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False.",
-          "type": "boolean"
+          "type": "boolean",
+          "description": "Whether this entry represents the calendar on which this copy of the event appears. Read-only. The default is False."
         }
-      },
-      "type": "object"
+      }
     },
     "EventDateTime": {
+      "type": "object",
       "id": "EventDateTime",
       "properties": {
         "date": {
-          "description":
-            "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
-          "format": "date",
-          "type": "string"
+          "type": "string",
+          "description": "The date, in the format \"yyyy-mm-dd\", if this is an all-day event.",
+          "format": "date"
         },
         "dateTime": {
-          "description":
-            "The time, as a combined date-time value (formatted according to RFC 3339). A time zone offset is required unless a time zone is explicitly specified in 'timeZone'.",
-          "format": "date-time",
-          "type": "string"
+          "type": "string",
+          "description": "The time, as a combined date-time value (formatted according to RFC 3339). A time zone offset is required unless a time zone is explicitly specified in 'timeZone'.",
+          "format": "date-time"
         },
         "timeZone": {
-          "description":
-            "The name of the time zone in which the time is specified (e.g. \"Europe/Zurich\"). Optional. The default is the time zone of the calendar.",
-          "type": "string"
+          "type": "string",
+          "description": "The name of the time zone in which the time is specified (e.g. \"Europe/Zurich\"). Optional. The default is the time zone of the calendar."
         }
-      },
-      "type": "object"
+      }
     },
     "EventReminder": {
+      "type": "object",
       "id": "EventReminder",
       "properties": {
         "method": {
-          "description":
-            "The method used by this reminder. Possible values are: \n- \"email\" - Reminders are sent via email. \n- \"sms\" - Reminders are sent via SMS. \n- \"popup\" - Reminders are sent via a UI popup.",
-          "type": "string"
+          "type": "string",
+          "description": "The method used by this reminder. Possible values are: \n- \"email\" - Reminders are sent via email. \n- \"sms\" - Reminders are sent via SMS. \n- \"popup\" - Reminders are sent via a UI popup."
         },
         "minutes": {
-          "description":
-            "Number of minutes before the start of the event when the reminder should trigger.",
-          "format": "int32",
-          "type": "integer"
+          "type": "integer",
+          "description": "Number of minutes before the start of the event when the reminder should trigger.",
+          "format": "int32"
         }
-      },
-      "type": "object"
+      }
     },
     "Events": {
+      "type": "object",
       "id": "Events",
       "properties": {
         "accessRole": {
-          "description":
-            "The user's access role for this calendar. Read-only. Possible values are: \n- \"none\" - The user has no access. \n- \"freeBusyReader\" - The user has read access to free/busy information. \n- \"reader\" - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. \n- \"writer\" - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. \n- \"owner\" - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs.",
-          "type": "string"
+          "type": "string",
+          "description": "The user's access role for this calendar. Read-only. Possible values are: \n- \"none\" - The user has no access. \n- \"freeBusyReader\" - The user has read access to free/busy information. \n- \"reader\" - The user has read access to the calendar. Private events will appear to users with reader access, but event details will be hidden. \n- \"writer\" - The user has read and write access to the calendar. Private events will appear to users with writer access, and event details will be visible. \n- \"owner\" - The user has ownership of the calendar. This role has all of the permissions of the writer role with the additional ability to see and manipulate ACLs."
         },
         "defaultReminders": {
-          "description":
-            "The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have 'reminders.useDefault' set to 'true').",
-          "items": { "$ref": "EventReminder" },
-          "type": "array"
+          "items": {
+            "$ref": "EventReminder"
+          },
+          "type": "array",
+          "description": "The default reminders on the calendar for the authenticated user. These reminders apply to all events on this calendar that do not explicitly override them (i.e. do not have 'reminders.useDefault' set to 'true')."
         },
         "description": {
-          "description": "Description of the calendar. Read-only.",
-          "type": "string"
+          "type": "string",
+          "description": "Description of the calendar. Read-only."
         },
         "etag": {
-          "description": "ETag of the collection.",
-          "type": "string"
+          "type": "string",
+          "description": "ETag of the collection."
         },
         "items": {
-          "description": "List of events on the calendar.",
-          "items": { "$ref": "Event" },
-          "type": "array"
+          "items": {
+            "$ref": "Event"
+          },
+          "type": "array",
+          "description": "List of events on the calendar."
         },
         "kind": {
+          "type": "string",
           "default": "calendar#events",
-          "description": "Type of the collection (\"calendar#events\").",
-          "type": "string"
+          "description": "Type of the collection (\"calendar#events\")."
         },
         "nextPageToken": {
-          "description":
-            "Token used to access the next page of this result. Omitted if no further results are available.",
-          "type": "string"
+          "type": "string",
+          "description": "Token used to access the next page of this result. Omitted if no further results are available."
         },
         "summary": {
-          "description": "Title of the calendar. Read-only.",
-          "type": "string"
+          "type": "string",
+          "description": "Title of the calendar. Read-only."
         },
         "timeZone": {
-          "description": "The time zone of the calendar. Read-only.",
-          "type": "string"
+          "type": "string",
+          "description": "The time zone of the calendar. Read-only."
         },
         "updated": {
-          "description":
-            "Last modification time of the calendar (as a RFC 3339 timestamp). Read-only.",
-          "format": "date-time",
-          "type": "string"
+          "type": "string",
+          "description": "Last modification time of the calendar (as a RFC 3339 timestamp). Read-only.",
+          "format": "date-time"
         }
-      },
-      "type": "object"
+      }
     },
     "FreeBusyCalendar": {
+      "type": "object",
       "id": "FreeBusyCalendar",
       "properties": {
         "busy": {
-          "description":
-            "List of time ranges during which this calendar should be regarded as busy.",
-          "items": { "$ref": "TimePeriod" },
-          "type": "array"
+          "items": {
+            "$ref": "TimePeriod"
+          },
+          "type": "array",
+          "description": "List of time ranges during which this calendar should be regarded as busy."
         },
         "errors": {
-          "description":
-            "Optional error(s) (if computation for the calendar failed).",
-          "items": { "$ref": "Error" },
-          "type": "array"
+          "items": {
+            "$ref": "Error"
+          },
+          "type": "array",
+          "description": "Optional error(s) (if computation for the calendar failed)."
         }
-      },
-      "type": "object"
+      }
     },
     "FreeBusyGroup": {
+      "type": "object",
       "id": "FreeBusyGroup",
       "properties": {
         "calendars": {
-          "description": "List of calendars' identifiers within a group.",
-          "items": { "type": "string" },
-          "type": "array"
+          "items": {
+            "type": "string"
+          },
+          "type": "array",
+          "description": "List of calendars' identifiers within a group."
         },
         "errors": {
-          "description":
-            "Optional error(s) (if computation for the group failed).",
-          "items": { "$ref": "Error" },
-          "type": "array"
+          "items": {
+            "$ref": "Error"
+          },
+          "type": "array",
+          "description": "Optional error(s) (if computation for the group failed)."
         }
-      },
-      "type": "object"
+      }
     },
     "FreeBusyRequest": {
+      "type": "object",
       "id": "FreeBusyRequest",
       "properties": {
         "calendarExpansionMax": {
-          "description":
-            "Maximal number of calendars for which FreeBusy information is to be provided. Optional.",
-          "format": "int32",
-          "type": "integer"
+          "type": "integer",
+          "description": "Maximal number of calendars for which FreeBusy information is to be provided. Optional.",
+          "format": "int32"
         },
         "groupExpansionMax": {
-          "description":
-            "Maximal number of calendar identifiers to be provided for a single group. Optional. An error will be returned for a group with more members than this value.",
-          "format": "int32",
-          "type": "integer"
+          "type": "integer",
+          "description": "Maximal number of calendar identifiers to be provided for a single group. Optional. An error will be returned for a group with more members than this value.",
+          "format": "int32"
         },
         "items": {
-          "description": "List of calendars and/or groups to query.",
-          "items": { "$ref": "FreeBusyRequestItem" },
-          "type": "array"
+          "items": {
+            "$ref": "FreeBusyRequestItem"
+          },
+          "type": "array",
+          "description": "List of calendars and/or groups to query."
         },
         "timeMax": {
+          "type": "string",
           "description": "The end of the interval for the query.",
-          "format": "date-time",
-          "type": "string"
+          "format": "date-time"
         },
         "timeMin": {
+          "type": "string",
           "description": "The start of the interval for the query.",
-          "format": "date-time",
-          "type": "string"
+          "format": "date-time"
         },
         "timeZone": {
-          "description":
-            "Time zone used in the response. Optional. The default is UTC.",
-          "type": "string"
+          "type": "string",
+          "description": "Time zone used in the response. Optional. The default is UTC."
         }
-      },
-      "type": "object"
+      }
     },
     "FreeBusyRequestItem": {
+      "type": "object",
       "id": "FreeBusyRequestItem",
       "properties": {
         "id": {
-          "description": "The identifier of a calendar or a group.",
-          "type": "string"
+          "type": "string",
+          "description": "The identifier of a calendar or a group."
         }
-      },
-      "type": "object"
+      }
     },
     "FreeBusyResponse": {
+      "type": "object",
       "id": "FreeBusyResponse",
       "properties": {
         "calendars": {
-          "additionalProperties": { "$ref": "FreeBusyCalendar" },
+          "type": "object",
           "description": "List of free/busy information for calendars.",
-          "type": "object"
+          "additionalProperties": {
+            "$ref": "FreeBusyCalendar"
+          }
         },
         "groups": {
-          "additionalProperties": { "$ref": "FreeBusyGroup" },
+          "type": "object",
           "description": "Expansion of groups.",
-          "type": "object"
+          "additionalProperties": {
+            "$ref": "FreeBusyGroup"
+          }
         },
         "kind": {
+          "type": "string",
           "default": "calendar#freeBusy",
-          "description": "Type of the resource (\"calendar#freeBusy\").",
-          "type": "string"
+          "description": "Type of the resource (\"calendar#freeBusy\")."
         },
         "timeMax": {
+          "type": "string",
           "description": "The end of the interval.",
-          "format": "date-time",
-          "type": "string"
+          "format": "date-time"
         },
         "timeMin": {
+          "type": "string",
           "description": "The start of the interval.",
-          "format": "date-time",
-          "type": "string"
+          "format": "date-time"
         }
-      },
-      "type": "object"
+      }
     },
     "Setting": {
+      "type": "object",
       "id": "Setting",
       "properties": {
-        "etag": { "description": "ETag of the resource.", "type": "string" },
+        "etag": {
+          "type": "string",
+          "description": "ETag of the resource."
+        },
         "id": {
-          "description": "Name of the user setting.",
-          "type": "string"
+          "type": "string",
+          "description": "Name of the user setting."
         },
         "kind": {
+          "type": "string",
           "default": "calendar#setting",
-          "description": "Type of the resource (\"calendar#setting\").",
-          "type": "string"
+          "description": "Type of the resource (\"calendar#setting\")."
         },
         "value": {
-          "description":
-            "Value of the user setting. The format of the value depends on the ID of the setting.",
-          "type": "string"
+          "type": "string",
+          "description": "Value of the user setting. The format of the value depends on the ID of the setting."
         }
-      },
-      "type": "object"
+      }
     },
     "Settings": {
+      "type": "object",
       "id": "Settings",
       "properties": {
         "etag": {
-          "description": "Etag of the collection.",
-          "type": "string"
+          "type": "string",
+          "description": "Etag of the collection."
         },
         "items": {
-          "description": "List of user settings.",
-          "items": { "$ref": "Setting" },
-          "type": "array"
+          "items": {
+            "$ref": "Setting"
+          },
+          "type": "array",
+          "description": "List of user settings."
         },
         "kind": {
+          "type": "string",
           "default": "calendar#settings",
-          "description": "Type of the collection (\"calendar#settings\").",
-          "type": "string"
+          "description": "Type of the collection (\"calendar#settings\")."
         }
-      },
-      "type": "object"
+      }
     },
     "TimePeriod": {
+      "type": "object",
       "id": "TimePeriod",
       "properties": {
         "end": {
+          "type": "string",
           "description": "The end of the time period.",
-          "format": "date-time",
-          "type": "string"
+          "format": "date-time"
         },
         "start": {
+          "type": "string",
           "description": "The start of the time period.",
-          "format": "date-time",
-          "type": "string"
+          "format": "date-time"
         }
-      },
-      "type": "object"
+      }
     }
   },
+  "description": "Lets you manipulate events and other calendar data.",
+  "labels": [
+    "labs"
+  ],
+  "version": "v3",
+  "kind": "discovery#restDescription",
   "title": "Calendar API",
-  "version": "v3"
+  "parameters": {
+    "alt": {
+      "location": "query",
+      "enum": [
+        "json"
+      ],
+      "type": "string",
+      "default": "json",
+      "description": "Data format for the response.",
+      "enumDescriptions": [
+        "Responses with Content-Type of application/json"
+      ]
+    },
+    "fields": {
+      "location": "query",
+      "type": "string",
+      "description": "Selector specifying which fields to include in a partial response."
+    },
+    "key": {
+      "location": "query",
+      "type": "string",
+      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
+    },
+    "oauth_token": {
+      "location": "query",
+      "type": "string",
+      "description": "OAuth 2.0 token for the current user."
+    },
+    "prettyPrint": {
+      "location": "query",
+      "type": "boolean",
+      "default": "true",
+      "description": "Returns response with indentations and line breaks."
+    },
+    "quotaUser": {
+      "location": "query",
+      "type": "string",
+      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided."
+    },
+    "userIp": {
+      "location": "query",
+      "type": "string",
+      "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits."
+    }
+  },
+  "id": "calendar:v3",
+  "protocol": "rest"
 }
-
diff --git a/src/test/test_data/test_calendar_settings.json b/src/test/test_data/test_calendar_settings.json
index 0717570b..94dd95af 100644
--- a/src/test/test_data/test_calendar_settings.json
+++ b/src/test/test_data/test_calendar_settings.json
@@ -2,21 +2,20 @@
   "etag": "settingsEtag",
   "items": [
     {
-      "id": "defaultCalendarMode",
+      "value": "defaultCalendarModeValue",
       "kind": "calendar#setting",
-      "value": "defaultCalendarModeValue"
+      "id": "defaultCalendarMode"
     },
     {
-      "id": "customCalendarMode",
+      "value": "customCalendarModeValue",
       "kind": "calendar#setting",
-      "value": "customCalendarModeValue"
+      "id": "customCalendarMode"
     },
     {
-      "id": "userLocation",
+      "value": "userLocationValue",
       "kind": "calendar#setting",
-      "value": "userLocationValue"
+      "id": "userLocation"
     }
   ],
   "kind": "calendar#settings"
 }
-
diff --git a/src/test/test_data/test_calendars.json b/src/test/test_data/test_calendars.json
index e53e9e2e..9e88eb61 100644
--- a/src/test/test_data/test_calendars.json
+++ b/src/test/test_data/test_calendars.json
@@ -1,8 +1,7 @@
 {
-  "etag": "calendarEtag",
   "id": "calendarId",
-  "kind": "calendar#calendar",
+  "etag": "calendarEtag",
   "summary": "calendarSummary",
+  "kind": "calendar#calendar",
   "timeZone": "America/Los_Angeles"
 }
-
diff --git a/src/test/test_data/test_directory_list.json b/src/test/test_data/test_directory_list.json
index 77e0c667..2cb17a72 100644
--- a/src/test/test_data/test_directory_list.json
+++ b/src/test/test_data/test_directory_list.json
@@ -1,533 +1,533 @@
 {
-   "items":[
-      {
-         "description":"Gives AdSense publishers access to their inventory and the ability to generate reports",
-         "discoveryLink":"./apis/adsense/v1/rest",
-         "documentationLink":"https://code.google.com/apis/adsense/management/",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/adsense-16.png",
-            "x32":"http://www.google.com/images/icons/product/adsense-32.png"
-         },
-         "id":"adsense:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"adsense",
-         "title":"AdSense Management API",
-         "version":"v1"
+  "kind": "discovery#directoryList",
+  "items": [
+    {
+      "title": "AdSense Management API",
+      "id": "adsense:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Gives AdSense publishers access to their inventory and the ability to generate reports",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/adsense-16.png",
+        "x32": "http://www.google.com/images/icons/product/adsense-32.png"
       },
-      {
-         "description":"Gives AdSense publishers access to their inventory and the ability to generate reports",
-         "discoveryLink":"./apis/adsense/v1.1/rest",
-         "documentationLink":"https://code.google.com/apis/adsense/management/",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/adsense-16.png",
-            "x32":"http://www.google.com/images/icons/product/adsense-32.png"
-         },
-         "id":"adsense:v1.1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"adsense",
-         "preferred":true,
-         "title":"AdSense Management API",
-         "version":"v1.1"
+      "name": "adsense",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "https://code.google.com/apis/adsense/management/",
+      "discoveryLink": "./apis/adsense/v1/rest",
+      "version": "v1"
+    },
+    {
+      "title": "AdSense Management API",
+      "id": "adsense:v1.1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Gives AdSense publishers access to their inventory and the ability to generate reports",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/adsense-16.png",
+        "x32": "http://www.google.com/images/icons/product/adsense-32.png"
       },
-      {
-         "description":"View and manage your Google Analytics data",
-         "discoveryLink":"./apis/analytics/v2.4/rest",
-         "documentationLink":"http://code.google.com/apis/analytics",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/analytics-16.png",
-            "x32":"http://www.google.com/images/icons/product/analytics-32.png"
-         },
-         "id":"analytics:v2.4",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"analytics",
-         "title":"Google Analytics API",
-         "version":"v2.4"
+      "name": "adsense",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "https://code.google.com/apis/adsense/management/",
+      "discoveryLink": "./apis/adsense/v1.1/rest",
+      "preferred": true,
+      "version": "v1.1"
+    },
+    {
+      "title": "Google Analytics API",
+      "id": "analytics:v2.4",
+      "labels": [
+        "labs"
+      ],
+      "description": "View and manage your Google Analytics data",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/analytics-16.png",
+        "x32": "http://www.google.com/images/icons/product/analytics-32.png"
       },
-      {
-         "description":"View and manage your Google Analytics data",
-         "discoveryLink":"./apis/analytics/v3/rest",
-         "documentationLink":"http://code.google.com/apis/analytics",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/analytics-16.png",
-            "x32":"http://www.google.com/images/icons/product/analytics-32.png"
-         },
-         "id":"analytics:v3",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"analytics",
-         "preferred":true,
-         "title":"Google Analytics API",
-         "version":"v3"
+      "name": "analytics",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/analytics",
+      "discoveryLink": "./apis/analytics/v2.4/rest",
+      "version": "v2.4"
+    },
+    {
+      "title": "Google Analytics API",
+      "id": "analytics:v3",
+      "labels": [
+        "labs"
+      ],
+      "description": "View and manage your Google Analytics data",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/analytics-16.png",
+        "x32": "http://www.google.com/images/icons/product/analytics-32.png"
       },
-      {
-         "description":"Lets you access user activities in your enterprise made through various applications.",
-         "discoveryLink":"./apis/audit/v1/rest",
-         "documentationLink":"http://code.google.com/googleapps/domain/audit_admin/v1/getting_started.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/search-16.gif",
-            "x32":"http://www.google.com/images/icons/product/search-32.gif"
-         },
-         "id":"audit:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"audit",
-         "preferred":true,
-         "title":"Enterprise Audit API",
-         "version":"v1"
+      "name": "analytics",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/analytics",
+      "discoveryLink": "./apis/analytics/v3/rest",
+      "preferred": true,
+      "version": "v3"
+    },
+    {
+      "title": "Enterprise Audit API",
+      "id": "audit:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you access user activities in your enterprise made through various applications.",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/search-16.gif",
+        "x32": "http://www.google.com/images/icons/product/search-32.gif"
       },
-      {
-         "description":"API for access to the data within Blogger.",
-         "discoveryLink":"./apis/blogger/v2/rest",
-         "documentationLink":"https://code.google.com/apis/blogger/docs/2.0/json/getting_started.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/blogger-16.png",
-            "x32":"http://www.google.com/images/icons/product/blogger-32.png"
-         },
-         "id":"blogger:v2",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"blogger",
-         "preferred":true,
-         "title":"Blogger API",
-         "version":"v2"
+      "name": "audit",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/googleapps/domain/audit_admin/v1/getting_started.html",
+      "discoveryLink": "./apis/audit/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    },
+    {
+      "title": "Blogger API",
+      "id": "blogger:v2",
+      "labels": [
+        "labs"
+      ],
+      "description": "API for access to the data within Blogger.",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/blogger-16.png",
+        "x32": "http://www.google.com/images/icons/product/blogger-32.png"
       },
-      {
-         "description":"Lets you search for books and manage your Google Books library.",
-         "discoveryLink":"./apis/books/v1/rest",
-         "documentationLink":"https://code.google.com/apis/books/docs/v1/getting_started.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/ebooks-16.png",
-            "x32":"http://www.google.com/images/icons/product/ebooks-32.png"
-         },
-         "id":"books:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"books",
-         "preferred":true,
-         "title":"Books API",
-         "version":"v1"
+      "name": "blogger",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "https://code.google.com/apis/blogger/docs/2.0/json/getting_started.html",
+      "discoveryLink": "./apis/blogger/v2/rest",
+      "preferred": true,
+      "version": "v2"
+    },
+    {
+      "title": "Books API",
+      "id": "books:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you search for books and manage your Google Books library.",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/ebooks-16.png",
+        "x32": "http://www.google.com/images/icons/product/ebooks-32.png"
       },
-      {
-         "description":"Lets you manipulate events and other calendar data.",
-         "discoveryLink":"./apis/calendar/v3/rest",
-         "documentationLink":"http://code.google.com/apis/calendar/v3/using.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/calendar-16.png",
-            "x32":"http://www.google.com/images/icons/product/calendar-32.png"
-         },
-         "id":"calendar:v3",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"calendar",
-         "preferred":true,
-         "title":"Calendar API",
-         "version":"v3"
+      "name": "books",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "https://code.google.com/apis/books/docs/v1/getting_started.html",
+      "discoveryLink": "./apis/books/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    },
+    {
+      "title": "Calendar API",
+      "id": "calendar:v3",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you manipulate events and other calendar data.",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/calendar-16.png",
+        "x32": "http://www.google.com/images/icons/product/calendar-32.png"
       },
-      {
-         "description":"Lets you search over a website or collection of websites",
-         "discoveryLink":"./apis/customsearch/v1/rest",
-         "documentationLink":"http://code.google.com/apis/customsearch/v1/using_rest.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/search-16.gif",
-            "x32":"http://www.google.com/images/icons/product/search-32.gif"
-         },
-         "id":"customsearch:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"customsearch",
-         "preferred":true,
-         "title":"CustomSearch API",
-         "version":"v1"
+      "name": "calendar",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/calendar/v3/using.html",
+      "discoveryLink": "./apis/calendar/v3/rest",
+      "preferred": true,
+      "version": "v3"
+    },
+    {
+      "title": "CustomSearch API",
+      "id": "customsearch:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you search over a website or collection of websites",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/search-16.gif",
+        "x32": "http://www.google.com/images/icons/product/search-32.gif"
       },
-      {
-         "description":"Lets you discover information about other Google APIs, such as what APIs are available, the resource and method details for each API",
-         "discoveryLink":"./apis/discovery/v1/rest",
-         "documentationLink":"http://code.google.com/apis/discovery",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/feature/filing_cabinet_search-g16.png",
-            "x32":"http://www.google.com/images/icons/feature/filing_cabinet_search-g32.png"
-         },
-         "id":"discovery:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"discovery",
-         "preferred":true,
-         "title":"APIs Discovery Service",
-         "version":"v1"
+      "name": "customsearch",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/customsearch/v1/using_rest.html",
+      "discoveryLink": "./apis/customsearch/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    },
+    {
+      "title": "APIs Discovery Service",
+      "id": "discovery:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you discover information about other Google APIs, such as what APIs are available, the resource and method details for each API",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/feature/filing_cabinet_search-g16.png",
+        "x32": "http://www.google.com/images/icons/feature/filing_cabinet_search-g32.png"
       },
-      {
-         "description":"Lets you access the Freebase repository of open data.",
-         "discoveryLink":"./apis/freebase/v1-sandbox/rest",
-         "documentationLink":"http://wiki.freebase.com/wiki/New_Freebase_API",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/freebase-16.png",
-            "x32":"http://www.google.com/images/icons/product/freebase-32.png"
-         },
-         "id":"freebase:v1-sandbox",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"freebase",
-         "title":"Freebase API",
-         "version":"v1-sandbox"
+      "name": "discovery",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/discovery",
+      "discoveryLink": "./apis/discovery/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    },
+    {
+      "title": "Freebase API",
+      "id": "freebase:v1-sandbox",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you access the Freebase repository of open data.",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/freebase-16.png",
+        "x32": "http://www.google.com/images/icons/product/freebase-32.png"
       },
-      {
-         "description":"Lets you access the Freebase repository of open data.",
-         "discoveryLink":"./apis/freebase/v1/rest",
-         "documentationLink":"http://wiki.freebase.com/wiki/New_Freebase_API",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/freebase-16.png",
-            "x32":"http://www.google.com/images/icons/product/freebase-32.png"
-         },
-         "id":"freebase:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"freebase",
-         "preferred":true,
-         "title":"Freebase API",
-         "version":"v1"
+      "name": "freebase",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://wiki.freebase.com/wiki/New_Freebase_API",
+      "discoveryLink": "./apis/freebase/v1-sandbox/rest",
+      "version": "v1-sandbox"
+    },
+    {
+      "title": "Freebase API",
+      "id": "freebase:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you access the Freebase repository of open data.",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/freebase-16.png",
+        "x32": "http://www.google.com/images/icons/product/freebase-32.png"
       },
-      {
-         "description":"Groups Settings Api",
-         "discoveryLink":"./apis/groupssettings/v1/rest",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/search-16.gif",
-            "x32":"http://www.google.com/images/icons/product/search-32.gif"
-         },
-         "id":"groupssettings:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"groupssettings",
-         "preferred":true,
-         "version":"v1"
+      "name": "freebase",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://wiki.freebase.com/wiki/New_Freebase_API",
+      "discoveryLink": "./apis/freebase/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    },
+    {
+      "id": "groupssettings:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Groups Settings Api",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/search-16.gif",
+        "x32": "http://www.google.com/images/icons/product/search-32.gif"
       },
-      {
-         "description":"Lets you read and update your current location and work with your location history",
-         "discoveryLink":"./apis/latitude/v1/rest",
-         "documentationLink":"http://code.google.com/apis/latitude/v1/using_rest.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/search-16.gif",
-            "x32":"http://www.google.com/images/icons/product/search-32.gif"
-         },
-         "id":"latitude:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"latitude",
-         "preferred":true,
-         "title":"Google Latitude API",
-         "version":"v1"
+      "name": "groupssettings",
+      "kind": "discovery#directoryItem",
+      "discoveryLink": "./apis/groupssettings/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    },
+    {
+      "title": "Google Latitude API",
+      "id": "latitude:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you read and update your current location and work with your location history",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/search-16.gif",
+        "x32": "http://www.google.com/images/icons/product/search-32.gif"
       },
-      {
-         "description":"Moderator API",
-         "discoveryLink":"./apis/moderator/v1/rest",
-         "documentationLink":"http://code.google.com/apis/moderator/v1/using_rest.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/moderator-32.png",
-            "x32":"http://www.google.com/images/icons/product/search-32.gif"
-         },
-         "id":"moderator:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"moderator",
-         "preferred":true,
-         "title":"Moderator API",
-         "version":"v1"
+      "name": "latitude",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/latitude/v1/using_rest.html",
+      "discoveryLink": "./apis/latitude/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    },
+    {
+      "title": "Moderator API",
+      "id": "moderator:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Moderator API",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/moderator-32.png",
+        "x32": "http://www.google.com/images/icons/product/search-32.gif"
       },
-      {
-         "description":"OAuth2 API",
-         "discoveryLink":"./apis/oauth2/v1/rest",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/search-16.gif",
-            "x32":"http://www.google.com/images/icons/product/search-32.gif"
-         },
-         "id":"oauth2:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"oauth2",
-         "version":"v1"
+      "name": "moderator",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/moderator/v1/using_rest.html",
+      "discoveryLink": "./apis/moderator/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    },
+    {
+      "id": "oauth2:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "OAuth2 API",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/search-16.gif",
+        "x32": "http://www.google.com/images/icons/product/search-32.gif"
       },
-      {
-         "description":"OAuth2 API",
-         "discoveryLink":"./apis/oauth2/v2/rest",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/search-16.gif",
-            "x32":"http://www.google.com/images/icons/product/search-32.gif"
-         },
-         "id":"oauth2:v2",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"oauth2",
-         "preferred":true,
-         "version":"v2"
+      "name": "oauth2",
+      "kind": "discovery#directoryItem",
+      "discoveryLink": "./apis/oauth2/v1/rest",
+      "version": "v1"
+    },
+    {
+      "id": "oauth2:v2",
+      "labels": [
+        "labs"
+      ],
+      "description": "OAuth2 API",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/search-16.gif",
+        "x32": "http://www.google.com/images/icons/product/search-32.gif"
       },
-      {
-         "description":"Lets you manage activities, comments and badges in Orkut. More stuff coming in time.",
-         "discoveryLink":"./apis/orkut/v2/rest",
-         "documentationLink":"http://code.google.com/apis/orkut/v2/reference.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/orkut-16.png",
-            "x32":"http://www.google.com/images/icons/product/orkut-32.png"
-         },
-         "id":"orkut:v2",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"orkut",
-         "preferred":true,
-         "title":"Orkut API",
-         "version":"v2"
+      "name": "oauth2",
+      "kind": "discovery#directoryItem",
+      "discoveryLink": "./apis/oauth2/v2/rest",
+      "preferred": true,
+      "version": "v2"
+    },
+    {
+      "title": "Orkut API",
+      "id": "orkut:v2",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you manage activities, comments and badges in Orkut. More stuff coming in time.",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/orkut-16.png",
+        "x32": "http://www.google.com/images/icons/product/orkut-32.png"
       },
-      {
-         "description":"Lets you analyze the performance of a web page and get tailored suggestions to make that page faster.",
-         "discoveryLink":"./apis/pagespeedonline/v1/rest",
-         "documentationLink":"https://code.google.com/apis/pagespeedonline/v1/getting_started.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/pagespeed-16.png",
-            "x32":"http://www.google.com/images/icons/product/pagespeed-32.png"
-         },
-         "id":"pagespeedonline:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"pagespeedonline",
-         "preferred":true,
-         "title":"Page Speed Online API",
-         "version":"v1"
+      "name": "orkut",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/orkut/v2/reference.html",
+      "discoveryLink": "./apis/orkut/v2/rest",
+      "preferred": true,
+      "version": "v2"
+    },
+    {
+      "title": "Page Speed Online API",
+      "id": "pagespeedonline:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you analyze the performance of a web page and get tailored suggestions to make that page faster.",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/pagespeed-16.png",
+        "x32": "http://www.google.com/images/icons/product/pagespeed-32.png"
       },
-      {
-         "description":"The Google+ API enables developers to build on top of the Google+ platform.",
-         "discoveryLink":"./apis/plus/v1/rest",
-         "documentationLink":"http://developers.google.com/+/api/",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/gplus-16.png",
-            "x32":"http://www.google.com/images/icons/product/gplus-32.png"
-         },
-         "id":"plus:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"plus",
-         "preferred":true,
-         "title":"Google+ API",
-         "version":"v1"
+      "name": "pagespeedonline",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "https://code.google.com/apis/pagespeedonline/v1/getting_started.html",
+      "discoveryLink": "./apis/pagespeedonline/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    },
+    {
+      "title": "Google+ API",
+      "id": "plus:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "The Google+ API enables developers to build on top of the Google+ platform.",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/gplus-16.png",
+        "x32": "http://www.google.com/images/icons/product/gplus-32.png"
       },
-      {
-         "description":"Lets you access a cloud hosted machine learning service that makes it easy to build smart apps",
-         "discoveryLink":"./apis/prediction/v1.2/rest",
-         "documentationLink":"http://code.google.com/apis/predict/docs/developer-guide.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/feature/predictionapi-16.png",
-            "x32":"http://www.google.com/images/icons/feature/predictionapi-32.png"
-         },
-         "id":"prediction:v1.2",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"prediction",
-         "title":"Prediction API",
-         "version":"v1.2"
+      "name": "plus",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://developers.google.com/+/api/",
+      "discoveryLink": "./apis/plus/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    },
+    {
+      "title": "Prediction API",
+      "id": "prediction:v1.2",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you access a cloud hosted machine learning service that makes it easy to build smart apps",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/feature/predictionapi-16.png",
+        "x32": "http://www.google.com/images/icons/feature/predictionapi-32.png"
       },
-      {
-         "description":"Lets you access a cloud hosted machine learning service that makes it easy to build smart apps",
-         "discoveryLink":"./apis/prediction/v1.3/rest",
-         "documentationLink":"http://code.google.com/apis/predict/docs/developer-guide.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/feature/predictionapi-16.png",
-            "x32":"http://www.google.com/images/icons/feature/predictionapi-32.png"
-         },
-         "id":"prediction:v1.3",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"prediction",
-         "title":"Prediction API",
-         "version":"v1.3"
+      "name": "prediction",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/predict/docs/developer-guide.html",
+      "discoveryLink": "./apis/prediction/v1.2/rest",
+      "version": "v1.2"
+    },
+    {
+      "title": "Prediction API",
+      "id": "prediction:v1.3",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you access a cloud hosted machine learning service that makes it easy to build smart apps",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/feature/predictionapi-16.png",
+        "x32": "http://www.google.com/images/icons/feature/predictionapi-32.png"
       },
-      {
-         "description":"Lets you access a cloud hosted machine learning service that makes it easy to build smart apps",
-         "discoveryLink":"./apis/prediction/v1.4/rest",
-         "documentationLink":"http://code.google.com/apis/predict/docs/developer-guide.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/feature/predictionapi-16.png",
-            "x32":"http://www.google.com/images/icons/feature/predictionapi-32.png"
-         },
-         "id":"prediction:v1.4",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"prediction",
-         "preferred":true,
-         "title":"Prediction API",
-         "version":"v1.4"
+      "name": "prediction",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/predict/docs/developer-guide.html",
+      "discoveryLink": "./apis/prediction/v1.3/rest",
+      "version": "v1.3"
+    },
+    {
+      "title": "Prediction API",
+      "id": "prediction:v1.4",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you access a cloud hosted machine learning service that makes it easy to build smart apps",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/feature/predictionapi-16.png",
+        "x32": "http://www.google.com/images/icons/feature/predictionapi-32.png"
       },
-      {
-         "description":"Lets you search over product data",
-         "discoveryLink":"./apis/shopping/v1/rest",
-         "documentationLink":"http://code.google.com/apis/shopping/search/v1/getting_started.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/search-16.gif",
-            "x32":"http://www.google.com/images/icons/product/search-32.gif"
-         },
-         "id":"shopping:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"shopping",
-         "preferred":true,
-         "title":"Search API for Shopping",
-         "version":"v1"
+      "name": "prediction",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/predict/docs/developer-guide.html",
+      "discoveryLink": "./apis/prediction/v1.4/rest",
+      "preferred": true,
+      "version": "v1.4"
+    },
+    {
+      "title": "Search API for Shopping",
+      "id": "shopping:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you search over product data",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/search-16.gif",
+        "x32": "http://www.google.com/images/icons/product/search-32.gif"
       },
-      {
-         "description":"Lets you programatically verify ownership of websites or domains with Google.",
-         "discoveryLink":"./apis/siteVerification/v1/rest",
-         "documentationLink":"http://code.google.com/apis/siteverification/",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/search-16.gif",
-            "x32":"http://www.google.com/images/icons/product/search-32.gif"
-         },
-         "id":"siteVerification:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"siteVerification",
-         "preferred":true,
-         "title":"Google Site Verification API",
-         "version":"v1"
+      "name": "shopping",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/shopping/search/v1/getting_started.html",
+      "discoveryLink": "./apis/shopping/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    },
+    {
+      "title": "Google Site Verification API",
+      "id": "siteVerification:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you programatically verify ownership of websites or domains with Google.",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/search-16.gif",
+        "x32": "http://www.google.com/images/icons/product/search-32.gif"
       },
-      {
-         "description":"Lets you access a Google App Engine Pull Task Queue over REST.",
-         "discoveryLink":"./apis/taskqueue/v1beta1/rest",
-         "documentationLink":"http://code.google.com/appengine/docs/python/taskqueue/rest.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/search-16.gif",
-            "x32":"http://www.google.com/images/icons/product/search-32.gif"
-         },
-         "id":"taskqueue:v1beta1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"taskqueue",
-         "preferred":true,
-         "title":"TaskQueue API",
-         "version":"v1bet1"
+      "name": "siteVerification",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/siteverification/",
+      "discoveryLink": "./apis/siteVerification/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    },
+    {
+      "title": "TaskQueue API",
+      "id": "taskqueue:v1beta1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you access a Google App Engine Pull Task Queue over REST.",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/search-16.gif",
+        "x32": "http://www.google.com/images/icons/product/search-32.gif"
       },
-      {
-         "description":"Lets you manage your tasks and task lists.",
-         "discoveryLink":"./apis/tasks/v1/rest",
-         "documentationLink":"http://code.google.com/apis/tasks/v1/using.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/tasks-16.png",
-            "x32":"http://www.google.com/images/icons/product/tasks-32.png"
-         },
-         "id":"tasks:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"tasks",
-         "preferred":true,
-         "title":"Tasks API",
-         "version":"v1"
+      "name": "taskqueue",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/appengine/docs/python/taskqueue/rest.html",
+      "discoveryLink": "./apis/taskqueue/v1beta1/rest",
+      "preferred": true,
+      "version": "v1bet1"
+    },
+    {
+      "title": "Tasks API",
+      "id": "tasks:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you manage your tasks and task lists.",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/tasks-16.png",
+        "x32": "http://www.google.com/images/icons/product/tasks-32.png"
       },
-      {
-         "description":"Lets you translate text from one language to another",
-         "discoveryLink":"./apis/translate/v2/rest",
-         "documentationLink":"http://code.google.com/apis/language/translate/v2/using_rest.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/translate-16.png",
-            "x32":"http://www.google.com/images/icons/product/translate-32.png"
-         },
-         "id":"translate:v2",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"translate",
-         "preferred":true,
-         "title":"Translate API",
-         "version":"v2"
+      "name": "tasks",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/tasks/v1/using.html",
+      "discoveryLink": "./apis/tasks/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    },
+    {
+      "title": "Translate API",
+      "id": "translate:v2",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you translate text from one language to another",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/translate-16.png",
+        "x32": "http://www.google.com/images/icons/product/translate-32.png"
       },
-      {
-         "description":"Lets you create, inspect, and manage goo.gl short URLs",
-         "discoveryLink":"./apis/urlshortener/v1/rest",
-         "documentationLink":"http://code.google.com/apis/urlshortener/v1/getting_started.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/product/search-16.gif",
-            "x32":"http://www.google.com/images/icons/product/search-32.gif"
-         },
-         "id":"urlshortener:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"urlshortener",
-         "preferred":true,
-         "title":"URL Shortener API",
-         "version":"v1"
+      "name": "translate",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/language/translate/v2/using_rest.html",
+      "discoveryLink": "./apis/translate/v2/rest",
+      "preferred": true,
+      "version": "v2"
+    },
+    {
+      "title": "URL Shortener API",
+      "id": "urlshortener:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "Lets you create, inspect, and manage goo.gl short URLs",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/product/search-16.gif",
+        "x32": "http://www.google.com/images/icons/product/search-32.gif"
       },
-      {
-         "description":"The Google Web Fonts Developer API.",
-         "discoveryLink":"./apis/webfonts/v1/rest",
-         "documentationLink":"http://code.google.com/apis/webfonts/docs/developer_api.html",
-         "icons":{
-            "x16":"http://www.google.com/images/icons/feature/font_api-16.png",
-            "x32":"http://www.google.com/images/icons/feature/font_api-32.gif"
-         },
-         "id":"webfonts:v1",
-         "kind":"discovery#directoryItem",
-         "labels":[
-            "labs"
-         ],
-         "name":"webfonts",
-         "preferred":true,
-         "title":"Google Web Fonts Developer API",
-         "version":"v1"
-      }
-   ],
-   "kind":"discovery#directoryList"
+      "name": "urlshortener",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/urlshortener/v1/getting_started.html",
+      "discoveryLink": "./apis/urlshortener/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    },
+    {
+      "title": "Google Web Fonts Developer API",
+      "id": "webfonts:v1",
+      "labels": [
+        "labs"
+      ],
+      "description": "The Google Web Fonts Developer API.",
+      "icons": {
+        "x16": "http://www.google.com/images/icons/feature/font_api-16.png",
+        "x32": "http://www.google.com/images/icons/feature/font_api-32.gif"
+      },
+      "name": "webfonts",
+      "kind": "discovery#directoryItem",
+      "documentationLink": "http://code.google.com/apis/webfonts/docs/developer_api.html",
+      "discoveryLink": "./apis/webfonts/v1/rest",
+      "preferred": true,
+      "version": "v1"
+    }
+  ]
 }
diff --git a/src/test/test_data/test_discovery_rest_service.json b/src/test/test_data/test_discovery_rest_service.json
index 5cc8f610..5ba99982 100644
--- a/src/test/test_data/test_discovery_rest_service.json
+++ b/src/test/test_data/test_discovery_rest_service.json
@@ -1,545 +1,558 @@
 {
-  "basePath": "/discovery/v1/",
-  "description":
-    "Lets you discover information about other Google APIs, such as what APIs are available, the resource and method details for each API",
   "documentationLink": "http://code.google.com/apis/discovery",
-  "icons": {
-    "x16":
-      "http://www.google.com/images/icons/feature/filing_cabinet_search-g16.png",
-    "x32":
-      "http://www.google.com/images/icons/feature/filing_cabinet_search-g32.png"
-  },
-  "id": "discovery:v1",
-  "kind": "discovery#restDescription",
-  "labels": [ "labs" ],
   "name": "discovery",
-  "parameters": {
-    "alt": {
-      "default": "json",
-      "description": "Data format for the response.",
-      "enum": [ "json" ],
-      "enumDescriptions": [
-        "Responses with Content-Type of application/json"
-      ],
-      "location": "query",
-      "type": "string"
-    },
-    "fields": {
-      "description":
-        "Selector specifying which fields to include in a partial response.",
-      "location": "query",
-      "type": "string"
-    },
-    "key": {
-      "description":
-        "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
-      "location": "query",
-      "type": "string"
-    },
-    "oauth_token": {
-      "description": "OAuth 2.0 token for the current user.",
-      "location": "query",
-      "type": "string"
-    },
-    "prettyPrint": {
-      "default": "true",
-      "description": "Returns response with indentations and line breaks.",
-      "location": "query",
-      "type": "boolean"
-    },
-    "quotaUser": {
-      "description":
-        "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.",
-      "location": "query",
-      "type": "string"
-    },
-    "userIp": {
-      "description":
-        "IP address of the site where the request originates. Use this if you want to enforce per-user limits.",
-      "location": "query",
-      "type": "string"
-    }
-  },
-  "protocol": "rest",
   "resources": {
     "apis": {
       "methods": {
         "getRest": {
-          "description":
-            "Retrieve the description of a particular version of an api.",
-          "httpMethod": "GET",
+          "description": "Retrieve the description of a particular version of an api.",
+          "response": {
+            "$ref": "RestDescription"
+          },
           "id": "discovery.apis.getRest",
-          "parameterOrder": [ "api", "version" ],
           "parameters": {
             "api": {
-              "description": "The name of the API.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "The name of the API."
             },
             "version": {
-              "description": "The version of the API.",
               "location": "path",
+              "type": "string",
               "required": true,
-              "type": "string"
+              "description": "The version of the API."
             }
           },
-          "path": "apis/{api}/{version}/rest",
-          "response": { "$ref": "RestDescription" }
+          "parameterOrder": [
+            "api",
+            "version"
+          ],
+          "httpMethod": "GET",
+          "path": "apis/{api}/{version}/rest"
         },
         "list": {
-          "description":
-            "Retrieve the list of APIs supported at this endpoint.",
-          "httpMethod": "GET",
+          "description": "Retrieve the list of APIs supported at this endpoint.",
+          "response": {
+            "$ref": "DirectoryList"
+          },
           "id": "discovery.apis.list",
           "parameters": {
             "label": {
-              "description":
-                "Only include APIs with a matching label, such as 'graduated' or 'labs'.",
-              "enum": [ "deprecated", "graduated", "labs" ],
+              "location": "query",
+              "enum": [
+                "deprecated",
+                "graduated",
+                "labs"
+              ],
+              "type": "string",
+              "description": "Only include APIs with a matching label, such as 'graduated' or 'labs'.",
               "enumDescriptions": [
                 "APIs that have been deprecated.",
                 "Supported APIs that have graduated from labs.",
                 "APIs that are experimental"
-              ],
-              "location": "query",
-              "type": "string"
+              ]
             },
             "name": {
-              "description": "Only include APIs with the given name.",
               "location": "query",
-              "type": "string"
+              "type": "string",
+              "description": "Only include APIs with the given name."
             },
             "preferred": {
-              "default": "false",
-              "description": "Return only the preferred version of an API.",
               "location": "query",
-              "type": "boolean"
+              "type": "boolean",
+              "default": "false",
+              "description": "Return only the preferred version of an API."
             }
           },
-          "path": "apis",
-          "response": { "$ref": "DirectoryList" }
+          "httpMethod": "GET",
+          "path": "apis"
         }
       }
     }
   },
+  "basePath": "/discovery/v1/",
+  "icons": {
+    "x16": "http://www.google.com/images/icons/feature/filing_cabinet_search-g16.png",
+    "x32": "http://www.google.com/images/icons/feature/filing_cabinet_search-g32.png"
+  },
   "schemas": {
     "DirectoryList": {
+      "type": "object",
       "id": "DirectoryList",
       "properties": {
         "items": {
-          "description":
-            "The individual directory entries. One entry per api/version pair.",
           "items": {
+            "type": "object",
             "properties": {
               "description": {
-                "description": "The description of this API.",
-                "type": "string"
+                "type": "string",
+                "description": "The description of this API."
               },
               "discoveryLink": {
-                "description": "A link to the discovery document.",
-                "type": "string"
+                "type": "string",
+                "description": "A link to the discovery document."
               },
               "documentationLink": {
-                "description":
-                  "A link to human readable documentation for the API.",
-                "type": "string"
+                "type": "string",
+                "description": "A link to human readable documentation for the API."
               },
               "icons": {
-                "description":
-                  "Links to 16x16 and 32x32 icons representing the API.",
+                "type": "object",
+                "description": "Links to 16x16 and 32x32 icons representing the API.",
                 "properties": {
                   "x16": {
-                    "description": "The url of the 16x16 icon.",
-                    "type": "string"
+                    "type": "string",
+                    "description": "The url of the 16x16 icon."
                   },
                   "x32": {
-                    "description": "The url of the 32x32 icon.",
-                    "type": "string"
+                    "type": "string",
+                    "description": "The url of the 32x32 icon."
                   }
-                },
-                "type": "object"
+                }
               },
               "id": {
-                "description": "The id of this API.",
-                "type": "string"
+                "type": "string",
+                "description": "The id of this API."
               },
               "kind": {
+                "type": "string",
                 "default": "discovery#directoryItem",
-                "description": "The kind for this response.",
-                "type": "string"
+                "description": "The kind for this response."
               },
               "labels": {
-                "description":
-                  "Labels for the status of this API, such as labs or deprecated.",
-                "items": { "type": "string" },
-                "type": "array"
+                "items": {
+                  "type": "string"
+                },
+                "type": "array",
+                "description": "Labels for the status of this API, such as labs or deprecated."
               },
               "name": {
-                "description": "The name of the API.",
-                "type": "string"
+                "type": "string",
+                "description": "The name of the API."
               },
               "preferred": {
-                "description":
-                  "True if this version is the preferred version to use.",
-                "type": "boolean"
+                "type": "boolean",
+                "description": "True if this version is the preferred version to use."
               },
               "title": {
-                "description": "The title of this API.",
-                "type": "string"
+                "type": "string",
+                "description": "The title of this API."
               },
               "version": {
-                "description": "The version of the API.",
-                "type": "string"
+                "type": "string",
+                "description": "The version of the API."
               }
-            },
-            "type": "object"
+            }
           },
-          "type": "array"
+          "type": "array",
+          "description": "The individual directory entries. One entry per api/version pair."
         },
         "kind": {
+          "type": "string",
           "default": "discovery#directoryList",
-          "description": "The kind for this response.",
-          "type": "string"
+          "description": "The kind for this response."
         }
-      },
-      "type": "object"
+      }
     },
     "JsonSchema": {
+      "type": "object",
       "id": "JsonSchema",
       "properties": {
         "$ref": {
-          "description":
-            "A reference to another schema. The value of this property is the \"id\" of another schema.",
-          "type": "string"
+          "type": "string",
+          "description": "A reference to another schema. The value of this property is the \"id\" of another schema."
         },
         "additionalProperties": {
           "$ref": "JsonSchema",
-          "description":
-            "If this is a schema for an object, this property is the schema for any additional properties with dynamic keys on this object."
+          "description": "If this is a schema for an object, this property is the schema for any additional properties with dynamic keys on this object."
         },
         "default": {
-          "description":
-            "The default value of this property (if one exists).",
-          "type": "string"
+          "type": "string",
+          "description": "The default value of this property (if one exists)."
         },
         "description": {
-          "description": "A description of this object.",
-          "type": "string"
+          "type": "string",
+          "description": "A description of this object."
         },
         "enum": {
-          "description": "Values this parameter may take (if it is an enum).",
-          "items": { "type": "string" },
-          "type": "array"
+          "items": {
+            "type": "string"
+          },
+          "type": "array",
+          "description": "Values this parameter may take (if it is an enum)."
         },
         "enumDescriptions": {
-          "description":
-            "The descriptions for the enums. Each position maps to the corresponding value in the \"enum\" array.",
-          "items": { "type": "string" },
-          "type": "array"
+          "items": {
+            "type": "string"
+          },
+          "type": "array",
+          "description": "The descriptions for the enums. Each position maps to the corresponding value in the \"enum\" array."
         },
         "format": {
-          "description":
-            "An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23",
-          "type": "string"
+          "type": "string",
+          "description": "An additional regular expression or key that helps constrain the value. For more details see: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23"
         },
         "id": {
-          "description": "Unique identifier for this schema.",
-          "type": "string"
+          "type": "string",
+          "description": "Unique identifier for this schema."
         },
         "items": {
           "$ref": "JsonSchema",
-          "description":
-            "If this is a schema for an array, this property is the schema for each element in the array."
+          "description": "If this is a schema for an array, this property is the schema for each element in the array."
         },
         "location": {
-          "description":
-            "Whether this parameter goes in the query or the path for REST requests.",
-          "type": "string"
+          "type": "string",
+          "description": "Whether this parameter goes in the query or the path for REST requests."
         },
         "maximum": {
-          "description": "The maximum value of this parameter.",
-          "type": "string"
+          "type": "string",
+          "description": "The maximum value of this parameter."
         },
         "minimum": {
-          "description": "The minimum value of this parameter.",
-          "type": "string"
+          "type": "string",
+          "description": "The minimum value of this parameter."
         },
         "pattern": {
-          "description":
-            "The regular expression this parameter must conform to.",
-          "type": "string"
+          "type": "string",
+          "description": "The regular expression this parameter must conform to."
         },
         "properties": {
-          "additionalProperties": { "$ref": "JsonSchema" },
-          "description":
-            "If this is a schema for an object, list the schema for each property of this object.",
-          "type": "object"
+          "type": "object",
+          "description": "If this is a schema for an object, list the schema for each property of this object.",
+          "additionalProperties": {
+            "$ref": "JsonSchema"
+          }
         },
         "repeated": {
-          "description": "Whether this parameter may appear multiple times.",
-          "type": "boolean"
+          "type": "boolean",
+          "description": "Whether this parameter may appear multiple times."
         },
         "required": {
-          "description": "Whether the parameter is required.",
-          "type": "boolean"
+          "type": "boolean",
+          "description": "Whether the parameter is required."
         },
         "type": {
-          "description":
-            "The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1",
-          "type": "string"
+          "type": "string",
+          "description": "The value type for this schema. A list of values can be found here: http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1"
         }
-      },
-      "type": "object"
+      }
     },
     "RestDescription": {
+      "type": "object",
       "id": "RestDescription",
       "properties": {
         "auth": {
+          "type": "object",
           "description": "Authentication information.",
           "properties": {
             "oauth2": {
+              "type": "object",
               "description": "OAuth 2.0 authentication information.",
               "properties": {
                 "scopes": {
+                  "type": "object",
+                  "description": "Available OAuth 2.0 scopes.",
                   "additionalProperties": {
+                    "type": "object",
                     "description": "The scope value.",
                     "properties": {
                       "description": {
-                        "description": "Description of scope.",
-                        "type": "string"
+                        "type": "string",
+                        "description": "Description of scope."
                       }
-                    },
-                    "type": "object"
-                  },
-                  "description": "Available OAuth 2.0 scopes.",
-                  "type": "object"
+                    }
+                  }
                 }
-              },
-              "type": "object"
+              }
             }
-          },
-          "type": "object"
+          }
         },
         "basePath": {
-          "description": "The base URI path for REST requests.",
-          "type": "string"
+          "type": "string",
+          "description": "The base URI path for REST requests."
         },
         "description": {
-          "description": "The description of this API.",
-          "type": "string"
+          "type": "string",
+          "description": "The description of this API."
         },
         "documentationLink": {
-          "description":
-            "A link to human readable documentation for the API.",
-          "type": "string"
+          "type": "string",
+          "description": "A link to human readable documentation for the API."
         },
         "features": {
-          "description": "A list of supported features for this API.",
-          "items": { "type": "string" },
-          "type": "array"
+          "items": {
+            "type": "string"
+          },
+          "type": "array",
+          "description": "A list of supported features for this API."
         },
         "icons": {
-          "description":
-            "Links to 16x16 and 32x32 icons representing the API.",
+          "type": "object",
+          "description": "Links to 16x16 and 32x32 icons representing the API.",
           "properties": {
             "x16": {
-              "description": "The url of the 16x16 icon.",
-              "type": "string"
+              "type": "string",
+              "description": "The url of the 16x16 icon."
             },
             "x32": {
-              "description": "The url of the 32x32 icon.",
-              "type": "string"
+              "type": "string",
+              "description": "The url of the 32x32 icon."
             }
-          },
-          "type": "object"
+          }
+        },
+        "id": {
+          "type": "string",
+          "description": "The id of this API."
         },
-        "id": { "description": "The id of this API.", "type": "string" },
         "kind": {
+          "type": "string",
           "default": "discovery#restDescription",
-          "description": "The kind for this response.",
-          "type": "string"
+          "description": "The kind for this response."
         },
         "labels": {
-          "description":
-            "Labels for the status of this API, such as labs or deprecated.",
-          "items": { "type": "string" },
-          "type": "array"
+          "items": {
+            "type": "string"
+          },
+          "type": "array",
+          "description": "Labels for the status of this API, such as labs or deprecated."
         },
         "methods": {
-          "additionalProperties": { "$ref": "RestMethod" },
+          "type": "object",
           "description": "API-level methods for this API.",
-          "type": "object"
+          "additionalProperties": {
+            "$ref": "RestMethod"
+          }
+        },
+        "name": {
+          "type": "string",
+          "description": "The name of this API."
         },
-        "name": { "description": "The name of this API.", "type": "string" },
         "parameters": {
-          "additionalProperties": { "$ref": "JsonSchema" },
+          "type": "object",
           "description": "Common parameters that apply across all apis.",
-          "type": "object"
+          "additionalProperties": {
+            "$ref": "JsonSchema"
+          }
         },
         "protocol": {
+          "type": "string",
           "default": "rest",
-          "description": "The protocol described by this document.",
-          "type": "string"
+          "description": "The protocol described by this document."
         },
         "resources": {
-          "additionalProperties": { "$ref": "RestResource" },
+          "type": "object",
           "description": "The resources in this API.",
-          "type": "object"
+          "additionalProperties": {
+            "$ref": "RestResource"
+          }
         },
         "schemas": {
-          "additionalProperties": { "$ref": "JsonSchema" },
+          "type": "object",
           "description": "The schemas for this API.",
-          "type": "object"
+          "additionalProperties": {
+            "$ref": "JsonSchema"
+          }
         },
         "title": {
-          "description": "The title of this API.",
-          "type": "string"
+          "type": "string",
+          "description": "The title of this API."
         },
         "version": {
-          "description": "The version of this API.",
-          "type": "string"
+          "type": "string",
+          "description": "The version of this API."
         }
-      },
-      "type": "object"
+      }
     },
     "RestMethod": {
+      "type": "object",
       "id": "RestMethod",
       "properties": {
         "description": {
-          "description": "Description of this method.",
-          "type": "string"
+          "type": "string",
+          "description": "Description of this method."
         },
         "httpMethod": {
-          "description": "HTTP method used by this method.",
-          "type": "string"
+          "type": "string",
+          "description": "HTTP method used by this method."
         },
         "id": {
-          "description":
-            "A unique ID for this method. This property can be used to match methods between different versions of Discovery.",
-          "type": "string"
+          "type": "string",
+          "description": "A unique ID for this method. This property can be used to match methods between different versions of Discovery."
         },
         "mediaUpload": {
+          "type": "object",
           "description": "Media upload parameters.",
           "properties": {
             "accept": {
-              "description":
-                "MIME Media Ranges for acceptable media uploads to this method.",
-              "items": { "type": "string" },
-              "type": "array"
+              "items": {
+                "type": "string"
+              },
+              "type": "array",
+              "description": "MIME Media Ranges for acceptable media uploads to this method."
             },
             "maxSize": {
-              "description":
-                "Maximum size of a media upload, such as \"1MB\", \"2GB\" or \"3TB\".",
-              "type": "string"
+              "type": "string",
+              "description": "Maximum size of a media upload, such as \"1MB\", \"2GB\" or \"3TB\"."
             },
             "protocols": {
+              "type": "object",
               "description": "Supported upload protocols.",
               "properties": {
                 "resumable": {
-                  "description":
-                    "Supports the Resumable Media Upload protocol.",
+                  "type": "object",
+                  "description": "Supports the Resumable Media Upload protocol.",
                   "properties": {
                     "multipart": {
+                      "type": "boolean",
                       "default": "true",
-                      "description":
-                        "True if this endpoint supports uploading multipart media.",
-                      "type": "boolean"
+                      "description": "True if this endpoint supports uploading multipart media."
                     },
                     "path": {
-                      "description":
-                        "The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level.",
-                      "type": "string"
+                      "type": "string",
+                      "description": "The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level."
                     }
-                  },
-                  "type": "object"
+                  }
                 },
                 "simple": {
-                  "description":
-                    "Supports uploading as a single HTTP request.",
+                  "type": "object",
+                  "description": "Supports uploading as a single HTTP request.",
                   "properties": {
                     "multipart": {
+                      "type": "boolean",
                       "default": "true",
-                      "description":
-                        "True if this endpoint supports upload multipart media.",
-                      "type": "boolean"
+                      "description": "True if this endpoint supports upload multipart media."
                     },
                     "path": {
-                      "description":
-                        "The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level.",
-                      "type": "string"
+                      "type": "string",
+                      "description": "The URI path to be used for upload. Should be used in conjunction with the basePath property at the api-level."
                     }
-                  },
-                  "type": "object"
+                  }
                 }
-              },
-              "type": "object"
+              }
             }
-          },
-          "type": "object"
+          }
         },
         "parameterOrder": {
-          "description":
-            "Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the \"most-significant\" parameter appears first.",
-          "items": { "type": "string" },
-          "type": "array"
+          "items": {
+            "type": "string"
+          },
+          "type": "array",
+          "description": "Ordered list of required parameters, serves as a hint to clients on how to structure their method signatures. The array is ordered such that the \"most-significant\" parameter appears first."
         },
         "parameters": {
-          "additionalProperties": { "$ref": "JsonSchema" },
+          "type": "object",
           "description": "Details for all parameters in this method.",
-          "type": "object"
+          "additionalProperties": {
+            "$ref": "JsonSchema"
+          }
         },
         "path": {
-          "description":
-            "The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level.",
-          "type": "string"
+          "type": "string",
+          "description": "The URI path of this REST method. Should be used in conjunction with the basePath property at the api-level."
         },
         "request": {
+          "type": "object",
           "description": "The schema for the request.",
           "properties": {
             "$ref": {
-              "description": "Schema ID for the request schema.",
-              "type": "string"
+              "type": "string",
+              "description": "Schema ID for the request schema."
             }
-          },
-          "type": "object"
+          }
         },
         "response": {
+          "type": "object",
           "description": "The schema for the response.",
           "properties": {
             "$ref": {
-              "description": "Schema ID for the response schema.",
-              "type": "string"
+              "type": "string",
+              "description": "Schema ID for the response schema."
             }
-          },
-          "type": "object"
+          }
         },
         "scopes": {
-          "description": "OAuth 2.0 scopes applicable to this method.",
-          "items": { "type": "string" },
-          "type": "array"
+          "items": {
+            "type": "string"
+          },
+          "type": "array",
+          "description": "OAuth 2.0 scopes applicable to this method."
         }
-      },
-      "type": "object"
+      }
     },
     "RestResource": {
+      "type": "object",
       "id": "RestResource",
       "properties": {
         "methods": {
-          "additionalProperties": { "$ref": "RestMethod" },
+          "type": "object",
           "description": "Methods on this resource.",
-          "type": "object"
+          "additionalProperties": {
+            "$ref": "RestMethod"
+          }
         },
         "resources": {
-          "additionalProperties": { "$ref": "RestResource" },
+          "type": "object",
           "description": "Sub-resources on this resource.",
-          "type": "object"
+          "additionalProperties": {
+            "$ref": "RestResource"
+          }
         }
-      },
-      "type": "object"
+      }
     }
   },
+  "description": "Lets you discover information about other Google APIs, such as what APIs are available, the resource and method details for each API",
+  "labels": [
+    "labs"
+  ],
+  "version": "v1",
+  "kind": "discovery#restDescription",
   "title": "APIs Discovery Service",
-  "version": "v1"
+  "parameters": {
+    "alt": {
+      "location": "query",
+      "enum": [
+        "json"
+      ],
+      "type": "string",
+      "default": "json",
+      "description": "Data format for the response.",
+      "enumDescriptions": [
+        "Responses with Content-Type of application/json"
+      ]
+    },
+    "fields": {
+      "location": "query",
+      "type": "string",
+      "description": "Selector specifying which fields to include in a partial response."
+    },
+    "key": {
+      "location": "query",
+      "type": "string",
+      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
+    },
+    "oauth_token": {
+      "location": "query",
+      "type": "string",
+      "description": "OAuth 2.0 token for the current user."
+    },
+    "prettyPrint": {
+      "location": "query",
+      "type": "boolean",
+      "default": "true",
+      "description": "Returns response with indentations and line breaks."
+    },
+    "quotaUser": {
+      "location": "query",
+      "type": "string",
+      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided."
+    },
+    "userIp": {
+      "location": "query",
+      "type": "string",
+      "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits."
+    }
+  },
+  "id": "discovery:v1",
+  "protocol": "rest"
 }
-
diff --git a/src/test/test_data/test_freebusy.json b/src/test/test_data/test_freebusy.json
index 01d87449..5bd8d46e 100644
--- a/src/test/test_data/test_freebusy.json
+++ b/src/test/test_data/test_freebusy.json
@@ -1,38 +1,40 @@
 {
+  "timeMin": "2011-01-01T00:00:00.000Z",
+  "timeMax": "2011-01-08T00:00:00.000Z",
   "calendars": {
     "user1@domain.com": {
       "busy": [
         {
-          "end": "2011-01-03T22:00:00.000Z",
-          "start": "2011-01-03T21:00:00.000Z"
+          "start": "2011-01-03T21:00:00.000Z",
+          "end": "2011-01-03T22:00:00.000Z"
         },
         {
-           "end": "2011-01-04T05:30:00.000Z",
-           "start": "2011-01-04T04:30:00.000Z"
+          "start": "2011-01-04T04:30:00.000Z",
+          "end": "2011-01-04T05:30:00.000Z"
         }
       ]
     },
     "groupUser1@domain.com": {
       "busy": [
         {
-          "end": "2011-01-01T14:00:00.000Z",
-          "start": "2011-01-01T12:00:00.000Z"
+          "start": "2011-01-01T12:00:00.000Z",
+          "end": "2011-01-01T14:00:00.000Z"
         },
         {
-           "end": "2011-01-01T15:30:00.000Z",
-           "start": "2011-01-01T14:30:00.000Z"
+          "start": "2011-01-01T14:30:00.000Z",
+          "end": "2011-01-01T15:30:00.000Z"
         }
       ]
     },
     "groupUser2@domain.com": {
       "busy": [
         {
-          "end": "2011-01-01T17:00:00.000Z",
-          "start": "2011-01-01T16:00:00.000Z"
+          "start": "2011-01-01T16:00:00.000Z",
+          "end": "2011-01-01T17:00:00.000Z"
         },
         {
-           "end": "2011-01-02T22:30:00.000Z",
-           "start": "2011-01-02T18:30:00.000Z"
+          "start": "2011-01-02T18:30:00.000Z",
+          "end": "2011-01-02T22:30:00.000Z"
         }
       ]
     }
@@ -45,8 +47,5 @@
       ]
     }
   },
-  "kind": "calendar#freeBusy",
-  "timeMax": "2011-01-08T00:00:00.000Z",
-  "timeMin": "2011-01-01T00:00:00.000Z"
+  "kind": "calendar#freeBusy"
 }
-
diff --git a/src/test/test_data/test_freebusy_parameters.json b/src/test/test_data/test_freebusy_parameters.json
index 9362b552..63cfbce4 100644
--- a/src/test/test_data/test_freebusy_parameters.json
+++ b/src/test/test_data/test_freebusy_parameters.json
@@ -1 +1 @@
-{"items":[{"id":"calendar_id"},{"id":"calendar_id_2"}],"timeMax":"2011-12-01T00:00:00.000Z","timeMin":"2011-11-10T00:00:00.000Z"}
+{"timeMax":"2011-12-01T00:00:00.000Z","timeMin":"2011-11-10T00:00:00.000Z","items":[{"id":"calendar_id"},{"id":"calendar_id_2"}]}
diff --git a/src/test/test_data/test_plus_rest_service.json b/src/test/test_data/test_plus_rest_service.json
index 780a0fd9..388dc417 100644
--- a/src/test/test_data/test_plus_rest_service.json
+++ b/src/test/test_data/test_plus_rest_service.json
@@ -1,685 +1,685 @@
 {
-   "auth":{
-      "oauth2":{
-         "scopes":{
-            "https://www.googleapis.com/auth/tasks":{
-               "description":"Manage your tasks"
-            },
-            "https://www.googleapis.com/auth/tasks.readonly":{
-               "description":"View your tasks"
-            }
-         }
+  "auth": {
+    "oauth2": {
+      "scopes": {
+        "https://www.googleapis.com/auth/tasks": {
+          "description": "Manage your tasks"
+        },
+        "https://www.googleapis.com/auth/tasks.readonly": {
+          "description": "View your tasks"
+        }
       }
-   },
-   "basePath":"/tasks/v1/",
-   "description":"Lets you manage your tasks and task lists.",
-   "documentationLink":"http://code.google.com/apis/tasks/v1/using.html",
-   "icons":{
-      "x16":"http://www.google.com/images/icons/product/tasks-16.png",
-      "x32":"http://www.google.com/images/icons/product/tasks-32.png"
-   },
-   "id":"tasks:v1",
-   "kind":"discovery#restDescription",
-   "labels":[
-      "labs"
-   ],
-   "name":"tasks",
-   "parameters":{
-      "alt":{
-         "default":"json",
-         "description":"Data format for the response.",
-         "enum":[
-            "json"
-         ],
-         "enumDescriptions":[
-            "Responses with Content-Type of application/json"
-         ],
-         "location":"query",
-         "type":"string"
-      },
-      "fields":{
-         "description":"Selector specifying which fields to include in a partial response.",
-         "location":"query",
-         "type":"string"
-      },
-      "key":{
-         "description":"API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
-         "location":"query",
-         "type":"string"
-      },
-      "oauth_token":{
-         "description":"OAuth 2.0 token for the current user.",
-         "location":"query",
-         "type":"string"
-      },
-      "prettyPrint":{
-         "default":"true",
-         "description":"Returns response with indentations and line breaks.",
-         "location":"query",
-         "type":"boolean"
-      },
-      "quotaUser":{
-         "description":"Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.",
-         "location":"query",
-         "type":"string"
-      },
-      "userIp":{
-         "description":"IP address of the site where the request originates. Use this if you want to enforce per-user limits.",
-         "location":"query",
-         "type":"string"
-      }
-   },
-   "protocol":"rest",
-   "resources":{
-      "tasklists":{
-         "methods":{
-            "delete":{
-               "description":"Deletes the authenticated user's specified task list.",
-               "httpMethod":"DELETE",
-               "id":"tasks.tasklists.delete",
-               "parameterOrder":[
-                  "tasklist"
-               ],
-               "parameters":{
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"users/@me/lists/{tasklist}",
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "get":{
-               "description":"Returns the authenticated user's specified task list.",
-               "httpMethod":"GET",
-               "id":"tasks.tasklists.get",
-               "parameterOrder":[
-                  "tasklist"
-               ],
-               "parameters":{
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"users/@me/lists/{tasklist}",
-               "response":{
-                  "$ref":"TaskList"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks",
-                  "https://www.googleapis.com/auth/tasks.readonly"
-               ]
-            },
-            "insert":{
-               "description":"Creates a new task list and adds it to the authenticated user's task lists.",
-               "httpMethod":"POST",
-               "id":"tasks.tasklists.insert",
-               "path":"users/@me/lists",
-               "request":{
-                  "$ref":"TaskList"
-               },
-               "response":{
-                  "$ref":"TaskList"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "list":{
-               "description":"Returns all the authenticated user's task lists.",
-               "httpMethod":"GET",
-               "id":"tasks.tasklists.list",
-               "parameters":{
-                  "maxResults":{
-                     "description":"Maximum number of task lists returned on one page. Optional. The default is 100.",
-                     "format":"int64",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "pageToken":{
-                     "description":"Token specifying the result page to return. Optional.",
-                     "location":"query",
-                     "type":"string"
-                  }
-               },
-               "path":"users/@me/lists",
-               "response":{
-                  "$ref":"TaskLists"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks",
-                  "https://www.googleapis.com/auth/tasks.readonly"
-               ]
-            },
-            "patch":{
-               "description":"Updates the authenticated user's specified task list. This method supports patch semantics.",
-               "httpMethod":"PATCH",
-               "id":"tasks.tasklists.patch",
-               "parameterOrder":[
-                  "tasklist"
-               ],
-               "parameters":{
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"users/@me/lists/{tasklist}",
-               "request":{
-                  "$ref":"TaskList"
-               },
-               "response":{
-                  "$ref":"TaskList"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "update":{
-               "description":"Updates the authenticated user's specified task list.",
-               "httpMethod":"PUT",
-               "id":"tasks.tasklists.update",
-               "parameterOrder":[
-                  "tasklist"
-               ],
-               "parameters":{
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"users/@me/lists/{tasklist}",
-               "request":{
-                  "$ref":"TaskList"
-               },
-               "response":{
-                  "$ref":"TaskList"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
+    }
+  },
+  "documentationLink": "http://code.google.com/apis/tasks/v1/using.html",
+  "name": "tasks",
+  "resources": {
+    "tasklists": {
+      "methods": {
+        "delete": {
+          "description": "Deletes the authenticated user's specified task list.",
+          "id": "tasks.tasklists.delete",
+          "parameters": {
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
             }
-         }
-      },
-      "tasks":{
-         "methods":{
-            "clear":{
-               "description":"Clears all completed tasks from the specified task list. The affected tasks will be marked as 'hidden' and no longer be returned by default when retrieving all tasks for a task list.",
-               "httpMethod":"POST",
-               "id":"tasks.tasks.clear",
-               "parameterOrder":[
-                  "tasklist"
-               ],
-               "parameters":{
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/clear",
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "delete":{
-               "description":"Deletes the specified task from the task list.",
-               "httpMethod":"DELETE",
-               "id":"tasks.tasks.delete",
-               "parameterOrder":[
-                  "tasklist",
-                  "task"
-               ],
-               "parameters":{
-                  "task":{
-                     "description":"Task identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  },
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/tasks/{task}",
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "get":{
-               "description":"Returns the specified task.",
-               "httpMethod":"GET",
-               "id":"tasks.tasks.get",
-               "parameterOrder":[
-                  "tasklist",
-                  "task"
-               ],
-               "parameters":{
-                  "task":{
-                     "description":"Task identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  },
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/tasks/{task}",
-               "response":{
-                  "$ref":"Task"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks",
-                  "https://www.googleapis.com/auth/tasks.readonly"
-               ]
-            },
-            "insert":{
-               "description":"Creates a new task on the specified task list.",
-               "httpMethod":"POST",
-               "id":"tasks.tasks.insert",
-               "parameterOrder":[
-                  "tasklist"
-               ],
-               "parameters":{
-                  "parent":{
-                     "description":"Parent task identifier. If the task is created at the top level, this parameter is omitted. Optional.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "previous":{
-                     "description":"Previous sibling task identifier. If the task is created at the first position among its siblings, this parameter is omitted. Optional.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/tasks",
-               "request":{
-                  "$ref":"Task"
-               },
-               "response":{
-                  "$ref":"Task"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "list":{
-               "description":"Returns all tasks in the specified task list.",
-               "httpMethod":"GET",
-               "id":"tasks.tasks.list",
-               "parameterOrder":[
-                  "tasklist"
-               ],
-               "parameters":{
-                  "completedMax":{
-                     "description":"Upper bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by completion date.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "completedMin":{
-                     "description":"Lower bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by completion date.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "dueMax":{
-                     "description":"Upper bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by due date.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "dueMin":{
-                     "description":"Lower bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by due date.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "maxResults":{
-                     "description":"Maximum number of task lists returned on one page. Optional. The default is 100.",
-                     "format":"int64",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "pageToken":{
-                     "description":"Token specifying the result page to return. Optional.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "showCompleted":{
-                     "description":"Flag indicating whether completed tasks are returned in the result. Optional. The default is True.",
-                     "location":"query",
-                     "type":"boolean"
-                  },
-                  "showDeleted":{
-                     "description":"Flag indicating whether deleted tasks are returned in the result. Optional. The default is False.",
-                     "location":"query",
-                     "type":"boolean"
-                  },
-                  "showHidden":{
-                     "description":"Flag indicating whether hidden tasks are returned in the result. Optional. The default is False.",
-                     "location":"query",
-                     "type":"boolean"
-                  },
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  },
-                  "updatedMin":{
-                     "description":"Lower bound for a task's last modification time (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by last modification time.",
-                     "location":"query",
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/tasks",
-               "response":{
-                  "$ref":"Tasks"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks",
-                  "https://www.googleapis.com/auth/tasks.readonly"
-               ]
-            },
-            "move":{
-               "description":"Moves the specified task to another position in the task list. This can include putting it as a child task under a new parent and/or move it to a different position among its sibling tasks.",
-               "httpMethod":"POST",
-               "id":"tasks.tasks.move",
-               "parameterOrder":[
-                  "tasklist",
-                  "task"
-               ],
-               "parameters":{
-                  "parent":{
-                     "description":"New parent task identifier. If the task is moved to the top level, this parameter is omitted. Optional.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "previous":{
-                     "description":"New previous sibling task identifier. If the task is moved to the first position among its siblings, this parameter is omitted. Optional.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "task":{
-                     "description":"Task identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  },
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/tasks/{task}/move",
-               "response":{
-                  "$ref":"Task"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "patch":{
-               "description":"Updates the specified task. This method supports patch semantics.",
-               "httpMethod":"PATCH",
-               "id":"tasks.tasks.patch",
-               "parameterOrder":[
-                  "tasklist",
-                  "task"
-               ],
-               "parameters":{
-                  "task":{
-                     "description":"Task identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  },
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/tasks/{task}",
-               "request":{
-                  "$ref":"Task"
-               },
-               "response":{
-                  "$ref":"Task"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "update":{
-               "description":"Updates the specified task.",
-               "httpMethod":"PUT",
-               "id":"tasks.tasks.update",
-               "parameterOrder":[
-                  "tasklist",
-                  "task"
-               ],
-               "parameters":{
-                  "task":{
-                     "description":"Task identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  },
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/tasks/{task}",
-               "request":{
-                  "$ref":"Task"
-               },
-               "response":{
-                  "$ref":"Task"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
+          },
+          "parameterOrder": [
+            "tasklist"
+          ],
+          "httpMethod": "DELETE",
+          "path": "users/@me/lists/{tasklist}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "get": {
+          "description": "Returns the authenticated user's specified task list.",
+          "response": {
+            "$ref": "TaskList"
+          },
+          "id": "tasks.tasklists.get",
+          "parameters": {
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
+            }
+          },
+          "parameterOrder": [
+            "tasklist"
+          ],
+          "httpMethod": "GET",
+          "path": "users/@me/lists/{tasklist}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks",
+            "https://www.googleapis.com/auth/tasks.readonly"
+          ]
+        },
+        "insert": {
+          "description": "Creates a new task list and adds it to the authenticated user's task lists.",
+          "response": {
+            "$ref": "TaskList"
+          },
+          "id": "tasks.tasklists.insert",
+          "httpMethod": "POST",
+          "request": {
+            "$ref": "TaskList"
+          },
+          "path": "users/@me/lists",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "list": {
+          "description": "Returns all the authenticated user's task lists.",
+          "response": {
+            "$ref": "TaskLists"
+          },
+          "id": "tasks.tasklists.list",
+          "parameters": {
+            "maxResults": {
+              "location": "query",
+              "type": "string",
+              "description": "Maximum number of task lists returned on one page. Optional. The default is 100.",
+              "format": "int64"
+            },
+            "pageToken": {
+              "location": "query",
+              "type": "string",
+              "description": "Token specifying the result page to return. Optional."
+            }
+          },
+          "httpMethod": "GET",
+          "path": "users/@me/lists",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks",
+            "https://www.googleapis.com/auth/tasks.readonly"
+          ]
+        },
+        "patch": {
+          "description": "Updates the authenticated user's specified task list. This method supports patch semantics.",
+          "response": {
+            "$ref": "TaskList"
+          },
+          "id": "tasks.tasklists.patch",
+          "parameters": {
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
             }
-         }
+          },
+          "parameterOrder": [
+            "tasklist"
+          ],
+          "httpMethod": "PATCH",
+          "request": {
+            "$ref": "TaskList"
+          },
+          "path": "users/@me/lists/{tasklist}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "update": {
+          "description": "Updates the authenticated user's specified task list.",
+          "response": {
+            "$ref": "TaskList"
+          },
+          "id": "tasks.tasklists.update",
+          "parameters": {
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
+            }
+          },
+          "parameterOrder": [
+            "tasklist"
+          ],
+          "httpMethod": "PUT",
+          "request": {
+            "$ref": "TaskList"
+          },
+          "path": "users/@me/lists/{tasklist}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        }
       }
-   },
-   "schemas":{
-      "Task":{
-         "id":"Task",
-         "properties":{
-            "completed":{
-               "description":"Completion date of the task (as a RFC 3339 timestamp). This field is omitted if the task has not been completed.",
-               "format":"date-time",
-               "type":"string"
-            },
-            "deleted":{
-               "description":"Flag indicating whether the task has been deleted. The default if False.",
-               "type":"boolean"
-            },
-            "due":{
-               "description":"Due date of the task (as a RFC 3339 timestamp). Optional.",
-               "format":"date-time",
-               "type":"string"
-            },
-            "etag":{
-               "description":"ETag of the resource.",
-               "type":"string"
-            },
-            "hidden":{
-               "description":"Flag indicating whether the task is hidden. This is the case if the task had been marked completed when the task list was last cleared. The default is False. This field is read-only.",
-               "type":"boolean"
-            },
-            "id":{
-               "description":"Task identifier.",
-               "type":"string"
-            },
-            "kind":{
-               "default":"tasks#task",
-               "description":"Type of the resource. This is always \"tasks#task\".",
-               "type":"string"
-            },
-            "links":{
-               "description":"Collection of links. This collection is read-only.",
-               "items":{
-                  "properties":{
-                     "description":{
-                        "description":"The description. In HTML speak: Everything between <a> and </a>.",
-                        "type":"string"
-                     },
-                     "link":{
-                        "description":"The URL.",
-                        "type":"string"
-                     },
-                     "type":{
-                        "description":"Type of the link, e.g. \"email\".",
-                        "type":"string"
-                     }
-                  },
-                  "type":"object"
-               },
-               "type":"array"
-            },
-            "notes":{
-               "description":"Notes describing the task. Optional.",
-               "type":"string"
-            },
-            "parent":{
-               "description":"Parent task identifier. This field is omitted if it is a top-level task. This field is read-only. Use the \"move\" method to move the task under a different parent or to the top level.",
-               "type":"string"
-            },
-            "position":{
-               "description":"String indicating the position of the task among its sibling tasks under the same parent task or at the top level. If this string is greater than another task's corresponding position string according to lexicographical ordering, the task is positioned after the other task under the same parent task (or at the top level). This field is read-only. Use the \"move\" method to move the task to another position.",
-               "type":"string"
-            },
-            "selfLink":{
-               "description":"URL pointing to this task. Used to retrieve, update, or delete this task.",
-               "type":"string"
-            },
-            "status":{
-               "description":"Status of the task. This is either \"needsAction\" or \"completed\".",
-               "type":"string"
-            },
-            "title":{
-               "description":"Title of the task.",
-               "type":"string"
-            },
-            "updated":{
-               "description":"Last modification time of the task (as a RFC 3339 timestamp).",
-               "format":"date-time",
-               "type":"string"
+    },
+    "tasks": {
+      "methods": {
+        "clear": {
+          "description": "Clears all completed tasks from the specified task list. The affected tasks will be marked as 'hidden' and no longer be returned by default when retrieving all tasks for a task list.",
+          "id": "tasks.tasks.clear",
+          "parameters": {
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
             }
-         },
-         "type":"object"
-      },
-      "TaskList":{
-         "id":"TaskList",
-         "properties":{
-            "etag":{
-               "description":"ETag of the resource.",
-               "type":"string"
-            },
-            "id":{
-               "description":"Task list identifier.",
-               "type":"string"
-            },
-            "kind":{
-               "default":"tasks#taskList",
-               "description":"Type of the resource. This is always \"tasks#taskList\".",
-               "type":"string"
-            },
-            "selfLink":{
-               "description":"URL pointing to this task list. Used to retrieve, update, or delete this task list.",
-               "type":"string"
-            },
-            "title":{
-               "description":"Title of the task list.",
-               "type":"string"
+          },
+          "parameterOrder": [
+            "tasklist"
+          ],
+          "httpMethod": "POST",
+          "path": "lists/{tasklist}/clear",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "delete": {
+          "description": "Deletes the specified task from the task list.",
+          "id": "tasks.tasks.delete",
+          "parameters": {
+            "task": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task identifier."
+            },
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
             }
-         },
-         "type":"object"
-      },
-      "TaskLists":{
-         "id":"TaskLists",
-         "properties":{
-            "etag":{
-               "description":"ETag of the resource.",
-               "type":"string"
-            },
-            "items":{
-               "description":"Collection of task lists.",
-               "items":{
-                  "$ref":"TaskList"
-               },
-               "type":"array"
-            },
-            "kind":{
-               "default":"tasks#taskLists",
-               "description":"Type of the resource. This is always \"tasks#taskLists\".",
-               "type":"string"
-            },
-            "nextPageToken":{
-               "description":"Token that can be used to request the next page of this result.",
-               "type":"string"
+          },
+          "parameterOrder": [
+            "tasklist",
+            "task"
+          ],
+          "httpMethod": "DELETE",
+          "path": "lists/{tasklist}/tasks/{task}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "get": {
+          "description": "Returns the specified task.",
+          "response": {
+            "$ref": "Task"
+          },
+          "id": "tasks.tasks.get",
+          "parameters": {
+            "task": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task identifier."
+            },
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
             }
-         },
-         "type":"object"
-      },
-      "Tasks":{
-         "id":"Tasks",
-         "properties":{
-            "etag":{
-               "description":"ETag of the resource.",
-               "type":"string"
-            },
-            "items":{
-               "description":"Collection of tasks.",
-               "items":{
-                  "$ref":"Task"
-               },
-               "type":"array"
-            },
-            "kind":{
-               "default":"tasks#tasks",
-               "description":"Type of the resource. This is always \"tasks#tasks\".",
-               "type":"string"
-            },
-            "nextPageToken":{
-               "description":"Token used to access the next page of this result.",
-               "type":"string"
+          },
+          "parameterOrder": [
+            "tasklist",
+            "task"
+          ],
+          "httpMethod": "GET",
+          "path": "lists/{tasklist}/tasks/{task}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks",
+            "https://www.googleapis.com/auth/tasks.readonly"
+          ]
+        },
+        "insert": {
+          "description": "Creates a new task on the specified task list.",
+          "response": {
+            "$ref": "Task"
+          },
+          "id": "tasks.tasks.insert",
+          "parameters": {
+            "parent": {
+              "location": "query",
+              "type": "string",
+              "description": "Parent task identifier. If the task is created at the top level, this parameter is omitted. Optional."
+            },
+            "previous": {
+              "location": "query",
+              "type": "string",
+              "description": "Previous sibling task identifier. If the task is created at the first position among its siblings, this parameter is omitted. Optional."
+            },
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
+            }
+          },
+          "parameterOrder": [
+            "tasklist"
+          ],
+          "httpMethod": "POST",
+          "request": {
+            "$ref": "Task"
+          },
+          "path": "lists/{tasklist}/tasks",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "list": {
+          "description": "Returns all tasks in the specified task list.",
+          "response": {
+            "$ref": "Tasks"
+          },
+          "id": "tasks.tasks.list",
+          "parameters": {
+            "completedMax": {
+              "location": "query",
+              "type": "string",
+              "description": "Upper bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by completion date."
+            },
+            "completedMin": {
+              "location": "query",
+              "type": "string",
+              "description": "Lower bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by completion date."
+            },
+            "dueMax": {
+              "location": "query",
+              "type": "string",
+              "description": "Upper bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by due date."
+            },
+            "dueMin": {
+              "location": "query",
+              "type": "string",
+              "description": "Lower bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by due date."
+            },
+            "maxResults": {
+              "location": "query",
+              "type": "string",
+              "description": "Maximum number of task lists returned on one page. Optional. The default is 100.",
+              "format": "int64"
+            },
+            "pageToken": {
+              "location": "query",
+              "type": "string",
+              "description": "Token specifying the result page to return. Optional."
+            },
+            "showCompleted": {
+              "location": "query",
+              "type": "boolean",
+              "description": "Flag indicating whether completed tasks are returned in the result. Optional. The default is True."
+            },
+            "showDeleted": {
+              "location": "query",
+              "type": "boolean",
+              "description": "Flag indicating whether deleted tasks are returned in the result. Optional. The default is False."
+            },
+            "showHidden": {
+              "location": "query",
+              "type": "boolean",
+              "description": "Flag indicating whether hidden tasks are returned in the result. Optional. The default is False."
+            },
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
+            },
+            "updatedMin": {
+              "location": "query",
+              "type": "string",
+              "description": "Lower bound for a task's last modification time (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by last modification time."
+            }
+          },
+          "parameterOrder": [
+            "tasklist"
+          ],
+          "httpMethod": "GET",
+          "path": "lists/{tasklist}/tasks",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks",
+            "https://www.googleapis.com/auth/tasks.readonly"
+          ]
+        },
+        "move": {
+          "description": "Moves the specified task to another position in the task list. This can include putting it as a child task under a new parent and/or move it to a different position among its sibling tasks.",
+          "response": {
+            "$ref": "Task"
+          },
+          "id": "tasks.tasks.move",
+          "parameters": {
+            "parent": {
+              "location": "query",
+              "type": "string",
+              "description": "New parent task identifier. If the task is moved to the top level, this parameter is omitted. Optional."
+            },
+            "previous": {
+              "location": "query",
+              "type": "string",
+              "description": "New previous sibling task identifier. If the task is moved to the first position among its siblings, this parameter is omitted. Optional."
+            },
+            "task": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task identifier."
+            },
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
+            }
+          },
+          "parameterOrder": [
+            "tasklist",
+            "task"
+          ],
+          "httpMethod": "POST",
+          "path": "lists/{tasklist}/tasks/{task}/move",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "patch": {
+          "description": "Updates the specified task. This method supports patch semantics.",
+          "response": {
+            "$ref": "Task"
+          },
+          "id": "tasks.tasks.patch",
+          "parameters": {
+            "task": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task identifier."
+            },
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
             }
-         },
-         "type":"object"
+          },
+          "parameterOrder": [
+            "tasklist",
+            "task"
+          ],
+          "httpMethod": "PATCH",
+          "request": {
+            "$ref": "Task"
+          },
+          "path": "lists/{tasklist}/tasks/{task}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "update": {
+          "description": "Updates the specified task.",
+          "response": {
+            "$ref": "Task"
+          },
+          "id": "tasks.tasks.update",
+          "parameters": {
+            "task": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task identifier."
+            },
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
+            }
+          },
+          "parameterOrder": [
+            "tasklist",
+            "task"
+          ],
+          "httpMethod": "PUT",
+          "request": {
+            "$ref": "Task"
+          },
+          "path": "lists/{tasklist}/tasks/{task}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        }
+      }
+    }
+  },
+  "basePath": "/tasks/v1/",
+  "icons": {
+    "x16": "http://www.google.com/images/icons/product/tasks-16.png",
+    "x32": "http://www.google.com/images/icons/product/tasks-32.png"
+  },
+  "schemas": {
+    "Task": {
+      "type": "object",
+      "id": "Task",
+      "properties": {
+        "completed": {
+          "type": "string",
+          "description": "Completion date of the task (as a RFC 3339 timestamp). This field is omitted if the task has not been completed.",
+          "format": "date-time"
+        },
+        "deleted": {
+          "type": "boolean",
+          "description": "Flag indicating whether the task has been deleted. The default if False."
+        },
+        "due": {
+          "type": "string",
+          "description": "Due date of the task (as a RFC 3339 timestamp). Optional.",
+          "format": "date-time"
+        },
+        "etag": {
+          "type": "string",
+          "description": "ETag of the resource."
+        },
+        "hidden": {
+          "type": "boolean",
+          "description": "Flag indicating whether the task is hidden. This is the case if the task had been marked completed when the task list was last cleared. The default is False. This field is read-only."
+        },
+        "id": {
+          "type": "string",
+          "description": "Task identifier."
+        },
+        "kind": {
+          "type": "string",
+          "default": "tasks#task",
+          "description": "Type of the resource. This is always \"tasks#task\"."
+        },
+        "links": {
+          "items": {
+            "type": "object",
+            "properties": {
+              "description": {
+                "type": "string",
+                "description": "The description. In HTML speak: Everything between <a> and </a>."
+              },
+              "link": {
+                "type": "string",
+                "description": "The URL."
+              },
+              "type": {
+                "type": "string",
+                "description": "Type of the link, e.g. \"email\"."
+              }
+            }
+          },
+          "type": "array",
+          "description": "Collection of links. This collection is read-only."
+        },
+        "notes": {
+          "type": "string",
+          "description": "Notes describing the task. Optional."
+        },
+        "parent": {
+          "type": "string",
+          "description": "Parent task identifier. This field is omitted if it is a top-level task. This field is read-only. Use the \"move\" method to move the task under a different parent or to the top level."
+        },
+        "position": {
+          "type": "string",
+          "description": "String indicating the position of the task among its sibling tasks under the same parent task or at the top level. If this string is greater than another task's corresponding position string according to lexicographical ordering, the task is positioned after the other task under the same parent task (or at the top level). This field is read-only. Use the \"move\" method to move the task to another position."
+        },
+        "selfLink": {
+          "type": "string",
+          "description": "URL pointing to this task. Used to retrieve, update, or delete this task."
+        },
+        "status": {
+          "type": "string",
+          "description": "Status of the task. This is either \"needsAction\" or \"completed\"."
+        },
+        "title": {
+          "type": "string",
+          "description": "Title of the task."
+        },
+        "updated": {
+          "type": "string",
+          "description": "Last modification time of the task (as a RFC 3339 timestamp).",
+          "format": "date-time"
+        }
+      }
+    },
+    "TaskList": {
+      "type": "object",
+      "id": "TaskList",
+      "properties": {
+        "etag": {
+          "type": "string",
+          "description": "ETag of the resource."
+        },
+        "id": {
+          "type": "string",
+          "description": "Task list identifier."
+        },
+        "kind": {
+          "type": "string",
+          "default": "tasks#taskList",
+          "description": "Type of the resource. This is always \"tasks#taskList\"."
+        },
+        "selfLink": {
+          "type": "string",
+          "description": "URL pointing to this task list. Used to retrieve, update, or delete this task list."
+        },
+        "title": {
+          "type": "string",
+          "description": "Title of the task list."
+        }
+      }
+    },
+    "TaskLists": {
+      "type": "object",
+      "id": "TaskLists",
+      "properties": {
+        "etag": {
+          "type": "string",
+          "description": "ETag of the resource."
+        },
+        "items": {
+          "items": {
+            "$ref": "TaskList"
+          },
+          "type": "array",
+          "description": "Collection of task lists."
+        },
+        "kind": {
+          "type": "string",
+          "default": "tasks#taskLists",
+          "description": "Type of the resource. This is always \"tasks#taskLists\"."
+        },
+        "nextPageToken": {
+          "type": "string",
+          "description": "Token that can be used to request the next page of this result."
+        }
+      }
+    },
+    "Tasks": {
+      "type": "object",
+      "id": "Tasks",
+      "properties": {
+        "etag": {
+          "type": "string",
+          "description": "ETag of the resource."
+        },
+        "items": {
+          "items": {
+            "$ref": "Task"
+          },
+          "type": "array",
+          "description": "Collection of tasks."
+        },
+        "kind": {
+          "type": "string",
+          "default": "tasks#tasks",
+          "description": "Type of the resource. This is always \"tasks#tasks\"."
+        },
+        "nextPageToken": {
+          "type": "string",
+          "description": "Token used to access the next page of this result."
+        }
       }
-   },
-   "title":"Tasks API",
-   "version":"v1"
+    }
+  },
+  "description": "Lets you manage your tasks and task lists.",
+  "labels": [
+    "labs"
+  ],
+  "version": "v1",
+  "kind": "discovery#restDescription",
+  "title": "Tasks API",
+  "parameters": {
+    "alt": {
+      "location": "query",
+      "enum": [
+        "json"
+      ],
+      "type": "string",
+      "default": "json",
+      "description": "Data format for the response.",
+      "enumDescriptions": [
+        "Responses with Content-Type of application/json"
+      ]
+    },
+    "fields": {
+      "location": "query",
+      "type": "string",
+      "description": "Selector specifying which fields to include in a partial response."
+    },
+    "key": {
+      "location": "query",
+      "type": "string",
+      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
+    },
+    "oauth_token": {
+      "location": "query",
+      "type": "string",
+      "description": "OAuth 2.0 token for the current user."
+    },
+    "prettyPrint": {
+      "location": "query",
+      "type": "boolean",
+      "default": "true",
+      "description": "Returns response with indentations and line breaks."
+    },
+    "quotaUser": {
+      "location": "query",
+      "type": "string",
+      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided."
+    },
+    "userIp": {
+      "location": "query",
+      "type": "string",
+      "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits."
+    }
+  },
+  "id": "tasks:v1",
+  "protocol": "rest"
 }
diff --git a/src/test/test_data/test_tasks_rest_service.json b/src/test/test_data/test_tasks_rest_service.json
index 780a0fd9..388dc417 100644
--- a/src/test/test_data/test_tasks_rest_service.json
+++ b/src/test/test_data/test_tasks_rest_service.json
@@ -1,685 +1,685 @@
 {
-   "auth":{
-      "oauth2":{
-         "scopes":{
-            "https://www.googleapis.com/auth/tasks":{
-               "description":"Manage your tasks"
-            },
-            "https://www.googleapis.com/auth/tasks.readonly":{
-               "description":"View your tasks"
-            }
-         }
+  "auth": {
+    "oauth2": {
+      "scopes": {
+        "https://www.googleapis.com/auth/tasks": {
+          "description": "Manage your tasks"
+        },
+        "https://www.googleapis.com/auth/tasks.readonly": {
+          "description": "View your tasks"
+        }
       }
-   },
-   "basePath":"/tasks/v1/",
-   "description":"Lets you manage your tasks and task lists.",
-   "documentationLink":"http://code.google.com/apis/tasks/v1/using.html",
-   "icons":{
-      "x16":"http://www.google.com/images/icons/product/tasks-16.png",
-      "x32":"http://www.google.com/images/icons/product/tasks-32.png"
-   },
-   "id":"tasks:v1",
-   "kind":"discovery#restDescription",
-   "labels":[
-      "labs"
-   ],
-   "name":"tasks",
-   "parameters":{
-      "alt":{
-         "default":"json",
-         "description":"Data format for the response.",
-         "enum":[
-            "json"
-         ],
-         "enumDescriptions":[
-            "Responses with Content-Type of application/json"
-         ],
-         "location":"query",
-         "type":"string"
-      },
-      "fields":{
-         "description":"Selector specifying which fields to include in a partial response.",
-         "location":"query",
-         "type":"string"
-      },
-      "key":{
-         "description":"API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
-         "location":"query",
-         "type":"string"
-      },
-      "oauth_token":{
-         "description":"OAuth 2.0 token for the current user.",
-         "location":"query",
-         "type":"string"
-      },
-      "prettyPrint":{
-         "default":"true",
-         "description":"Returns response with indentations and line breaks.",
-         "location":"query",
-         "type":"boolean"
-      },
-      "quotaUser":{
-         "description":"Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided.",
-         "location":"query",
-         "type":"string"
-      },
-      "userIp":{
-         "description":"IP address of the site where the request originates. Use this if you want to enforce per-user limits.",
-         "location":"query",
-         "type":"string"
-      }
-   },
-   "protocol":"rest",
-   "resources":{
-      "tasklists":{
-         "methods":{
-            "delete":{
-               "description":"Deletes the authenticated user's specified task list.",
-               "httpMethod":"DELETE",
-               "id":"tasks.tasklists.delete",
-               "parameterOrder":[
-                  "tasklist"
-               ],
-               "parameters":{
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"users/@me/lists/{tasklist}",
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "get":{
-               "description":"Returns the authenticated user's specified task list.",
-               "httpMethod":"GET",
-               "id":"tasks.tasklists.get",
-               "parameterOrder":[
-                  "tasklist"
-               ],
-               "parameters":{
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"users/@me/lists/{tasklist}",
-               "response":{
-                  "$ref":"TaskList"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks",
-                  "https://www.googleapis.com/auth/tasks.readonly"
-               ]
-            },
-            "insert":{
-               "description":"Creates a new task list and adds it to the authenticated user's task lists.",
-               "httpMethod":"POST",
-               "id":"tasks.tasklists.insert",
-               "path":"users/@me/lists",
-               "request":{
-                  "$ref":"TaskList"
-               },
-               "response":{
-                  "$ref":"TaskList"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "list":{
-               "description":"Returns all the authenticated user's task lists.",
-               "httpMethod":"GET",
-               "id":"tasks.tasklists.list",
-               "parameters":{
-                  "maxResults":{
-                     "description":"Maximum number of task lists returned on one page. Optional. The default is 100.",
-                     "format":"int64",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "pageToken":{
-                     "description":"Token specifying the result page to return. Optional.",
-                     "location":"query",
-                     "type":"string"
-                  }
-               },
-               "path":"users/@me/lists",
-               "response":{
-                  "$ref":"TaskLists"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks",
-                  "https://www.googleapis.com/auth/tasks.readonly"
-               ]
-            },
-            "patch":{
-               "description":"Updates the authenticated user's specified task list. This method supports patch semantics.",
-               "httpMethod":"PATCH",
-               "id":"tasks.tasklists.patch",
-               "parameterOrder":[
-                  "tasklist"
-               ],
-               "parameters":{
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"users/@me/lists/{tasklist}",
-               "request":{
-                  "$ref":"TaskList"
-               },
-               "response":{
-                  "$ref":"TaskList"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "update":{
-               "description":"Updates the authenticated user's specified task list.",
-               "httpMethod":"PUT",
-               "id":"tasks.tasklists.update",
-               "parameterOrder":[
-                  "tasklist"
-               ],
-               "parameters":{
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"users/@me/lists/{tasklist}",
-               "request":{
-                  "$ref":"TaskList"
-               },
-               "response":{
-                  "$ref":"TaskList"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
+    }
+  },
+  "documentationLink": "http://code.google.com/apis/tasks/v1/using.html",
+  "name": "tasks",
+  "resources": {
+    "tasklists": {
+      "methods": {
+        "delete": {
+          "description": "Deletes the authenticated user's specified task list.",
+          "id": "tasks.tasklists.delete",
+          "parameters": {
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
             }
-         }
-      },
-      "tasks":{
-         "methods":{
-            "clear":{
-               "description":"Clears all completed tasks from the specified task list. The affected tasks will be marked as 'hidden' and no longer be returned by default when retrieving all tasks for a task list.",
-               "httpMethod":"POST",
-               "id":"tasks.tasks.clear",
-               "parameterOrder":[
-                  "tasklist"
-               ],
-               "parameters":{
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/clear",
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "delete":{
-               "description":"Deletes the specified task from the task list.",
-               "httpMethod":"DELETE",
-               "id":"tasks.tasks.delete",
-               "parameterOrder":[
-                  "tasklist",
-                  "task"
-               ],
-               "parameters":{
-                  "task":{
-                     "description":"Task identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  },
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/tasks/{task}",
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "get":{
-               "description":"Returns the specified task.",
-               "httpMethod":"GET",
-               "id":"tasks.tasks.get",
-               "parameterOrder":[
-                  "tasklist",
-                  "task"
-               ],
-               "parameters":{
-                  "task":{
-                     "description":"Task identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  },
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/tasks/{task}",
-               "response":{
-                  "$ref":"Task"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks",
-                  "https://www.googleapis.com/auth/tasks.readonly"
-               ]
-            },
-            "insert":{
-               "description":"Creates a new task on the specified task list.",
-               "httpMethod":"POST",
-               "id":"tasks.tasks.insert",
-               "parameterOrder":[
-                  "tasklist"
-               ],
-               "parameters":{
-                  "parent":{
-                     "description":"Parent task identifier. If the task is created at the top level, this parameter is omitted. Optional.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "previous":{
-                     "description":"Previous sibling task identifier. If the task is created at the first position among its siblings, this parameter is omitted. Optional.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/tasks",
-               "request":{
-                  "$ref":"Task"
-               },
-               "response":{
-                  "$ref":"Task"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "list":{
-               "description":"Returns all tasks in the specified task list.",
-               "httpMethod":"GET",
-               "id":"tasks.tasks.list",
-               "parameterOrder":[
-                  "tasklist"
-               ],
-               "parameters":{
-                  "completedMax":{
-                     "description":"Upper bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by completion date.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "completedMin":{
-                     "description":"Lower bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by completion date.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "dueMax":{
-                     "description":"Upper bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by due date.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "dueMin":{
-                     "description":"Lower bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by due date.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "maxResults":{
-                     "description":"Maximum number of task lists returned on one page. Optional. The default is 100.",
-                     "format":"int64",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "pageToken":{
-                     "description":"Token specifying the result page to return. Optional.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "showCompleted":{
-                     "description":"Flag indicating whether completed tasks are returned in the result. Optional. The default is True.",
-                     "location":"query",
-                     "type":"boolean"
-                  },
-                  "showDeleted":{
-                     "description":"Flag indicating whether deleted tasks are returned in the result. Optional. The default is False.",
-                     "location":"query",
-                     "type":"boolean"
-                  },
-                  "showHidden":{
-                     "description":"Flag indicating whether hidden tasks are returned in the result. Optional. The default is False.",
-                     "location":"query",
-                     "type":"boolean"
-                  },
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  },
-                  "updatedMin":{
-                     "description":"Lower bound for a task's last modification time (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by last modification time.",
-                     "location":"query",
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/tasks",
-               "response":{
-                  "$ref":"Tasks"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks",
-                  "https://www.googleapis.com/auth/tasks.readonly"
-               ]
-            },
-            "move":{
-               "description":"Moves the specified task to another position in the task list. This can include putting it as a child task under a new parent and/or move it to a different position among its sibling tasks.",
-               "httpMethod":"POST",
-               "id":"tasks.tasks.move",
-               "parameterOrder":[
-                  "tasklist",
-                  "task"
-               ],
-               "parameters":{
-                  "parent":{
-                     "description":"New parent task identifier. If the task is moved to the top level, this parameter is omitted. Optional.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "previous":{
-                     "description":"New previous sibling task identifier. If the task is moved to the first position among its siblings, this parameter is omitted. Optional.",
-                     "location":"query",
-                     "type":"string"
-                  },
-                  "task":{
-                     "description":"Task identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  },
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/tasks/{task}/move",
-               "response":{
-                  "$ref":"Task"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "patch":{
-               "description":"Updates the specified task. This method supports patch semantics.",
-               "httpMethod":"PATCH",
-               "id":"tasks.tasks.patch",
-               "parameterOrder":[
-                  "tasklist",
-                  "task"
-               ],
-               "parameters":{
-                  "task":{
-                     "description":"Task identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  },
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/tasks/{task}",
-               "request":{
-                  "$ref":"Task"
-               },
-               "response":{
-                  "$ref":"Task"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
-            },
-            "update":{
-               "description":"Updates the specified task.",
-               "httpMethod":"PUT",
-               "id":"tasks.tasks.update",
-               "parameterOrder":[
-                  "tasklist",
-                  "task"
-               ],
-               "parameters":{
-                  "task":{
-                     "description":"Task identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  },
-                  "tasklist":{
-                     "description":"Task list identifier.",
-                     "location":"path",
-                     "required":true,
-                     "type":"string"
-                  }
-               },
-               "path":"lists/{tasklist}/tasks/{task}",
-               "request":{
-                  "$ref":"Task"
-               },
-               "response":{
-                  "$ref":"Task"
-               },
-               "scopes":[
-                  "https://www.googleapis.com/auth/tasks"
-               ]
+          },
+          "parameterOrder": [
+            "tasklist"
+          ],
+          "httpMethod": "DELETE",
+          "path": "users/@me/lists/{tasklist}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "get": {
+          "description": "Returns the authenticated user's specified task list.",
+          "response": {
+            "$ref": "TaskList"
+          },
+          "id": "tasks.tasklists.get",
+          "parameters": {
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
+            }
+          },
+          "parameterOrder": [
+            "tasklist"
+          ],
+          "httpMethod": "GET",
+          "path": "users/@me/lists/{tasklist}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks",
+            "https://www.googleapis.com/auth/tasks.readonly"
+          ]
+        },
+        "insert": {
+          "description": "Creates a new task list and adds it to the authenticated user's task lists.",
+          "response": {
+            "$ref": "TaskList"
+          },
+          "id": "tasks.tasklists.insert",
+          "httpMethod": "POST",
+          "request": {
+            "$ref": "TaskList"
+          },
+          "path": "users/@me/lists",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "list": {
+          "description": "Returns all the authenticated user's task lists.",
+          "response": {
+            "$ref": "TaskLists"
+          },
+          "id": "tasks.tasklists.list",
+          "parameters": {
+            "maxResults": {
+              "location": "query",
+              "type": "string",
+              "description": "Maximum number of task lists returned on one page. Optional. The default is 100.",
+              "format": "int64"
+            },
+            "pageToken": {
+              "location": "query",
+              "type": "string",
+              "description": "Token specifying the result page to return. Optional."
+            }
+          },
+          "httpMethod": "GET",
+          "path": "users/@me/lists",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks",
+            "https://www.googleapis.com/auth/tasks.readonly"
+          ]
+        },
+        "patch": {
+          "description": "Updates the authenticated user's specified task list. This method supports patch semantics.",
+          "response": {
+            "$ref": "TaskList"
+          },
+          "id": "tasks.tasklists.patch",
+          "parameters": {
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
             }
-         }
+          },
+          "parameterOrder": [
+            "tasklist"
+          ],
+          "httpMethod": "PATCH",
+          "request": {
+            "$ref": "TaskList"
+          },
+          "path": "users/@me/lists/{tasklist}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "update": {
+          "description": "Updates the authenticated user's specified task list.",
+          "response": {
+            "$ref": "TaskList"
+          },
+          "id": "tasks.tasklists.update",
+          "parameters": {
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
+            }
+          },
+          "parameterOrder": [
+            "tasklist"
+          ],
+          "httpMethod": "PUT",
+          "request": {
+            "$ref": "TaskList"
+          },
+          "path": "users/@me/lists/{tasklist}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        }
       }
-   },
-   "schemas":{
-      "Task":{
-         "id":"Task",
-         "properties":{
-            "completed":{
-               "description":"Completion date of the task (as a RFC 3339 timestamp). This field is omitted if the task has not been completed.",
-               "format":"date-time",
-               "type":"string"
-            },
-            "deleted":{
-               "description":"Flag indicating whether the task has been deleted. The default if False.",
-               "type":"boolean"
-            },
-            "due":{
-               "description":"Due date of the task (as a RFC 3339 timestamp). Optional.",
-               "format":"date-time",
-               "type":"string"
-            },
-            "etag":{
-               "description":"ETag of the resource.",
-               "type":"string"
-            },
-            "hidden":{
-               "description":"Flag indicating whether the task is hidden. This is the case if the task had been marked completed when the task list was last cleared. The default is False. This field is read-only.",
-               "type":"boolean"
-            },
-            "id":{
-               "description":"Task identifier.",
-               "type":"string"
-            },
-            "kind":{
-               "default":"tasks#task",
-               "description":"Type of the resource. This is always \"tasks#task\".",
-               "type":"string"
-            },
-            "links":{
-               "description":"Collection of links. This collection is read-only.",
-               "items":{
-                  "properties":{
-                     "description":{
-                        "description":"The description. In HTML speak: Everything between <a> and </a>.",
-                        "type":"string"
-                     },
-                     "link":{
-                        "description":"The URL.",
-                        "type":"string"
-                     },
-                     "type":{
-                        "description":"Type of the link, e.g. \"email\".",
-                        "type":"string"
-                     }
-                  },
-                  "type":"object"
-               },
-               "type":"array"
-            },
-            "notes":{
-               "description":"Notes describing the task. Optional.",
-               "type":"string"
-            },
-            "parent":{
-               "description":"Parent task identifier. This field is omitted if it is a top-level task. This field is read-only. Use the \"move\" method to move the task under a different parent or to the top level.",
-               "type":"string"
-            },
-            "position":{
-               "description":"String indicating the position of the task among its sibling tasks under the same parent task or at the top level. If this string is greater than another task's corresponding position string according to lexicographical ordering, the task is positioned after the other task under the same parent task (or at the top level). This field is read-only. Use the \"move\" method to move the task to another position.",
-               "type":"string"
-            },
-            "selfLink":{
-               "description":"URL pointing to this task. Used to retrieve, update, or delete this task.",
-               "type":"string"
-            },
-            "status":{
-               "description":"Status of the task. This is either \"needsAction\" or \"completed\".",
-               "type":"string"
-            },
-            "title":{
-               "description":"Title of the task.",
-               "type":"string"
-            },
-            "updated":{
-               "description":"Last modification time of the task (as a RFC 3339 timestamp).",
-               "format":"date-time",
-               "type":"string"
+    },
+    "tasks": {
+      "methods": {
+        "clear": {
+          "description": "Clears all completed tasks from the specified task list. The affected tasks will be marked as 'hidden' and no longer be returned by default when retrieving all tasks for a task list.",
+          "id": "tasks.tasks.clear",
+          "parameters": {
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
             }
-         },
-         "type":"object"
-      },
-      "TaskList":{
-         "id":"TaskList",
-         "properties":{
-            "etag":{
-               "description":"ETag of the resource.",
-               "type":"string"
-            },
-            "id":{
-               "description":"Task list identifier.",
-               "type":"string"
-            },
-            "kind":{
-               "default":"tasks#taskList",
-               "description":"Type of the resource. This is always \"tasks#taskList\".",
-               "type":"string"
-            },
-            "selfLink":{
-               "description":"URL pointing to this task list. Used to retrieve, update, or delete this task list.",
-               "type":"string"
-            },
-            "title":{
-               "description":"Title of the task list.",
-               "type":"string"
+          },
+          "parameterOrder": [
+            "tasklist"
+          ],
+          "httpMethod": "POST",
+          "path": "lists/{tasklist}/clear",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "delete": {
+          "description": "Deletes the specified task from the task list.",
+          "id": "tasks.tasks.delete",
+          "parameters": {
+            "task": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task identifier."
+            },
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
             }
-         },
-         "type":"object"
-      },
-      "TaskLists":{
-         "id":"TaskLists",
-         "properties":{
-            "etag":{
-               "description":"ETag of the resource.",
-               "type":"string"
-            },
-            "items":{
-               "description":"Collection of task lists.",
-               "items":{
-                  "$ref":"TaskList"
-               },
-               "type":"array"
-            },
-            "kind":{
-               "default":"tasks#taskLists",
-               "description":"Type of the resource. This is always \"tasks#taskLists\".",
-               "type":"string"
-            },
-            "nextPageToken":{
-               "description":"Token that can be used to request the next page of this result.",
-               "type":"string"
+          },
+          "parameterOrder": [
+            "tasklist",
+            "task"
+          ],
+          "httpMethod": "DELETE",
+          "path": "lists/{tasklist}/tasks/{task}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "get": {
+          "description": "Returns the specified task.",
+          "response": {
+            "$ref": "Task"
+          },
+          "id": "tasks.tasks.get",
+          "parameters": {
+            "task": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task identifier."
+            },
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
             }
-         },
-         "type":"object"
-      },
-      "Tasks":{
-         "id":"Tasks",
-         "properties":{
-            "etag":{
-               "description":"ETag of the resource.",
-               "type":"string"
-            },
-            "items":{
-               "description":"Collection of tasks.",
-               "items":{
-                  "$ref":"Task"
-               },
-               "type":"array"
-            },
-            "kind":{
-               "default":"tasks#tasks",
-               "description":"Type of the resource. This is always \"tasks#tasks\".",
-               "type":"string"
-            },
-            "nextPageToken":{
-               "description":"Token used to access the next page of this result.",
-               "type":"string"
+          },
+          "parameterOrder": [
+            "tasklist",
+            "task"
+          ],
+          "httpMethod": "GET",
+          "path": "lists/{tasklist}/tasks/{task}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks",
+            "https://www.googleapis.com/auth/tasks.readonly"
+          ]
+        },
+        "insert": {
+          "description": "Creates a new task on the specified task list.",
+          "response": {
+            "$ref": "Task"
+          },
+          "id": "tasks.tasks.insert",
+          "parameters": {
+            "parent": {
+              "location": "query",
+              "type": "string",
+              "description": "Parent task identifier. If the task is created at the top level, this parameter is omitted. Optional."
+            },
+            "previous": {
+              "location": "query",
+              "type": "string",
+              "description": "Previous sibling task identifier. If the task is created at the first position among its siblings, this parameter is omitted. Optional."
+            },
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
+            }
+          },
+          "parameterOrder": [
+            "tasklist"
+          ],
+          "httpMethod": "POST",
+          "request": {
+            "$ref": "Task"
+          },
+          "path": "lists/{tasklist}/tasks",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "list": {
+          "description": "Returns all tasks in the specified task list.",
+          "response": {
+            "$ref": "Tasks"
+          },
+          "id": "tasks.tasks.list",
+          "parameters": {
+            "completedMax": {
+              "location": "query",
+              "type": "string",
+              "description": "Upper bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by completion date."
+            },
+            "completedMin": {
+              "location": "query",
+              "type": "string",
+              "description": "Lower bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by completion date."
+            },
+            "dueMax": {
+              "location": "query",
+              "type": "string",
+              "description": "Upper bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by due date."
+            },
+            "dueMin": {
+              "location": "query",
+              "type": "string",
+              "description": "Lower bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by due date."
+            },
+            "maxResults": {
+              "location": "query",
+              "type": "string",
+              "description": "Maximum number of task lists returned on one page. Optional. The default is 100.",
+              "format": "int64"
+            },
+            "pageToken": {
+              "location": "query",
+              "type": "string",
+              "description": "Token specifying the result page to return. Optional."
+            },
+            "showCompleted": {
+              "location": "query",
+              "type": "boolean",
+              "description": "Flag indicating whether completed tasks are returned in the result. Optional. The default is True."
+            },
+            "showDeleted": {
+              "location": "query",
+              "type": "boolean",
+              "description": "Flag indicating whether deleted tasks are returned in the result. Optional. The default is False."
+            },
+            "showHidden": {
+              "location": "query",
+              "type": "boolean",
+              "description": "Flag indicating whether hidden tasks are returned in the result. Optional. The default is False."
+            },
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
+            },
+            "updatedMin": {
+              "location": "query",
+              "type": "string",
+              "description": "Lower bound for a task's last modification time (as a RFC 3339 timestamp) to filter by. Optional. The default is not to filter by last modification time."
+            }
+          },
+          "parameterOrder": [
+            "tasklist"
+          ],
+          "httpMethod": "GET",
+          "path": "lists/{tasklist}/tasks",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks",
+            "https://www.googleapis.com/auth/tasks.readonly"
+          ]
+        },
+        "move": {
+          "description": "Moves the specified task to another position in the task list. This can include putting it as a child task under a new parent and/or move it to a different position among its sibling tasks.",
+          "response": {
+            "$ref": "Task"
+          },
+          "id": "tasks.tasks.move",
+          "parameters": {
+            "parent": {
+              "location": "query",
+              "type": "string",
+              "description": "New parent task identifier. If the task is moved to the top level, this parameter is omitted. Optional."
+            },
+            "previous": {
+              "location": "query",
+              "type": "string",
+              "description": "New previous sibling task identifier. If the task is moved to the first position among its siblings, this parameter is omitted. Optional."
+            },
+            "task": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task identifier."
+            },
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
+            }
+          },
+          "parameterOrder": [
+            "tasklist",
+            "task"
+          ],
+          "httpMethod": "POST",
+          "path": "lists/{tasklist}/tasks/{task}/move",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "patch": {
+          "description": "Updates the specified task. This method supports patch semantics.",
+          "response": {
+            "$ref": "Task"
+          },
+          "id": "tasks.tasks.patch",
+          "parameters": {
+            "task": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task identifier."
+            },
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
             }
-         },
-         "type":"object"
+          },
+          "parameterOrder": [
+            "tasklist",
+            "task"
+          ],
+          "httpMethod": "PATCH",
+          "request": {
+            "$ref": "Task"
+          },
+          "path": "lists/{tasklist}/tasks/{task}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        },
+        "update": {
+          "description": "Updates the specified task.",
+          "response": {
+            "$ref": "Task"
+          },
+          "id": "tasks.tasks.update",
+          "parameters": {
+            "task": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task identifier."
+            },
+            "tasklist": {
+              "location": "path",
+              "type": "string",
+              "required": true,
+              "description": "Task list identifier."
+            }
+          },
+          "parameterOrder": [
+            "tasklist",
+            "task"
+          ],
+          "httpMethod": "PUT",
+          "request": {
+            "$ref": "Task"
+          },
+          "path": "lists/{tasklist}/tasks/{task}",
+          "scopes": [
+            "https://www.googleapis.com/auth/tasks"
+          ]
+        }
+      }
+    }
+  },
+  "basePath": "/tasks/v1/",
+  "icons": {
+    "x16": "http://www.google.com/images/icons/product/tasks-16.png",
+    "x32": "http://www.google.com/images/icons/product/tasks-32.png"
+  },
+  "schemas": {
+    "Task": {
+      "type": "object",
+      "id": "Task",
+      "properties": {
+        "completed": {
+          "type": "string",
+          "description": "Completion date of the task (as a RFC 3339 timestamp). This field is omitted if the task has not been completed.",
+          "format": "date-time"
+        },
+        "deleted": {
+          "type": "boolean",
+          "description": "Flag indicating whether the task has been deleted. The default if False."
+        },
+        "due": {
+          "type": "string",
+          "description": "Due date of the task (as a RFC 3339 timestamp). Optional.",
+          "format": "date-time"
+        },
+        "etag": {
+          "type": "string",
+          "description": "ETag of the resource."
+        },
+        "hidden": {
+          "type": "boolean",
+          "description": "Flag indicating whether the task is hidden. This is the case if the task had been marked completed when the task list was last cleared. The default is False. This field is read-only."
+        },
+        "id": {
+          "type": "string",
+          "description": "Task identifier."
+        },
+        "kind": {
+          "type": "string",
+          "default": "tasks#task",
+          "description": "Type of the resource. This is always \"tasks#task\"."
+        },
+        "links": {
+          "items": {
+            "type": "object",
+            "properties": {
+              "description": {
+                "type": "string",
+                "description": "The description. In HTML speak: Everything between <a> and </a>."
+              },
+              "link": {
+                "type": "string",
+                "description": "The URL."
+              },
+              "type": {
+                "type": "string",
+                "description": "Type of the link, e.g. \"email\"."
+              }
+            }
+          },
+          "type": "array",
+          "description": "Collection of links. This collection is read-only."
+        },
+        "notes": {
+          "type": "string",
+          "description": "Notes describing the task. Optional."
+        },
+        "parent": {
+          "type": "string",
+          "description": "Parent task identifier. This field is omitted if it is a top-level task. This field is read-only. Use the \"move\" method to move the task under a different parent or to the top level."
+        },
+        "position": {
+          "type": "string",
+          "description": "String indicating the position of the task among its sibling tasks under the same parent task or at the top level. If this string is greater than another task's corresponding position string according to lexicographical ordering, the task is positioned after the other task under the same parent task (or at the top level). This field is read-only. Use the \"move\" method to move the task to another position."
+        },
+        "selfLink": {
+          "type": "string",
+          "description": "URL pointing to this task. Used to retrieve, update, or delete this task."
+        },
+        "status": {
+          "type": "string",
+          "description": "Status of the task. This is either \"needsAction\" or \"completed\"."
+        },
+        "title": {
+          "type": "string",
+          "description": "Title of the task."
+        },
+        "updated": {
+          "type": "string",
+          "description": "Last modification time of the task (as a RFC 3339 timestamp).",
+          "format": "date-time"
+        }
+      }
+    },
+    "TaskList": {
+      "type": "object",
+      "id": "TaskList",
+      "properties": {
+        "etag": {
+          "type": "string",
+          "description": "ETag of the resource."
+        },
+        "id": {
+          "type": "string",
+          "description": "Task list identifier."
+        },
+        "kind": {
+          "type": "string",
+          "default": "tasks#taskList",
+          "description": "Type of the resource. This is always \"tasks#taskList\"."
+        },
+        "selfLink": {
+          "type": "string",
+          "description": "URL pointing to this task list. Used to retrieve, update, or delete this task list."
+        },
+        "title": {
+          "type": "string",
+          "description": "Title of the task list."
+        }
+      }
+    },
+    "TaskLists": {
+      "type": "object",
+      "id": "TaskLists",
+      "properties": {
+        "etag": {
+          "type": "string",
+          "description": "ETag of the resource."
+        },
+        "items": {
+          "items": {
+            "$ref": "TaskList"
+          },
+          "type": "array",
+          "description": "Collection of task lists."
+        },
+        "kind": {
+          "type": "string",
+          "default": "tasks#taskLists",
+          "description": "Type of the resource. This is always \"tasks#taskLists\"."
+        },
+        "nextPageToken": {
+          "type": "string",
+          "description": "Token that can be used to request the next page of this result."
+        }
+      }
+    },
+    "Tasks": {
+      "type": "object",
+      "id": "Tasks",
+      "properties": {
+        "etag": {
+          "type": "string",
+          "description": "ETag of the resource."
+        },
+        "items": {
+          "items": {
+            "$ref": "Task"
+          },
+          "type": "array",
+          "description": "Collection of tasks."
+        },
+        "kind": {
+          "type": "string",
+          "default": "tasks#tasks",
+          "description": "Type of the resource. This is always \"tasks#tasks\"."
+        },
+        "nextPageToken": {
+          "type": "string",
+          "description": "Token used to access the next page of this result."
+        }
       }
-   },
-   "title":"Tasks API",
-   "version":"v1"
+    }
+  },
+  "description": "Lets you manage your tasks and task lists.",
+  "labels": [
+    "labs"
+  ],
+  "version": "v1",
+  "kind": "discovery#restDescription",
+  "title": "Tasks API",
+  "parameters": {
+    "alt": {
+      "location": "query",
+      "enum": [
+        "json"
+      ],
+      "type": "string",
+      "default": "json",
+      "description": "Data format for the response.",
+      "enumDescriptions": [
+        "Responses with Content-Type of application/json"
+      ]
+    },
+    "fields": {
+      "location": "query",
+      "type": "string",
+      "description": "Selector specifying which fields to include in a partial response."
+    },
+    "key": {
+      "location": "query",
+      "type": "string",
+      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token."
+    },
+    "oauth_token": {
+      "location": "query",
+      "type": "string",
+      "description": "OAuth 2.0 token for the current user."
+    },
+    "prettyPrint": {
+      "location": "query",
+      "type": "boolean",
+      "default": "true",
+      "description": "Returns response with indentations and line breaks."
+    },
+    "quotaUser": {
+      "location": "query",
+      "type": "string",
+      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. Overrides userIp if both are provided."
+    },
+    "userIp": {
+      "location": "query",
+      "type": "string",
+      "description": "IP address of the site where the request originates. Use this if you want to enforce per-user limits."
+    }
+  },
+  "id": "tasks:v1",
+  "protocol": "rest"
 }
